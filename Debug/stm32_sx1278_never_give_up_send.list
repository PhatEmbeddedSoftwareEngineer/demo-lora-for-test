
stm32_sx1278_never_give_up_send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006464  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08006578  08006578  00007578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e0  080069e0  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e8  080069e8  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069ec  080069ec  000079ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080069f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001d4  08006bc4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08006bc4  0000863c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdc6  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021db  00000000  00000000  00014fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000171a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dd  00000000  00000000  00017e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019036  00000000  00000000  0001883d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010425  00000000  00000000  00031873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089647  00000000  00000000  00041c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f0  00000000  00000000  000cb324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000cf814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800655c 	.word	0x0800655c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800655c 	.word	0x0800655c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b968 	b.w	8000d70 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9d08      	ldr	r5, [sp, #32]
 8000abe:	460c      	mov	r4, r1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d14e      	bne.n	8000b62 <__udivmoddi4+0xaa>
 8000ac4:	4694      	mov	ip, r2
 8000ac6:	458c      	cmp	ip, r1
 8000ac8:	4686      	mov	lr, r0
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	d962      	bls.n	8000b96 <__udivmoddi4+0xde>
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0320 	rsb	r3, r2, #32
 8000ad6:	4091      	lsls	r1, r2
 8000ad8:	fa20 f303 	lsr.w	r3, r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aee:	fb07 1114 	mls	r1, r7, r4, r1
 8000af2:	fa1f f68c 	uxth.w	r6, ip
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb04 f106 	mul.w	r1, r4, r6
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x64>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b0e:	f080 8110 	bcs.w	8000d32 <__udivmoddi4+0x27a>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 810d 	bls.w	8000d32 <__udivmoddi4+0x27a>
 8000b18:	3c02      	subs	r4, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1a59      	subs	r1, r3, r1
 8000b1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b22:	fb07 1110 	mls	r1, r7, r0, r1
 8000b26:	fb00 f606 	mul.w	r6, r0, r6
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	429e      	cmp	r6, r3
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3e:	f080 80fa 	bcs.w	8000d36 <__udivmoddi4+0x27e>
 8000b42:	429e      	cmp	r6, r3
 8000b44:	f240 80f7 	bls.w	8000d36 <__udivmoddi4+0x27e>
 8000b48:	4463      	add	r3, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	1b9b      	subs	r3, r3, r6
 8000b50:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b54:	b11d      	cbz	r5, 8000b5e <__udivmoddi4+0xa6>
 8000b56:	40d3      	lsrs	r3, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d905      	bls.n	8000b72 <__udivmoddi4+0xba>
 8000b66:	b10d      	cbz	r5, 8000b6c <__udivmoddi4+0xb4>
 8000b68:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e7f5      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000b72:	fab3 f183 	clz	r1, r3
 8000b76:	2900      	cmp	r1, #0
 8000b78:	d146      	bne.n	8000c08 <__udivmoddi4+0x150>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0xcc>
 8000b7e:	4290      	cmp	r0, r2
 8000b80:	f0c0 80ee 	bcc.w	8000d60 <__udivmoddi4+0x2a8>
 8000b84:	1a86      	subs	r6, r0, r2
 8000b86:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d0e6      	beq.n	8000b5e <__udivmoddi4+0xa6>
 8000b90:	e9c5 6300 	strd	r6, r3, [r5]
 8000b94:	e7e3      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	f040 808f 	bne.w	8000cba <__udivmoddi4+0x202>
 8000b9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba6:	fa1f f78c 	uxth.w	r7, ip
 8000baa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bae:	fb08 4416 	mls	r4, r8, r6, r4
 8000bb2:	fb07 f006 	mul.w	r0, r7, r6
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x11c>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x11a>
 8000bcc:	4298      	cmp	r0, r3
 8000bce:	f200 80cb 	bhi.w	8000d68 <__udivmoddi4+0x2b0>
 8000bd2:	4626      	mov	r6, r4
 8000bd4:	1a1c      	subs	r4, r3, r0
 8000bd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bda:	fb08 4410 	mls	r4, r8, r0, r4
 8000bde:	fb00 f707 	mul.w	r7, r0, r7
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	429f      	cmp	r7, r3
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x148>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x146>
 8000bf8:	429f      	cmp	r7, r3
 8000bfa:	f200 80ae 	bhi.w	8000d5a <__udivmoddi4+0x2a2>
 8000bfe:	4620      	mov	r0, r4
 8000c00:	1bdb      	subs	r3, r3, r7
 8000c02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c06:	e7a5      	b.n	8000b54 <__udivmoddi4+0x9c>
 8000c08:	f1c1 0720 	rsb	r7, r1, #32
 8000c0c:	408b      	lsls	r3, r1
 8000c0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c16:	fa24 f607 	lsr.w	r6, r4, r7
 8000c1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1e:	fbb6 f8f9 	udiv	r8, r6, r9
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	fb09 6618 	mls	r6, r9, r8, r6
 8000c2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2e:	408c      	lsls	r4, r1
 8000c30:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c34:	fb08 f00e 	mul.w	r0, r8, lr
 8000c38:	431c      	orrs	r4, r3
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c40:	4298      	cmp	r0, r3
 8000c42:	fa02 f201 	lsl.w	r2, r2, r1
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x1a6>
 8000c48:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4c:	f108 36ff 	add.w	r6, r8, #4294967295
 8000c50:	f080 8081 	bcs.w	8000d56 <__udivmoddi4+0x29e>
 8000c54:	4298      	cmp	r0, r3
 8000c56:	d97e      	bls.n	8000d56 <__udivmoddi4+0x29e>
 8000c58:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5c:	4463      	add	r3, ip
 8000c5e:	1a1e      	subs	r6, r3, r0
 8000c60:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c64:	fb09 6613 	mls	r6, r9, r3, r6
 8000c68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x1d0>
 8000c76:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7a:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c7e:	d266      	bcs.n	8000d4e <__udivmoddi4+0x296>
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d964      	bls.n	8000d4e <__udivmoddi4+0x296>
 8000c84:	3b02      	subs	r3, #2
 8000c86:	4464      	add	r4, ip
 8000c88:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c8c:	fba0 8302 	umull	r8, r3, r0, r2
 8000c90:	eba4 040e 	sub.w	r4, r4, lr
 8000c94:	429c      	cmp	r4, r3
 8000c96:	46c6      	mov	lr, r8
 8000c98:	461e      	mov	r6, r3
 8000c9a:	d350      	bcc.n	8000d3e <__udivmoddi4+0x286>
 8000c9c:	d04d      	beq.n	8000d3a <__udivmoddi4+0x282>
 8000c9e:	b155      	cbz	r5, 8000cb6 <__udivmoddi4+0x1fe>
 8000ca0:	ebba 030e 	subs.w	r3, sl, lr
 8000ca4:	eb64 0406 	sbc.w	r4, r4, r6
 8000ca8:	fa04 f707 	lsl.w	r7, r4, r7
 8000cac:	40cb      	lsrs	r3, r1
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	40cc      	lsrs	r4, r1
 8000cb2:	e9c5 7400 	strd	r7, r4, [r5]
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e751      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000cba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbe:	f1c2 0320 	rsb	r3, r2, #32
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000cd4:	fb08 1110 	mls	r1, r8, r0, r1
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	431c      	orrs	r4, r3
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce6:	fb00 f107 	mul.w	r1, r0, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x248>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cf6:	d22c      	bcs.n	8000d52 <__udivmoddi4+0x29a>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d92a      	bls.n	8000d52 <__udivmoddi4+0x29a>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d06:	fb08 3311 	mls	r3, r8, r1, r3
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb01 f307 	mul.w	r3, r1, r7
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x272>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d20:	d213      	bcs.n	8000d4a <__udivmoddi4+0x292>
 8000d22:	42a3      	cmp	r3, r4
 8000d24:	d911      	bls.n	8000d4a <__udivmoddi4+0x292>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4464      	add	r4, ip
 8000d2a:	1ae4      	subs	r4, r4, r3
 8000d2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xf2>
 8000d32:	4604      	mov	r4, r0
 8000d34:	e6f2      	b.n	8000b1c <__udivmoddi4+0x64>
 8000d36:	4608      	mov	r0, r1
 8000d38:	e708      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d3a:	45c2      	cmp	sl, r8
 8000d3c:	d2af      	bcs.n	8000c9e <__udivmoddi4+0x1e6>
 8000d3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d42:	eb63 060c 	sbc.w	r6, r3, ip
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7a9      	b.n	8000c9e <__udivmoddi4+0x1e6>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	e7ed      	b.n	8000d2a <__udivmoddi4+0x272>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	e79a      	b.n	8000c88 <__udivmoddi4+0x1d0>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e7d4      	b.n	8000d00 <__udivmoddi4+0x248>
 8000d56:	46b0      	mov	r8, r6
 8000d58:	e781      	b.n	8000c5e <__udivmoddi4+0x1a6>
 8000d5a:	4463      	add	r3, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	e74f      	b.n	8000c00 <__udivmoddi4+0x148>
 8000d60:	4606      	mov	r6, r0
 8000d62:	4623      	mov	r3, r4
 8000d64:	4608      	mov	r0, r1
 8000d66:	e711      	b.n	8000b8c <__udivmoddi4+0xd4>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	e732      	b.n	8000bd4 <__udivmoddi4+0x11c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <init_gpio>:
 */

#include "gpio.h"

void init_gpio()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <init_gpio+0xc8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e3c <init_gpio+0xc8>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <init_gpio+0xc8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <init_gpio+0xc8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a25      	ldr	r2, [pc, #148]	@ (8000e3c <init_gpio+0xc8>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <init_gpio+0xc8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <init_gpio+0xc8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e3c <init_gpio+0xc8>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <init_gpio+0xc8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	481a      	ldr	r0, [pc, #104]	@ (8000e40 <init_gpio+0xcc>)
 8000dd6:	f000 ff4e 	bl	8001c76 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4819      	ldr	r0, [pc, #100]	@ (8000e44 <init_gpio+0xd0>)
 8000de0:	f000 ff49 	bl	8001c76 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = NSS_Pin;
 8000de4:	2310      	movs	r3, #16
 8000de6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4811      	ldr	r0, [pc, #68]	@ (8000e40 <init_gpio+0xcc>)
 8000dfc:	f000 fda0 	bl	8001940 <HAL_GPIO_Init>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <init_gpio+0xd0>)
 8000e14:	f000 fd94 	bl	8001940 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <init_gpio+0xd0>)
 8000e30:	f000 fd86 	bl	8001940 <HAL_GPIO_Init>

}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0d4      	sub	sp, #336	@ 0x150
 8000e4c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 fc0d 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f89b 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f96d 	bl	8001134 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e5a:	f000 f90b 	bl	8001074 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e5e:	f000 f93f 	bl	80010e0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e62:	f000 f8d9 	bl	8001018 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_gpio();
 8000e66:	f7ff ff85 	bl	8000d74 <init_gpio>
  init_spi1();
 8000e6a:	f000 f9b9 	bl	80011e0 <init_spi1>
#if MODE_SEND
  printf("Mode: Master\r\n");
#elif MODE_RECEIVE
  printf("Mode: Receive\r\n");
 8000e6e:	483a      	ldr	r0, [pc, #232]	@ (8000f58 <main+0x110>)
 8000e70:	f003 fbfe 	bl	8004670 <puts>
#endif

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000e74:	4b39      	ldr	r3, [pc, #228]	@ (8000f5c <main+0x114>)
 8000e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000e80:	4b37      	ldr	r3, [pc, #220]	@ (8000f60 <main+0x118>)
 8000e82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  SX1278_hw.nss.pin = NSS_Pin;
 8000e86:	2310      	movs	r3, #16
 8000e88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8000e8c:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <main+0x114>)
 8000e8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  SX1278_hw.reset.pin = RESET_Pin;
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  SX1278_hw.spi = &hspi1;
 8000e98:	4b32      	ldr	r3, [pc, #200]	@ (8000f64 <main+0x11c>)
 8000e9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

  SX1278.hw = &SX1278_hw;
 8000e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ea2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000ea6:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8000eaa:	601a      	str	r2, [r3, #0]

  printf("Configuring LoRa module\r\n");
 8000eac:	482e      	ldr	r0, [pc, #184]	@ (8000f68 <main+0x120>)
 8000eae:	f003 fbdf 	bl	8004670 <puts>
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000eb2:	4639      	mov	r1, r7
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	9305      	str	r3, [sp, #20]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9304      	str	r3, [sp, #16]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	a320      	add	r3, pc, #128	@ (adr r3, 8000f50 <main+0x108>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	f002 fd3b 	bl	800394e <SX1278_init>
		  	  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  printf("Done configuring LoRaModule\r\n");
 8000ed8:	4824      	ldr	r0, [pc, #144]	@ (8000f6c <main+0x124>)
 8000eda:	f003 fbc9 	bl	8004670 <puts>

#if MODE_SEND
  // ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
#elif MODE_RECEIVE
  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fc88 	bl	80037fc <SX1278_LoRaEntryRx>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a20      	ldr	r2, [pc, #128]	@ (8000f70 <main+0x128>)
 8000ef0:	6013      	str	r3, [r2, #0]
	  
//
	  printf("Transmission: %d\r\n", ret);
//	  printf("Package sent...\r\n");
#elif MODE_RECEIVE
	  printf("Slave ...\r\n");
 8000ef2:	4820      	ldr	r0, [pc, #128]	@ (8000f74 <main+0x12c>)
 8000ef4:	f003 fbbc 	bl	8004670 <puts>
	  HAL_Delay(800);
 8000ef8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000efc:	f000 fc18 	bl	8001730 <HAL_Delay>
	  printf("Receiving package...\r\n");
 8000f00:	481d      	ldr	r0, [pc, #116]	@ (8000f78 <main+0x130>)
 8000f02:	f003 fbb5 	bl	8004670 <puts>

	  ret = SX1278_LoRaRxPacket(&SX1278);
 8000f06:	463b      	mov	r3, r7
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fcdc 	bl	80038c6 <SX1278_LoRaRxPacket>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <main+0x128>)
 8000f14:	601a      	str	r2, [r3, #0]
	  printf("Received: %d\r\n", ret);
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <main+0x128>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <main+0x134>)
 8000f1e:	f003 fb3f 	bl	80045a0 <iprintf>
	  if (ret > 0) {
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <main+0x128>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	dd0e      	ble.n	8000f48 <main+0x100>
	  	SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <main+0x128>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	463b      	mov	r3, r7
 8000f32:	4913      	ldr	r1, [pc, #76]	@ (8000f80 <main+0x138>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fd37 	bl	80039a8 <SX1278_read>
	  	printf("Content (%d): %s\r\n", ret, buffer);
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <main+0x128>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <main+0x138>)
 8000f40:	4619      	mov	r1, r3
 8000f42:	4810      	ldr	r0, [pc, #64]	@ (8000f84 <main+0x13c>)
 8000f44:	f003 fb2c 	bl	80045a0 <iprintf>
	  }
	  printf("Package received ...\r\n");
 8000f48:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <main+0x140>)
 8000f4a:	f003 fb91 	bl	8004670 <puts>
	  printf("Slave ...\r\n");
 8000f4e:	e7d0      	b.n	8000ef2 <main+0xaa>
 8000f50:	19de5080 	.word	0x19de5080
 8000f54:	00000000 	.word	0x00000000
 8000f58:	08006578 	.word	0x08006578
 8000f5c:	40010c00 	.word	0x40010c00
 8000f60:	40010800 	.word	0x40010800
 8000f64:	20000244 	.word	0x20000244
 8000f68:	08006588 	.word	0x08006588
 8000f6c:	080065a4 	.word	0x080065a4
 8000f70:	200002e4 	.word	0x200002e4
 8000f74:	080065c4 	.word	0x080065c4
 8000f78:	080065d0 	.word	0x080065d0
 8000f7c:	080065e8 	.word	0x080065e8
 8000f80:	200002e8 	.word	0x200002e8
 8000f84:	080065f8 	.word	0x080065f8
 8000f88:	0800660c 	.word	0x0800660c

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	@ 0x40
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	2228      	movs	r2, #40	@ 0x28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fc48 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 ffab 	bl	8001f30 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fe0:	f000 f8f8 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fa18 	bl	8002434 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800100a:	f000 f8e3 	bl	80011d4 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3740      	adds	r7, #64	@ 0x40
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_I2C1_Init+0x50>)
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <MX_I2C1_Init+0x54>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_I2C1_Init+0x50>)
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <MX_I2C1_Init+0x58>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_I2C1_Init+0x50>)
 8001036:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800103a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <MX_I2C1_Init+0x50>)
 8001056:	f000 fe27 	bl	8001ca8 <HAL_I2C_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001060:	f000 f8b8 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200001f0 	.word	0x200001f0
 800106c:	40005400 	.word	0x40005400
 8001070:	00061a80 	.word	0x00061a80

08001074 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_SPI1_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <MX_SPI1_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_SPI1_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010a8:	2218      	movs	r2, #24
 80010aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_SPI1_Init+0x64>)
 80010c6:	f001 fb43 	bl	8002750 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 f880 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000244 	.word	0x20000244
 80010dc:	40013000 	.word	0x40013000

080010e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <MX_USART1_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001118:	f001 ff51 	bl	8002fbe <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f000 f857 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000029c 	.word	0x2000029c
 8001130:	40013800 	.word	0x40013800

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_GPIO_Init+0x74>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_GPIO_Init+0x74>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_GPIO_Init+0x74>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Pin = GPIO_PIN_1;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA,&GPIO_InitStructure);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_GPIO_Init+0x78>)
 800119a:	f000 fbd1 	bl	8001940 <HAL_GPIO_Init>

}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80011b8:	1d39      	adds	r1, r7, #4
 80011ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011be:	2201      	movs	r2, #1
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <__io_putchar+0x20>)
 80011c2:	f001 ff4c 	bl	800305e <HAL_UART_Transmit>

  return ch;
 80011c6:	687b      	ldr	r3, [r7, #4]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000029c 	.word	0x2000029c

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <init_spi1>:


#include "spi.h"

void init_spi1(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <init_spi1+0x64>)
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <init_spi1+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <init_spi1+0x64>)
 80011ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <init_spi1+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <init_spi1+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <init_spi1+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <init_spi1+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <init_spi1+0x64>)
 800120c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001210:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <init_spi1+0x64>)
 8001214:	2218      	movs	r2, #24
 8001216:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <init_spi1+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <init_spi1+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <init_spi1+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <init_spi1+0x64>)
 800122c:	2207      	movs	r2, #7
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
//	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <init_spi1+0x64>)
 8001232:	f001 fa8d 	bl	8002750 <HAL_SPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <init_spi1+0x60>
	{
	  Error_Handler();
 800123c:	f7ff ffca 	bl	80011d4 <Error_Handler>
	}
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000244 	.word	0x20000244
 8001248:	40013000 	.word	0x40013000

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_MspInit+0x40>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <HAL_MspInit+0x40>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_MspInit+0x40>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_MspInit+0x40>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_MspInit+0x40>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_MspInit+0x40>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x70>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d123      	bne.n	80012f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_I2C_MspInit+0x74>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <HAL_I2C_MspInit+0x74>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_I2C_MspInit+0x74>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c8:	23c0      	movs	r3, #192	@ 0xc0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480b      	ldr	r0, [pc, #44]	@ (8001308 <HAL_I2C_MspInit+0x78>)
 80012dc:	f000 fb30 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_I2C_MspInit+0x74>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <HAL_I2C_MspInit+0x74>)
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ea:	61d3      	str	r3, [r2, #28]
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_I2C_MspInit+0x74>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40005400 	.word	0x40005400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010c00 	.word	0x40010c00

0800130c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <HAL_SPI_MspInit+0x88>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d12f      	bne.n	800138c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132c:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_SPI_MspInit+0x8c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <HAL_SPI_MspInit+0x8c>)
 8001332:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_SPI_MspInit+0x8c>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <HAL_SPI_MspInit+0x8c>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a13      	ldr	r2, [pc, #76]	@ (8001398 <HAL_SPI_MspInit+0x8c>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_SPI_MspInit+0x8c>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800135c:	23a0      	movs	r3, #160	@ 0xa0
 800135e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_SPI_MspInit+0x90>)
 8001370:	f000 fae6 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001374:	2340      	movs	r3, #64	@ 0x40
 8001376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <HAL_SPI_MspInit+0x90>)
 8001388:	f000 fada 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013000 	.word	0x40013000
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <HAL_UART_MspInit+0x8c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d131      	bne.n	8001424 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_UART_MspInit+0x90>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <HAL_UART_MspInit+0x90>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <HAL_UART_MspInit+0x90>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_UART_MspInit+0x90>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <HAL_UART_MspInit+0x90>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_UART_MspInit+0x90>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <HAL_UART_MspInit+0x94>)
 8001406:	f000 fa9b 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800140a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <HAL_UART_MspInit+0x94>)
 8001420:	f000 fa8e 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013800 	.word	0x40013800
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f936 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <_kill>:

int _kill(int pid, int sig)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014a8:	f003 fa14 	bl	80048d4 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2216      	movs	r2, #22
 80014b0:	601a      	str	r2, [r3, #0]
	return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_exit>:

void _exit (int status)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014c6:	f04f 31ff 	mov.w	r1, #4294967295
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffe7 	bl	800149e <_kill>
	while (1) {}		/* Make sure we hang here */
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <_exit+0x12>

080014d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e00a      	b.n	80014fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e6:	f3af 8000 	nop.w
 80014ea:	4601      	mov	r1, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbf0      	blt.n	80014e6 <_read+0x12>
	}

return len;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e009      	b.n	8001534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe41 	bl	80011b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf1      	blt.n	8001520 <_write+0x12>
	}
	return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_close>:

int _close(int file)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	return -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800156c:	605a      	str	r2, [r3, #4]
	return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <_isatty>:

int _isatty(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	return 1;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
	return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f003 f97c 	bl	80048d4 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20005000 	.word	0x20005000
 8001608:	00000400 	.word	0x00000400
 800160c:	200004e8 	.word	0x200004e8
 8001610:	20000640 	.word	0x20000640

08001614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001620:	f7ff fff8 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001624:	480b      	ldr	r0, [pc, #44]	@ (8001654 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001626:	490c      	ldr	r1, [pc, #48]	@ (8001658 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <LoopFillZerobss+0x16>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800163c:	4c09      	ldr	r4, [pc, #36]	@ (8001664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164a:	f003 f949 	bl	80048e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164e:	f7ff fbfb 	bl	8000e48 <main>
  bx lr
 8001652:	4770      	bx	lr
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800165c:	080069f0 	.word	0x080069f0
  ldr r2, =_sbss
 8001660:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001664:	2000063c 	.word	0x2000063c

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_Init+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_Init+0x28>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f92b 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fde0 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f935 	bl	8001926 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f90b 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_IncTick+0x1c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_IncTick+0x20>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a03      	ldr	r2, [pc, #12]	@ (8001718 <HAL_IncTick+0x20>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000008 	.word	0x20000008
 8001718:	200004ec 	.word	0x200004ec

0800171c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b02      	ldr	r3, [pc, #8]	@ (800172c <HAL_GetTick+0x10>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	200004ec 	.word	0x200004ec

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff fff0 	bl	800171c <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d005      	beq.n	8001756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_Delay+0x44>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	bf00      	nop
 8001758:	f7ff ffe0 	bl	800171c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d8f7      	bhi.n	8001758 <HAL_Delay+0x28>
  {
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff90 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff49 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff5e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ff90 	bl	8001830 <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff5f 	bl	80017dc <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffb0 	bl	8001894 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b08b      	sub	sp, #44	@ 0x2c
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e169      	b.n	8001c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001954:	2201      	movs	r2, #1
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8158 	bne.w	8001c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a9a      	ldr	r2, [pc, #616]	@ (8001be0 <HAL_GPIO_Init+0x2a0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d05e      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 800197c:	4a98      	ldr	r2, [pc, #608]	@ (8001be0 <HAL_GPIO_Init+0x2a0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d875      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 8001982:	4a98      	ldr	r2, [pc, #608]	@ (8001be4 <HAL_GPIO_Init+0x2a4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d058      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 8001988:	4a96      	ldr	r2, [pc, #600]	@ (8001be4 <HAL_GPIO_Init+0x2a4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d86f      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 800198e:	4a96      	ldr	r2, [pc, #600]	@ (8001be8 <HAL_GPIO_Init+0x2a8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d052      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 8001994:	4a94      	ldr	r2, [pc, #592]	@ (8001be8 <HAL_GPIO_Init+0x2a8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d869      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 800199a:	4a94      	ldr	r2, [pc, #592]	@ (8001bec <HAL_GPIO_Init+0x2ac>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d04c      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 80019a0:	4a92      	ldr	r2, [pc, #584]	@ (8001bec <HAL_GPIO_Init+0x2ac>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d863      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019a6:	4a92      	ldr	r2, [pc, #584]	@ (8001bf0 <HAL_GPIO_Init+0x2b0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d046      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 80019ac:	4a90      	ldr	r2, [pc, #576]	@ (8001bf0 <HAL_GPIO_Init+0x2b0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d85d      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d82a      	bhi.n	8001a0c <HAL_GPIO_Init+0xcc>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d859      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019ba:	a201      	add	r2, pc, #4	@ (adr r2, 80019c0 <HAL_GPIO_Init+0x80>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a15 	.word	0x08001a15
 80019c8:	08001a27 	.word	0x08001a27
 80019cc:	08001a69 	.word	0x08001a69
 80019d0:	08001a6f 	.word	0x08001a6f
 80019d4:	08001a6f 	.word	0x08001a6f
 80019d8:	08001a6f 	.word	0x08001a6f
 80019dc:	08001a6f 	.word	0x08001a6f
 80019e0:	08001a6f 	.word	0x08001a6f
 80019e4:	08001a6f 	.word	0x08001a6f
 80019e8:	08001a6f 	.word	0x08001a6f
 80019ec:	08001a6f 	.word	0x08001a6f
 80019f0:	08001a6f 	.word	0x08001a6f
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a6f 	.word	0x08001a6f
 80019fc:	08001a6f 	.word	0x08001a6f
 8001a00:	08001a6f 	.word	0x08001a6f
 8001a04:	08001a1d 	.word	0x08001a1d
 8001a08:	08001a31 	.word	0x08001a31
 8001a0c:	4a79      	ldr	r2, [pc, #484]	@ (8001bf4 <HAL_GPIO_Init+0x2b4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a12:	e02c      	b.n	8001a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e029      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	3304      	adds	r3, #4
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e024      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e01f      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	330c      	adds	r3, #12
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e01a      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a42:	2304      	movs	r3, #4
 8001a44:	623b      	str	r3, [r7, #32]
          break;
 8001a46:	e013      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	611a      	str	r2, [r3, #16]
          break;
 8001a5a:	e009      	b.n	8001a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	615a      	str	r2, [r3, #20]
          break;
 8001a66:	e003      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          break;
 8001a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	@ 0xff
 8001a74:	d801      	bhi.n	8001a7a <HAL_GPIO_Init+0x13a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	e001      	b.n	8001a7e <HAL_GPIO_Init+0x13e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2bff      	cmp	r3, #255	@ 0xff
 8001a84:	d802      	bhi.n	8001a8c <HAL_GPIO_Init+0x14c>
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x152>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	3b08      	subs	r3, #8
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	210f      	movs	r1, #15
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80b1 	beq.w	8001c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad8:	4a48      	ldr	r2, [pc, #288]	@ (8001bfc <HAL_GPIO_Init+0x2bc>)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a40      	ldr	r2, [pc, #256]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1ec>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3f      	ldr	r2, [pc, #252]	@ (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1e8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c08 <HAL_GPIO_Init+0x2c8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1e4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	@ (8001c0c <HAL_GPIO_Init+0x2cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1e0>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1ee>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3e:	492f      	ldr	r1, [pc, #188]	@ (8001bfc <HAL_GPIO_Init+0x2bc>)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	492c      	ldr	r1, [pc, #176]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b2a      	ldr	r3, [pc, #168]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4928      	ldr	r1, [pc, #160]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4922      	ldr	r1, [pc, #136]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	491e      	ldr	r1, [pc, #120]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4918      	ldr	r1, [pc, #96]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4914      	ldr	r1, [pc, #80]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d021      	beq.n	8001c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	490e      	ldr	r1, [pc, #56]	@ (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e021      	b.n	8001c22 <HAL_GPIO_Init+0x2e2>
 8001bde:	bf00      	nop
 8001be0:	10320000 	.word	0x10320000
 8001be4:	10310000 	.word	0x10310000
 8001be8:	10220000 	.word	0x10220000
 8001bec:	10210000 	.word	0x10210000
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	10110000 	.word	0x10110000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40011400 	.word	0x40011400
 8001c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4909      	ldr	r1, [pc, #36]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f47f ae8e 	bne.w	8001954 <HAL_GPIO_Init+0x14>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	372c      	adds	r7, #44	@ 0x2c
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e001      	b.n	8001c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	807b      	strh	r3, [r7, #2]
 8001c82:	4613      	mov	r3, r2
 8001c84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c86:	787b      	ldrb	r3, [r7, #1]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8c:	887a      	ldrh	r2, [r7, #2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c92:	e003      	b.n	8001c9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	041a      	lsls	r2, r3, #16
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	611a      	str	r2, [r3, #16]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e12b      	b.n	8001f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fade 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	@ 0x24
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d0c:	f000 fcda 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8001d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a81      	ldr	r2, [pc, #516]	@ (8001f1c <HAL_I2C_Init+0x274>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d807      	bhi.n	8001d2c <HAL_I2C_Init+0x84>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a80      	ldr	r2, [pc, #512]	@ (8001f20 <HAL_I2C_Init+0x278>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf94      	ite	ls
 8001d24:	2301      	movls	r3, #1
 8001d26:	2300      	movhi	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e006      	b.n	8001d3a <HAL_I2C_Init+0x92>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f24 <HAL_I2C_Init+0x27c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0e7      	b.n	8001f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4a78      	ldr	r2, [pc, #480]	@ (8001f28 <HAL_I2C_Init+0x280>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0c9b      	lsrs	r3, r3, #18
 8001d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	@ (8001f1c <HAL_I2C_Init+0x274>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d802      	bhi.n	8001d7c <HAL_I2C_Init+0xd4>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	e009      	b.n	8001d90 <HAL_I2C_Init+0xe8>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	4a69      	ldr	r2, [pc, #420]	@ (8001f2c <HAL_I2C_Init+0x284>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	3301      	adds	r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001da2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	495c      	ldr	r1, [pc, #368]	@ (8001f1c <HAL_I2C_Init+0x274>)
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d819      	bhi.n	8001de4 <HAL_I2C_Init+0x13c>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e59      	subs	r1, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dbe:	1c59      	adds	r1, r3, #1
 8001dc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_I2C_Init+0x138>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e59      	subs	r1, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dde:	e051      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e04f      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_I2C_Init+0x168>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1e58      	subs	r0, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	e012      	b.n	8001e36 <HAL_I2C_Init+0x18e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	0099      	lsls	r1, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x196>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e022      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10e      	bne.n	8001e64 <HAL_I2C_Init+0x1bc>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e58      	subs	r0, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e62:	e00f      	b.n	8001e84 <HAL_I2C_Init+0x1dc>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	0099      	lsls	r1, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	6809      	ldr	r1, [r1, #0]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6911      	ldr	r1, [r2, #16]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	000186a0 	.word	0x000186a0
 8001f20:	001e847f 	.word	0x001e847f
 8001f24:	003d08ff 	.word	0x003d08ff
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e272      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f50:	4b92      	ldr	r3, [pc, #584]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d00c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d112      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
 8001f68:	4b8c      	ldr	r3, [pc, #560]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f74:	d10b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f76:	4b89      	ldr	r3, [pc, #548]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d06c      	beq.n	800205c <HAL_RCC_OscConfig+0x12c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d168      	bne.n	800205c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e24c      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x76>
 8001f98:	4b80      	ldr	r3, [pc, #512]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a7f      	ldr	r2, [pc, #508]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e02e      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b7b      	ldr	r3, [pc, #492]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7a      	ldr	r2, [pc, #488]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b78      	ldr	r3, [pc, #480]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a77      	ldr	r2, [pc, #476]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0xbc>
 8001fd2:	4b72      	ldr	r3, [pc, #456]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a71      	ldr	r2, [pc, #452]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6f      	ldr	r3, [pc, #444]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xd4>
 8001fec:	4b6b      	ldr	r3, [pc, #428]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6a      	ldr	r2, [pc, #424]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b68      	ldr	r3, [pc, #416]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a67      	ldr	r2, [pc, #412]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fb86 	bl	800171c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fb82 	bl	800171c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e200      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5d      	ldr	r3, [pc, #372]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xe4>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fb72 	bl	800171c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fb6e 	bl	800171c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1ec      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b53      	ldr	r3, [pc, #332]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x10c>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206a:	4b4c      	ldr	r3, [pc, #304]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002076:	4b49      	ldr	r3, [pc, #292]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
 8002082:	4b46      	ldr	r3, [pc, #280]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b43      	ldr	r3, [pc, #268]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c0      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4939      	ldr	r1, [pc, #228]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fb27 	bl	800171c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff fb23 	bl	800171c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a1      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4927      	ldr	r1, [pc, #156]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fb06 	bl	800171c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff fb02 	bl	800171c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e180      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03a      	beq.n	80021b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d019      	beq.n	800217a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <HAL_RCC_OscConfig+0x274>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7ff fae6 	bl	800171c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fae2 	bl	800171c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e160      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <HAL_RCC_OscConfig+0x26c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002172:	2001      	movs	r0, #1
 8002174:	f000 face 	bl	8002714 <RCC_Delay>
 8002178:	e01c      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_RCC_OscConfig+0x274>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7ff facc 	bl	800171c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002186:	e00f      	b.n	80021a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff fac8 	bl	800171c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d908      	bls.n	80021a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e146      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	42420000 	.word	0x42420000
 80021a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b92      	ldr	r3, [pc, #584]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e9      	bne.n	8002188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a6 	beq.w	800230e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b8b      	ldr	r3, [pc, #556]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	4b88      	ldr	r3, [pc, #544]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a87      	ldr	r2, [pc, #540]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]
 80021de:	4b85      	ldr	r3, [pc, #532]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b82      	ldr	r3, [pc, #520]	@ (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d118      	bne.n	800222c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fa:	4b7f      	ldr	r3, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7e      	ldr	r2, [pc, #504]	@ (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7ff fa89 	bl	800171c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220e:	f7ff fa85 	bl	800171c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b64      	cmp	r3, #100	@ 0x64
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e103      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4b75      	ldr	r3, [pc, #468]	@ (80023f8 <HAL_RCC_OscConfig+0x4c8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x312>
 8002234:	4b6f      	ldr	r3, [pc, #444]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a6e      	ldr	r2, [pc, #440]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e02d      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x334>
 800224a:	4b6a      	ldr	r3, [pc, #424]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a69      	ldr	r2, [pc, #420]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b67      	ldr	r3, [pc, #412]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a66      	ldr	r2, [pc, #408]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	e01c      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x356>
 800226c:	4b61      	ldr	r3, [pc, #388]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a60      	ldr	r2, [pc, #384]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	4b5e      	ldr	r3, [pc, #376]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a5d      	ldr	r2, [pc, #372]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x36e>
 8002286:	4b5b      	ldr	r3, [pc, #364]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a5a      	ldr	r2, [pc, #360]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff fa39 	bl	800171c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7ff fa35 	bl	800171c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0b1      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ee      	beq.n	80022ae <HAL_RCC_OscConfig+0x37e>
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff fa23 	bl	800171c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff fa1f 	bl	800171c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e09b      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	4b40      	ldr	r3, [pc, #256]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b3c      	ldr	r3, [pc, #240]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a3b      	ldr	r2, [pc, #236]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800230c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8087 	beq.w	8002426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002318:	4b36      	ldr	r3, [pc, #216]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d061      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d146      	bne.n	80023ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4b33      	ldr	r3, [pc, #204]	@ (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7ff f9f3 	bl	800171c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7ff f9ef 	bl	800171c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e06d      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002360:	d108      	bne.n	8002374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4921      	ldr	r1, [pc, #132]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002374:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a19      	ldr	r1, [r3, #32]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	430b      	orrs	r3, r1
 8002386:	491b      	ldr	r1, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x4cc>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff f9c3 	bl	800171c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff f9bf 	bl	800171c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x46a>
 80023b8:	e035      	b.n	8002426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff f9ac 	bl	800171c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff f9a8 	bl	800171c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e026      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x498>
 80023e6:	e01e      	b.n	8002426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e019      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_OscConfig+0x500>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	429a      	cmp	r2, r3
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d0      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d910      	bls.n	8002478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0207 	bic.w	r2, r3, #7
 800245e:	4965      	ldr	r1, [pc, #404]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a58      	ldr	r2, [pc, #352]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800249a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d040      	beq.n	8002554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d115      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e073      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b3d      	ldr	r3, [pc, #244]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06b      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b39      	ldr	r3, [pc, #228]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4936      	ldr	r1, [pc, #216]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7ff f8fa 	bl	800171c <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7ff f8f6 	bl	800171c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e053      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2d      	ldr	r3, [pc, #180]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d210      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4922      	ldr	r1, [pc, #136]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f821 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	490a      	ldr	r1, [pc, #40]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025d4:	5ccb      	ldrb	r3, [r1, r3]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x1cc>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_ClockConfig+0x1d0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f858 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08006624 	.word	0x08006624
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002622:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <HAL_RCC_GetSysClockFreq+0x94>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x30>
 8002632:	2b08      	cmp	r3, #8
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x36>
 8002636:	e027      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800263a:	613b      	str	r3, [r7, #16]
      break;
 800263c:	e027      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	0c9b      	lsrs	r3, r3, #18
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002648:	5cd3      	ldrb	r3, [r2, r3]
 800264a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_RCC_GetSysClockFreq+0x94>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0c5b      	lsrs	r3, r3, #17
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800266a:	fb03 f202 	mul.w	r2, r3, r2
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e004      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a0c      	ldr	r2, [pc, #48]	@ (80026ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	613b      	str	r3, [r7, #16]
      break;
 8002686:	e002      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002688:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268e:	693b      	ldr	r3, [r7, #16]
}
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	007a1200 	.word	0x007a1200
 80026a4:	0800663c 	.word	0x0800663c
 80026a8:	0800664c 	.word	0x0800664c
 80026ac:	003d0900 	.word	0x003d0900

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b02      	ldr	r3, [pc, #8]	@ (80026c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c8:	f7ff fff2 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	@ (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08006634 	.word	0x08006634

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffde 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08006634 	.word	0x08006634

08002714 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800271c:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <RCC_Delay+0x34>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <RCC_Delay+0x38>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0a5b      	lsrs	r3, r3, #9
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002730:	bf00      	nop
  }
  while (Delay --);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	60fa      	str	r2, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <RCC_Delay+0x1c>
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	20000000 	.word	0x20000000
 800274c:	10624dd3 	.word	0x10624dd3

08002750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e076      	b.n	8002850 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002772:	d009      	beq.n	8002788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
 800277a:	e005      	b.n	8002788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fdb2 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280c:	ea42 0103 	orr.w	r1, r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	0c1a      	lsrs	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f002 0204 	and.w	r2, r2, #4
 800282e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800283e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002868:	f7fe ff58 	bl	800171c <HAL_GetTick>
 800286c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	e12a      	b.n	8002ad8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_SPI_Transmit+0x36>
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e122      	b.n	8002ad8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_SPI_Transmit+0x48>
 800289c:	2302      	movs	r3, #2
 800289e:	e11b      	b.n	8002ad8 <HAL_SPI_Transmit+0x280>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	88fa      	ldrh	r2, [r7, #6]
 80028c6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ee:	d10f      	bne.n	8002910 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800290e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b40      	cmp	r3, #64	@ 0x40
 800291c:	d007      	beq.n	800292e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002936:	d152      	bne.n	80029de <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_Transmit+0xee>
 8002940:	8b7b      	ldrh	r3, [r7, #26]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d145      	bne.n	80029d2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	1c9a      	adds	r2, r3, #2
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800296a:	e032      	b.n	80029d2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d112      	bne.n	80029a0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	881a      	ldrh	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	1c9a      	adds	r2, r3, #2
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800299e:	e018      	b.n	80029d2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a0:	f7fe febc 	bl	800171c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d803      	bhi.n	80029b8 <HAL_SPI_Transmit+0x160>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Transmit+0x166>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e082      	b.n	8002ad8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1c7      	bne.n	800296c <HAL_SPI_Transmit+0x114>
 80029dc:	e053      	b.n	8002a86 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_Transmit+0x194>
 80029e6:	8b7b      	ldrh	r3, [r7, #26]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d147      	bne.n	8002a7c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	7812      	ldrb	r2, [r2, #0]
 80029f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a12:	e033      	b.n	8002a7c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d113      	bne.n	8002a4a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a48:	e018      	b.n	8002a7c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4a:	f7fe fe67 	bl	800171c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d803      	bhi.n	8002a62 <HAL_SPI_Transmit+0x20a>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d102      	bne.n	8002a68 <HAL_SPI_Transmit+0x210>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e02d      	b.n	8002ad8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1c6      	bne.n	8002a14 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa66 	bl	8002f5c <SPI_EndRxTxTransaction>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002af2:	f7fe fe13 	bl	800171c <HAL_GetTick>
 8002af6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002afe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d00c      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x4a>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b16:	d106      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x46>
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d001      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	e17f      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x5c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x5c>
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e174      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_SPI_TransmitReceive+0x6e>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e16d      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2205      	movs	r2, #5
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc6:	d17e      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0xf6>
 8002bd0:	8afb      	ldrh	r3, [r7, #22]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d16c      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	1c9a      	adds	r2, r3, #2
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfa:	e059      	b.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d11b      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x162>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x162>
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d113      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d119      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x1a4>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d014      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	b292      	uxth	r2, r2
 8002c66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c84:	f7fe fd4a 	bl	800171c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d80d      	bhi.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0bc      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1a0      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x11c>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d19b      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x11c>
 8002cc4:	e082      	b.n	8002dcc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x1f4>
 8002cce:	8afb      	ldrh	r3, [r7, #22]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d171      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfa:	e05d      	b.n	8002db8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11c      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x264>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x264>
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d114      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d119      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x2a6>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d014      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d82:	2301      	movs	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d86:	f7fe fcc9 	bl	800171c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d803      	bhi.n	8002d9e <HAL_SPI_TransmitReceive+0x2be>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d102      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x2c4>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e038      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d19c      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x21c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d197      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f8c3 	bl	8002f5c <SPI_EndRxTxTransaction>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e01d      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3728      	adds	r7, #40	@ 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e40:	b2db      	uxtb	r3, r3
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e5c:	f7fe fc5e 	bl	800171c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e6c:	f7fe fc56 	bl	800171c <HAL_GetTick>
 8002e70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e72:	4b39      	ldr	r3, [pc, #228]	@ (8002f58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	015b      	lsls	r3, r3, #5
 8002e78:	0d1b      	lsrs	r3, r3, #20
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e82:	e054      	b.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d050      	beq.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e8c:	f7fe fc46 	bl	800171c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d902      	bls.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d13d      	bne.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eba:	d111      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec4:	d004      	beq.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ece:	d107      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee8:	d10f      	bne.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e017      	b.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d19b      	bne.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000

08002f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2102      	movs	r1, #2
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff ff6a 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e013      	b.n	8002fb6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	@ 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff ff57 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e042      	b.n	8003056 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe f9db 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2224      	movs	r2, #36	@ 0x24
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003000:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f972 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003016:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003026:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003036:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b08a      	sub	sp, #40	@ 0x28
 8003062:	af02      	add	r7, sp, #8
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	d175      	bne.n	800316a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_UART_Transmit+0x2c>
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06e      	b.n	800316c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2221      	movs	r2, #33	@ 0x21
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309c:	f7fe fb3e 	bl	800171c <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b6:	d108      	bne.n	80030ca <HAL_UART_Transmit+0x6c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e003      	b.n	80030d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d2:	e02e      	b.n	8003132 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	2180      	movs	r1, #128	@ 0x80
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f848 	bl	8003174 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e03a      	b.n	800316c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	3302      	adds	r3, #2
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e007      	b.n	8003124 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1cb      	bne.n	80030d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2200      	movs	r2, #0
 8003144:	2140      	movs	r1, #64	@ 0x40
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f814 	bl	8003174 <UART_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e006      	b.n	800316c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003184:	e03b      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d037      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fac5 	bl	800171c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e03a      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d023      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b80      	cmp	r3, #128	@ 0x80
 80031ba:	d020      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b40      	cmp	r3, #64	@ 0x40
 80031c0:	d01d      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d116      	bne.n	80031fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f81d 	bl	8003226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2208      	movs	r2, #8
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	429a      	cmp	r2, r3
 800321a:	d0b4      	beq.n	8003186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003226:	b480      	push	{r7}
 8003228:	b095      	sub	sp, #84	@ 0x54
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800324e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800325c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	61fb      	str	r3, [r7, #28]
   return(result);
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e5      	bne.n	8003262 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	2b01      	cmp	r3, #1
 800329c:	d119      	bne.n	80032d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f023 0310 	bic.w	r3, r3, #16
 80032b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032be:	61ba      	str	r2, [r7, #24]
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6979      	ldr	r1, [r7, #20]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	613b      	str	r3, [r7, #16]
   return(result);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032e0:	bf00      	nop
 80032e2:	3754      	adds	r7, #84	@ 0x54
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
	...

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003326:	f023 030c 	bic.w	r3, r3, #12
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	430b      	orrs	r3, r1
 8003332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2c      	ldr	r2, [pc, #176]	@ (8003400 <UART_SetConfig+0x114>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003354:	f7ff f9ca 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	e002      	b.n	8003362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff f9b2 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	4a22      	ldr	r2, [pc, #136]	@ (8003404 <UART_SetConfig+0x118>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	0119      	lsls	r1, r3, #4
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fbb2 f2f3 	udiv	r2, r2, r3
 8003398:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <UART_SetConfig+0x118>)
 800339a:	fba3 0302 	umull	r0, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2064      	movs	r0, #100	@ 0x64
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	@ 0x32
 80033ac:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <UART_SetConfig+0x118>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b8:	4419      	add	r1, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <UART_SetConfig+0x118>)
 80033d2:	fba3 0302 	umull	r0, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2064      	movs	r0, #100	@ 0x64
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	@ 0x32
 80033e4:	4a07      	ldr	r2, [pc, #28]	@ (8003404 <UART_SetConfig+0x118>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	440a      	add	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40013800 	.word	0x40013800
 8003404:	51eb851f 	.word	0x51eb851f

08003408 <SX1278_SPIRead>:
 *  Created on: Oct 6, 2024
 *      Author: Phat
 */

#include "sx1278.hpp"
uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fb39 	bl	8003a94 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fb54 	bl	8003ad4 <SX1278_hw_SPIReadByte>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 faf1 	bl	8003a1e <SX1278_hw_SetNSS>
	return tmp;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
 8003452:	4613      	mov	r3, r2
 8003454:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fade 	bl	8003a1e <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800346c:	b2db      	uxtb	r3, r3
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f000 fb0f 	bl	8003a94 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	78ba      	ldrb	r2, [r7, #2]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fb08 	bl	8003a94 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fac7 	bl	8003a1e <SX1278_hw_SetNSS>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	460b      	mov	r3, r1
 80034a6:	72fb      	strb	r3, [r7, #11]
 80034a8:	4613      	mov	r3, r2
 80034aa:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80034ac:	7abb      	ldrb	r3, [r7, #10]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d927      	bls.n	8003502 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fab0 	bl	8003a1e <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	7afa      	ldrb	r2, [r7, #11]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fae4 	bl	8003a94 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
 80034d0:	e00c      	b.n	80034ec <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	18d4      	adds	r4, r2, r3
 80034dc:	4608      	mov	r0, r1
 80034de:	f000 faf9 	bl	8003ad4 <SX1278_hw_SPIReadByte>
 80034e2:	4603      	mov	r3, r0
 80034e4:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	3301      	adds	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
 80034ec:	7dfa      	ldrb	r2, [r7, #23]
 80034ee:	7abb      	ldrb	r3, [r7, #10]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3ee      	bcc.n	80034d2 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fa8f 	bl	8003a1e <SX1278_hw_SetNSS>
 8003500:	e000      	b.n	8003504 <SX1278_SPIBurstRead+0x6c>
		return;
 8003502:	bf00      	nop
	}
}
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}

0800350a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	461a      	mov	r2, r3
 8003516:	460b      	mov	r3, r1
 8003518:	72fb      	strb	r3, [r7, #11]
 800351a:	4613      	mov	r3, r2
 800351c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800351e:	7abb      	ldrb	r3, [r7, #10]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d929      	bls.n	8003578 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fa77 	bl	8003a1e <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	7afb      	ldrb	r3, [r7, #11]
 8003536:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 faa8 	bl	8003a94 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
 8003548:	e00b      	b.n	8003562 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	f000 fa9c 	bl	8003a94 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	3301      	adds	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
 8003562:	7dfa      	ldrb	r2, [r7, #23]
 8003564:	7abb      	ldrb	r3, [r7, #10]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3ef      	bcc.n	800354a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fa54 	bl	8003a1e <SX1278_hw_SetNSS>
 8003576:	e000      	b.n	800357a <SX1278_SPIBurstWrite+0x70>
		return;
 8003578:	bf00      	nop
	}
}
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f90d 	bl	80037a8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800358e:	200f      	movs	r0, #15
 8003590:	f000 fac6 	bl	8003b20 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f917 	bl	80037c8 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035a0:	f04f 0000 	mov.w	r0, #0
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	04d9      	lsls	r1, r3, #19
 80035aa:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80035ae:	04d0      	lsls	r0, r2, #19
 80035b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003770 <SX1278_config+0x1f0>)
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	f7fd fa67 	bl	8000a88 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80035c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	0c02      	lsrs	r2, r0, #16
 80035d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035d4:	0c0b      	lsrs	r3, r1, #16
 80035d6:	b2d3      	uxtb	r3, r2
 80035d8:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80035da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	0a02      	lsrs	r2, r0, #8
 80035e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035ec:	0a0b      	lsrs	r3, r1, #8
 80035ee:	b2d3      	uxtb	r3, r2
 80035f0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80035f2:	7c3b      	ldrb	r3, [r7, #16]
 80035f4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80035f6:	f107 020c 	add.w	r2, r7, #12
 80035fa:	2303      	movs	r3, #3
 80035fc:	2106      	movs	r1, #6
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff83 	bl	800350a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8003604:	2234      	movs	r2, #52	@ 0x34
 8003606:	2139      	movs	r1, #57	@ 0x39
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff1c 	bl	8003446 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7c1b      	ldrb	r3, [r3, #16]
 8003612:	461a      	mov	r2, r3
 8003614:	4b57      	ldr	r3, [pc, #348]	@ (8003774 <SX1278_config+0x1f4>)
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	461a      	mov	r2, r3
 800361a:	2109      	movs	r1, #9
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff12 	bl	8003446 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8003622:	220b      	movs	r2, #11
 8003624:	210b      	movs	r1, #11
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff0d 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800362c:	2223      	movs	r2, #35	@ 0x23
 800362e:	210c      	movs	r1, #12
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff08 	bl	8003446 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7c5b      	ldrb	r3, [r3, #17]
 800363a:	461a      	mov	r2, r3
 800363c:	4b4e      	ldr	r3, [pc, #312]	@ (8003778 <SX1278_config+0x1f8>)
 800363e:	5c9b      	ldrb	r3, [r3, r2]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d147      	bne.n	80036d4 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7c9b      	ldrb	r3, [r3, #18]
 8003648:	461a      	mov	r2, r3
 800364a:	4b4c      	ldr	r3, [pc, #304]	@ (800377c <SX1278_config+0x1fc>)
 800364c:	5c9b      	ldrb	r3, [r3, r2]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7cdb      	ldrb	r3, [r3, #19]
 8003656:	4619      	mov	r1, r3
 8003658:	4b49      	ldr	r3, [pc, #292]	@ (8003780 <SX1278_config+0x200>)
 800365a:	5c5b      	ldrb	r3, [r3, r1]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	4413      	add	r3, r2
 8003662:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003664:	3301      	adds	r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	211d      	movs	r1, #29
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff feea 	bl	8003446 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7c5b      	ldrb	r3, [r3, #17]
 8003676:	461a      	mov	r2, r3
 8003678:	4b3f      	ldr	r3, [pc, #252]	@ (8003778 <SX1278_config+0x1f8>)
 800367a:	5c9b      	ldrb	r3, [r3, r2]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7d1b      	ldrb	r3, [r3, #20]
 8003684:	4619      	mov	r1, r3
 8003686:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <SX1278_config+0x204>)
 8003688:	5c5b      	ldrb	r3, [r3, r1]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	b2db      	uxtb	r3, r3
 800368e:	4413      	add	r3, r2
 8003690:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003692:	3303      	adds	r3, #3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	211e      	movs	r1, #30
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fed3 	bl	8003446 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80036a0:	2131      	movs	r1, #49	@ 0x31
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff feb0 	bl	8003408 <SX1278_SPIRead>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	f043 0305 	orr.w	r3, r3, #5
 80036ba:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	461a      	mov	r2, r3
 80036c0:	2131      	movs	r1, #49	@ 0x31
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff febf 	bl	8003446 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80036c8:	220c      	movs	r2, #12
 80036ca:	2137      	movs	r1, #55	@ 0x37
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff feba 	bl	8003446 <SX1278_SPIWrite>
 80036d2:	e029      	b.n	8003728 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7c9b      	ldrb	r3, [r3, #18]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b28      	ldr	r3, [pc, #160]	@ (800377c <SX1278_config+0x1fc>)
 80036dc:	5c9b      	ldrb	r3, [r3, r2]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7cdb      	ldrb	r3, [r3, #19]
 80036e6:	4619      	mov	r1, r3
 80036e8:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <SX1278_config+0x200>)
 80036ea:	5c5b      	ldrb	r3, [r3, r1]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80036f0:	4413      	add	r3, r2
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	211d      	movs	r1, #29
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fea4 	bl	8003446 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7c5b      	ldrb	r3, [r3, #17]
 8003702:	461a      	mov	r2, r3
 8003704:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <SX1278_config+0x1f8>)
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7d1b      	ldrb	r3, [r3, #20]
 8003710:	4619      	mov	r1, r3
 8003712:	4b1c      	ldr	r3, [pc, #112]	@ (8003784 <SX1278_config+0x204>)
 8003714:	5c5b      	ldrb	r3, [r3, r1]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800371a:	4413      	add	r3, r2
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	211e      	movs	r1, #30
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fe8f 	bl	8003446 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8003728:	2204      	movs	r2, #4
 800372a:	2126      	movs	r1, #38	@ 0x26
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fe8a 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8003732:	2208      	movs	r2, #8
 8003734:	211f      	movs	r1, #31
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fe85 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800373c:	2200      	movs	r2, #0
 800373e:	2120      	movs	r1, #32
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fe80 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8003746:	2208      	movs	r2, #8
 8003748:	2121      	movs	r1, #33	@ 0x21
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fe7b 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8003750:	2201      	movs	r2, #1
 8003752:	2141      	movs	r1, #65	@ 0x41
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff fe76 	bl	8003446 <SX1278_SPIWrite>
	module->readBytes = 0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f810 	bl	8003788 <SX1278_standby>
}
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	01e84800 	.word	0x01e84800
 8003774:	08006650 	.word	0x08006650
 8003778:	08006654 	.word	0x08006654
 800377c:	0800665c 	.word	0x0800665c
 8003780:	08006668 	.word	0x08006668
 8003784:	0800666c 	.word	0x0800666c

08003788 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8003790:	2209      	movs	r2, #9
 8003792:	2101      	movs	r1, #1
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fe56 	bl	8003446 <SX1278_SPIWrite>
	module->status = STANDBY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	759a      	strb	r2, [r3, #22]
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80037b0:	2208      	movs	r2, #8
 80037b2:	2101      	movs	r1, #1
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fe46 	bl	8003446 <SX1278_SPIWrite>
	module->status = SLEEP;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	759a      	strb	r2, [r3, #22]
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80037d0:	2288      	movs	r2, #136	@ 0x88
 80037d2:	2101      	movs	r1, #1
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fe36 	bl	8003446 <SX1278_SPIWrite>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80037ea:	22ff      	movs	r2, #255	@ 0xff
 80037ec:	2112      	movs	r1, #18
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fe29 	bl	8003446 <SX1278_SPIWrite>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	460b      	mov	r3, r1
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	7afa      	ldrb	r2, [r7, #11]
 800380e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff feb5 	bl	8003580 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8003816:	2284      	movs	r2, #132	@ 0x84
 8003818:	214d      	movs	r1, #77	@ 0x4d
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff fe13 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8003820:	22ff      	movs	r2, #255	@ 0xff
 8003822:	2124      	movs	r1, #36	@ 0x24
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff fe0e 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800382a:	2201      	movs	r2, #1
 800382c:	2140      	movs	r1, #64	@ 0x40
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff fe09 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8003834:	223f      	movs	r2, #63	@ 0x3f
 8003836:	2111      	movs	r1, #17
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fe04 	bl	8003446 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ffcf 	bl	80037e2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8003844:	7afb      	ldrb	r3, [r7, #11]
 8003846:	461a      	mov	r2, r3
 8003848:	2122      	movs	r1, #34	@ 0x22
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff fdfb 	bl	8003446 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8003850:	210f      	movs	r1, #15
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff fdd8 	bl	8003408 <SX1278_SPIRead>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	461a      	mov	r2, r3
 8003860:	210d      	movs	r1, #13
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fdef 	bl	8003446 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8003868:	228d      	movs	r2, #141	@ 0x8d
 800386a:	2101      	movs	r1, #1
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fdea 	bl	8003446 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800387a:	2118      	movs	r1, #24
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fdc3 	bl	8003408 <SX1278_SPIRead>
 8003882:	4603      	mov	r3, r0
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d104      	bne.n	8003896 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	759a      	strb	r2, [r3, #22]
			return 1;
 8003892:	2301      	movs	r3, #1
 8003894:	e013      	b.n	80038be <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3b01      	subs	r3, #1
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f8d0 	bl	8003a4c <SX1278_hw_Reset>
			SX1278_config(module);
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f7ff fe67 	bl	8003580 <SX1278_config>
			return 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e003      	b.n	80038be <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80038b6:	2001      	movs	r0, #1
 80038b8:	f000 f932 	bl	8003b20 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80038bc:	e7dd      	b.n	800387a <SX1278_LoRaEntryRx+0x7e>
	}
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f92f 	bl	8003b36 <SX1278_hw_GetDIO0>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d030      	beq.n	8003940 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3317      	adds	r3, #23
 80038e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 ffa1 	bl	8004830 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80038ee:	2110      	movs	r1, #16
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fd89 	bl	8003408 <SX1278_SPIRead>
 80038f6:	4603      	mov	r3, r0
 80038f8:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80038fa:	7bbb      	ldrb	r3, [r7, #14]
 80038fc:	461a      	mov	r2, r3
 80038fe:	210d      	movs	r1, #13
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fda0 	bl	8003446 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7c5b      	ldrb	r3, [r3, #17]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7d5b      	ldrb	r3, [r3, #21]
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e005      	b.n	8003922 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8003916:	2113      	movs	r1, #19
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fd75 	bl	8003408 <SX1278_SPIRead>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f103 0217 	add.w	r2, r3, #23
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2100      	movs	r1, #0
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fdb3 	bl	8003498 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ff51 	bl	80037e2 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f848 	bl	80039f4 <SX1278_hw_init>
	module->frequency = frequency;
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800396a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	7e3a      	ldrb	r2, [r7, #24]
 8003972:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	7f3a      	ldrb	r2, [r7, #28]
 8003978:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003980:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003988:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003990:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003998:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff fdf0 	bl	8003580 <SX1278_config>
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 80039bc:	79fa      	ldrb	r2, [r7, #7]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d003      	beq.n	80039ca <SX1278_read+0x22>
		length = module->readBytes;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 80039c8:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3317      	adds	r3, #23
 80039ce:	79fa      	ldrb	r2, [r7, #7]
 80039d0:	4619      	mov	r1, r3
 80039d2:	68b8      	ldr	r0, [r7, #8]
 80039d4:	f000 ffb9 	bl	800494a <memcpy>
	rxBuf[length] = '\0';
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4413      	add	r3, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 80039ea:	79fb      	ldrb	r3, [r7, #7]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <SX1278_hw_init>:
 */

#include "sx1278_hw.hpp"
#include <string.h>

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80039fc:	2101      	movs	r1, #1
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f80d 	bl	8003a1e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6858      	ldr	r0, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fe f930 	bl	8001c76 <HAL_GPIO_WritePin>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6958      	ldr	r0, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b299      	uxth	r1, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7fe f919 	bl	8001c76 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003a54:	2101      	movs	r1, #1
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffe1 	bl	8003a1e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6858      	ldr	r0, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fe f904 	bl	8001c76 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f000 f856 	bl	8003b20 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6858      	ldr	r0, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7fe f8f8 	bl	8001c76 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8003a86:	2064      	movs	r0, #100	@ 0x64
 8003a88:	f000 f84a 	bl	8003b20 <SX1278_hw_DelayMs>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ffbb 	bl	8003a1e <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6998      	ldr	r0, [r3, #24]
 8003aac:	1cf9      	adds	r1, r7, #3
 8003aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f7fe fed0 	bl	8002858 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003ab8:	bf00      	nop
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff f9b7 	bl	8002e32 <HAL_SPI_GetState>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d1f7      	bne.n	8003aba <SX1278_hw_SPICommand+0x26>
		;
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff99 	bl	8003a1e <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6998      	ldr	r0, [r3, #24]
 8003af0:	f107 020e 	add.w	r2, r7, #14
 8003af4:	f107 010f 	add.w	r1, r7, #15
 8003af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2301      	movs	r3, #1
 8003b00:	f7fe ffee 	bl	8002ae0 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003b04:	bf00      	nop
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f991 	bl	8002e32 <HAL_SPI_GetState>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d1f7      	bne.n	8003b06 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8003b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fd fe01 	bl	8001730 <HAL_Delay>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fe f87c 	bl	8001c48 <HAL_GPIO_ReadPin>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <__cvt>:
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	bfbb      	ittet	lt
 8003b6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003b72:	461d      	movlt	r5, r3
 8003b74:	2300      	movge	r3, #0
 8003b76:	232d      	movlt	r3, #45	@ 0x2d
 8003b78:	b088      	sub	sp, #32
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	bfb8      	it	lt
 8003b7e:	4614      	movlt	r4, r2
 8003b80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003b82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003b84:	7013      	strb	r3, [r2, #0]
 8003b86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003b8c:	f023 0820 	bic.w	r8, r3, #32
 8003b90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b94:	d005      	beq.n	8003ba2 <__cvt+0x3e>
 8003b96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b9a:	d100      	bne.n	8003b9e <__cvt+0x3a>
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e000      	b.n	8003ba4 <__cvt+0x40>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	aa07      	add	r2, sp, #28
 8003ba6:	9204      	str	r2, [sp, #16]
 8003ba8:	aa06      	add	r2, sp, #24
 8003baa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003bae:	e9cd 3600 	strd	r3, r6, [sp]
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	462b      	mov	r3, r5
 8003bb6:	f000 ff5f 	bl	8004a78 <_dtoa_r>
 8003bba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003bbe:	4607      	mov	r7, r0
 8003bc0:	d119      	bne.n	8003bf6 <__cvt+0x92>
 8003bc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003bc4:	07db      	lsls	r3, r3, #31
 8003bc6:	d50e      	bpl.n	8003be6 <__cvt+0x82>
 8003bc8:	eb00 0906 	add.w	r9, r0, r6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	f7fc fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8003bd8:	b108      	cbz	r0, 8003bde <__cvt+0x7a>
 8003bda:	f8cd 901c 	str.w	r9, [sp, #28]
 8003bde:	2230      	movs	r2, #48	@ 0x30
 8003be0:	9b07      	ldr	r3, [sp, #28]
 8003be2:	454b      	cmp	r3, r9
 8003be4:	d31e      	bcc.n	8003c24 <__cvt+0xc0>
 8003be6:	4638      	mov	r0, r7
 8003be8:	9b07      	ldr	r3, [sp, #28]
 8003bea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003bec:	1bdb      	subs	r3, r3, r7
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	b008      	add	sp, #32
 8003bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003bfa:	eb00 0906 	add.w	r9, r0, r6
 8003bfe:	d1e5      	bne.n	8003bcc <__cvt+0x68>
 8003c00:	7803      	ldrb	r3, [r0, #0]
 8003c02:	2b30      	cmp	r3, #48	@ 0x30
 8003c04:	d10a      	bne.n	8003c1c <__cvt+0xb8>
 8003c06:	2200      	movs	r2, #0
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fc fecb 	bl	80009a8 <__aeabi_dcmpeq>
 8003c12:	b918      	cbnz	r0, 8003c1c <__cvt+0xb8>
 8003c14:	f1c6 0601 	rsb	r6, r6, #1
 8003c18:	f8ca 6000 	str.w	r6, [sl]
 8003c1c:	f8da 3000 	ldr.w	r3, [sl]
 8003c20:	4499      	add	r9, r3
 8003c22:	e7d3      	b.n	8003bcc <__cvt+0x68>
 8003c24:	1c59      	adds	r1, r3, #1
 8003c26:	9107      	str	r1, [sp, #28]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e7d9      	b.n	8003be0 <__cvt+0x7c>

08003c2c <__exponent>:
 8003c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c2e:	2900      	cmp	r1, #0
 8003c30:	bfb6      	itet	lt
 8003c32:	232d      	movlt	r3, #45	@ 0x2d
 8003c34:	232b      	movge	r3, #43	@ 0x2b
 8003c36:	4249      	neglt	r1, r1
 8003c38:	2909      	cmp	r1, #9
 8003c3a:	7002      	strb	r2, [r0, #0]
 8003c3c:	7043      	strb	r3, [r0, #1]
 8003c3e:	dd29      	ble.n	8003c94 <__exponent+0x68>
 8003c40:	f10d 0307 	add.w	r3, sp, #7
 8003c44:	461d      	mov	r5, r3
 8003c46:	270a      	movs	r7, #10
 8003c48:	fbb1 f6f7 	udiv	r6, r1, r7
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	fb07 1416 	mls	r4, r7, r6, r1
 8003c52:	3430      	adds	r4, #48	@ 0x30
 8003c54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003c58:	460c      	mov	r4, r1
 8003c5a:	2c63      	cmp	r4, #99	@ 0x63
 8003c5c:	4631      	mov	r1, r6
 8003c5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c62:	dcf1      	bgt.n	8003c48 <__exponent+0x1c>
 8003c64:	3130      	adds	r1, #48	@ 0x30
 8003c66:	1e94      	subs	r4, r2, #2
 8003c68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	1c41      	adds	r1, r0, #1
 8003c70:	42ab      	cmp	r3, r5
 8003c72:	d30a      	bcc.n	8003c8a <__exponent+0x5e>
 8003c74:	f10d 0309 	add.w	r3, sp, #9
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	42ac      	cmp	r4, r5
 8003c7c:	bf88      	it	hi
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	3302      	adds	r3, #2
 8003c82:	4403      	add	r3, r0
 8003c84:	1a18      	subs	r0, r3, r0
 8003c86:	b003      	add	sp, #12
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003c8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c92:	e7ed      	b.n	8003c70 <__exponent+0x44>
 8003c94:	2330      	movs	r3, #48	@ 0x30
 8003c96:	3130      	adds	r1, #48	@ 0x30
 8003c98:	7083      	strb	r3, [r0, #2]
 8003c9a:	70c1      	strb	r1, [r0, #3]
 8003c9c:	1d03      	adds	r3, r0, #4
 8003c9e:	e7f1      	b.n	8003c84 <__exponent+0x58>

08003ca0 <_printf_float>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	b091      	sub	sp, #68	@ 0x44
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003cac:	4616      	mov	r6, r2
 8003cae:	461f      	mov	r7, r3
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	f000 fdc5 	bl	8004840 <_localeconv_r>
 8003cb6:	6803      	ldr	r3, [r0, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	9308      	str	r3, [sp, #32]
 8003cbc:	f7fc fa48 	bl	8000150 <strlen>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8003cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8003cca:	3307      	adds	r3, #7
 8003ccc:	f023 0307 	bic.w	r3, r3, #7
 8003cd0:	f103 0208 	add.w	r2, r3, #8
 8003cd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cd8:	f8d4 b000 	ldr.w	fp, [r4]
 8003cdc:	f8c8 2000 	str.w	r2, [r8]
 8003ce0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ce4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003cee:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003cf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8003f6c <_printf_float+0x2cc>)
 8003cfc:	f7fc fe86 	bl	8000a0c <__aeabi_dcmpun>
 8003d00:	bb70      	cbnz	r0, 8003d60 <_printf_float+0xc0>
 8003d02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	4b98      	ldr	r3, [pc, #608]	@ (8003f6c <_printf_float+0x2cc>)
 8003d0c:	f7fc fe60 	bl	80009d0 <__aeabi_dcmple>
 8003d10:	bb30      	cbnz	r0, 8003d60 <_printf_float+0xc0>
 8003d12:	2200      	movs	r2, #0
 8003d14:	2300      	movs	r3, #0
 8003d16:	4640      	mov	r0, r8
 8003d18:	4649      	mov	r1, r9
 8003d1a:	f7fc fe4f 	bl	80009bc <__aeabi_dcmplt>
 8003d1e:	b110      	cbz	r0, 8003d26 <_printf_float+0x86>
 8003d20:	232d      	movs	r3, #45	@ 0x2d
 8003d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d26:	4a92      	ldr	r2, [pc, #584]	@ (8003f70 <_printf_float+0x2d0>)
 8003d28:	4b92      	ldr	r3, [pc, #584]	@ (8003f74 <_printf_float+0x2d4>)
 8003d2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003d2e:	bf94      	ite	ls
 8003d30:	4690      	movls	r8, r2
 8003d32:	4698      	movhi	r8, r3
 8003d34:	2303      	movs	r3, #3
 8003d36:	f04f 0900 	mov.w	r9, #0
 8003d3a:	6123      	str	r3, [r4, #16]
 8003d3c:	f02b 0304 	bic.w	r3, fp, #4
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	4633      	mov	r3, r6
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	9700      	str	r7, [sp, #0]
 8003d4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003d4c:	f000 f9d4 	bl	80040f8 <_printf_common>
 8003d50:	3001      	adds	r0, #1
 8003d52:	f040 8090 	bne.w	8003e76 <_printf_float+0x1d6>
 8003d56:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5a:	b011      	add	sp, #68	@ 0x44
 8003d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	4640      	mov	r0, r8
 8003d66:	4649      	mov	r1, r9
 8003d68:	f7fc fe50 	bl	8000a0c <__aeabi_dcmpun>
 8003d6c:	b148      	cbz	r0, 8003d82 <_printf_float+0xe2>
 8003d6e:	464b      	mov	r3, r9
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bfb8      	it	lt
 8003d74:	232d      	movlt	r3, #45	@ 0x2d
 8003d76:	4a80      	ldr	r2, [pc, #512]	@ (8003f78 <_printf_float+0x2d8>)
 8003d78:	bfb8      	it	lt
 8003d7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f7c <_printf_float+0x2dc>)
 8003d80:	e7d3      	b.n	8003d2a <_printf_float+0x8a>
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	d13f      	bne.n	8003e0c <_printf_float+0x16c>
 8003d8c:	2306      	movs	r3, #6
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	9206      	str	r2, [sp, #24]
 8003d9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003da0:	aa0d      	add	r2, sp, #52	@ 0x34
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003da8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	4642      	mov	r2, r8
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4628      	mov	r0, r5
 8003db4:	464b      	mov	r3, r9
 8003db6:	910a      	str	r1, [sp, #40]	@ 0x28
 8003db8:	f7ff fed4 	bl	8003b64 <__cvt>
 8003dbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	2947      	cmp	r1, #71	@ 0x47
 8003dc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003dc4:	d128      	bne.n	8003e18 <_printf_float+0x178>
 8003dc6:	1cc8      	adds	r0, r1, #3
 8003dc8:	db02      	blt.n	8003dd0 <_printf_float+0x130>
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	4299      	cmp	r1, r3
 8003dce:	dd40      	ble.n	8003e52 <_printf_float+0x1b2>
 8003dd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dd4:	fa5f fa8a 	uxtb.w	sl, sl
 8003dd8:	4652      	mov	r2, sl
 8003dda:	3901      	subs	r1, #1
 8003ddc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003de0:	910d      	str	r1, [sp, #52]	@ 0x34
 8003de2:	f7ff ff23 	bl	8003c2c <__exponent>
 8003de6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003de8:	4681      	mov	r9, r0
 8003dea:	1813      	adds	r3, r2, r0
 8003dec:	2a01      	cmp	r2, #1
 8003dee:	6123      	str	r3, [r4, #16]
 8003df0:	dc02      	bgt.n	8003df8 <_printf_float+0x158>
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	07d2      	lsls	r2, r2, #31
 8003df6:	d501      	bpl.n	8003dfc <_printf_float+0x15c>
 8003df8:	3301      	adds	r3, #1
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d09e      	beq.n	8003d42 <_printf_float+0xa2>
 8003e04:	232d      	movs	r3, #45	@ 0x2d
 8003e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e0a:	e79a      	b.n	8003d42 <_printf_float+0xa2>
 8003e0c:	2947      	cmp	r1, #71	@ 0x47
 8003e0e:	d1bf      	bne.n	8003d90 <_printf_float+0xf0>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1bd      	bne.n	8003d90 <_printf_float+0xf0>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e7ba      	b.n	8003d8e <_printf_float+0xee>
 8003e18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e1c:	d9dc      	bls.n	8003dd8 <_printf_float+0x138>
 8003e1e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003e22:	d118      	bne.n	8003e56 <_printf_float+0x1b6>
 8003e24:	2900      	cmp	r1, #0
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	dd0b      	ble.n	8003e42 <_printf_float+0x1a2>
 8003e2a:	6121      	str	r1, [r4, #16]
 8003e2c:	b913      	cbnz	r3, 8003e34 <_printf_float+0x194>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	07d0      	lsls	r0, r2, #31
 8003e32:	d502      	bpl.n	8003e3a <_printf_float+0x19a>
 8003e34:	3301      	adds	r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	f04f 0900 	mov.w	r9, #0
 8003e3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003e40:	e7dc      	b.n	8003dfc <_printf_float+0x15c>
 8003e42:	b913      	cbnz	r3, 8003e4a <_printf_float+0x1aa>
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	07d2      	lsls	r2, r2, #31
 8003e48:	d501      	bpl.n	8003e4e <_printf_float+0x1ae>
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	e7f4      	b.n	8003e38 <_printf_float+0x198>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e7f2      	b.n	8003e38 <_printf_float+0x198>
 8003e52:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	db05      	blt.n	8003e68 <_printf_float+0x1c8>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	6121      	str	r1, [r4, #16]
 8003e60:	07d8      	lsls	r0, r3, #31
 8003e62:	d5ea      	bpl.n	8003e3a <_printf_float+0x19a>
 8003e64:	1c4b      	adds	r3, r1, #1
 8003e66:	e7e7      	b.n	8003e38 <_printf_float+0x198>
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	bfcc      	ite	gt
 8003e6c:	2201      	movgt	r2, #1
 8003e6e:	f1c1 0202 	rsble	r2, r1, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	e7e0      	b.n	8003e38 <_printf_float+0x198>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	055a      	lsls	r2, r3, #21
 8003e7a:	d407      	bmi.n	8003e8c <_printf_float+0x1ec>
 8003e7c:	6923      	ldr	r3, [r4, #16]
 8003e7e:	4642      	mov	r2, r8
 8003e80:	4631      	mov	r1, r6
 8003e82:	4628      	mov	r0, r5
 8003e84:	47b8      	blx	r7
 8003e86:	3001      	adds	r0, #1
 8003e88:	d12b      	bne.n	8003ee2 <_printf_float+0x242>
 8003e8a:	e764      	b.n	8003d56 <_printf_float+0xb6>
 8003e8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003e90:	f240 80dc 	bls.w	800404c <_printf_float+0x3ac>
 8003e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f7fc fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d033      	beq.n	8003f0c <_printf_float+0x26c>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	4a35      	ldr	r2, [pc, #212]	@ (8003f80 <_printf_float+0x2e0>)
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f43f af51 	beq.w	8003d56 <_printf_float+0xb6>
 8003eb4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003eb8:	4543      	cmp	r3, r8
 8003eba:	db02      	blt.n	8003ec2 <_printf_float+0x222>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07d8      	lsls	r0, r3, #31
 8003ec0:	d50f      	bpl.n	8003ee2 <_printf_float+0x242>
 8003ec2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f af42 	beq.w	8003d56 <_printf_float+0xb6>
 8003ed2:	f04f 0900 	mov.w	r9, #0
 8003ed6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003eda:	f104 0a1a 	add.w	sl, r4, #26
 8003ede:	45c8      	cmp	r8, r9
 8003ee0:	dc09      	bgt.n	8003ef6 <_printf_float+0x256>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	079b      	lsls	r3, r3, #30
 8003ee6:	f100 8102 	bmi.w	80040ee <_printf_float+0x44e>
 8003eea:	68e0      	ldr	r0, [r4, #12]
 8003eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003eee:	4298      	cmp	r0, r3
 8003ef0:	bfb8      	it	lt
 8003ef2:	4618      	movlt	r0, r3
 8003ef4:	e731      	b.n	8003d5a <_printf_float+0xba>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4652      	mov	r2, sl
 8003efa:	4631      	mov	r1, r6
 8003efc:	4628      	mov	r0, r5
 8003efe:	47b8      	blx	r7
 8003f00:	3001      	adds	r0, #1
 8003f02:	f43f af28 	beq.w	8003d56 <_printf_float+0xb6>
 8003f06:	f109 0901 	add.w	r9, r9, #1
 8003f0a:	e7e8      	b.n	8003ede <_printf_float+0x23e>
 8003f0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dc38      	bgt.n	8003f84 <_printf_float+0x2e4>
 8003f12:	2301      	movs	r3, #1
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	4a19      	ldr	r2, [pc, #100]	@ (8003f80 <_printf_float+0x2e0>)
 8003f1a:	47b8      	blx	r7
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	f43f af1a 	beq.w	8003d56 <_printf_float+0xb6>
 8003f22:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003f26:	ea59 0303 	orrs.w	r3, r9, r3
 8003f2a:	d102      	bne.n	8003f32 <_printf_float+0x292>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	07d9      	lsls	r1, r3, #31
 8003f30:	d5d7      	bpl.n	8003ee2 <_printf_float+0x242>
 8003f32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f af0a 	beq.w	8003d56 <_printf_float+0xb6>
 8003f42:	f04f 0a00 	mov.w	sl, #0
 8003f46:	f104 0b1a 	add.w	fp, r4, #26
 8003f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f4c:	425b      	negs	r3, r3
 8003f4e:	4553      	cmp	r3, sl
 8003f50:	dc01      	bgt.n	8003f56 <_printf_float+0x2b6>
 8003f52:	464b      	mov	r3, r9
 8003f54:	e793      	b.n	8003e7e <_printf_float+0x1de>
 8003f56:	2301      	movs	r3, #1
 8003f58:	465a      	mov	r2, fp
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	f43f aef8 	beq.w	8003d56 <_printf_float+0xb6>
 8003f66:	f10a 0a01 	add.w	sl, sl, #1
 8003f6a:	e7ee      	b.n	8003f4a <_printf_float+0x2aa>
 8003f6c:	7fefffff 	.word	0x7fefffff
 8003f70:	0800666e 	.word	0x0800666e
 8003f74:	08006672 	.word	0x08006672
 8003f78:	08006676 	.word	0x08006676
 8003f7c:	0800667a 	.word	0x0800667a
 8003f80:	0800667e 	.word	0x0800667e
 8003f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f86:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f8a:	4553      	cmp	r3, sl
 8003f8c:	bfa8      	it	ge
 8003f8e:	4653      	movge	r3, sl
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	4699      	mov	r9, r3
 8003f94:	dc36      	bgt.n	8004004 <_printf_float+0x364>
 8003f96:	f04f 0b00 	mov.w	fp, #0
 8003f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f9e:	f104 021a 	add.w	r2, r4, #26
 8003fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003fa6:	eba3 0309 	sub.w	r3, r3, r9
 8003faa:	455b      	cmp	r3, fp
 8003fac:	dc31      	bgt.n	8004012 <_printf_float+0x372>
 8003fae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fb0:	459a      	cmp	sl, r3
 8003fb2:	dc3a      	bgt.n	800402a <_printf_float+0x38a>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	07da      	lsls	r2, r3, #31
 8003fb8:	d437      	bmi.n	800402a <_printf_float+0x38a>
 8003fba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fbc:	ebaa 0903 	sub.w	r9, sl, r3
 8003fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fc2:	ebaa 0303 	sub.w	r3, sl, r3
 8003fc6:	4599      	cmp	r9, r3
 8003fc8:	bfa8      	it	ge
 8003fca:	4699      	movge	r9, r3
 8003fcc:	f1b9 0f00 	cmp.w	r9, #0
 8003fd0:	dc33      	bgt.n	800403a <_printf_float+0x39a>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fda:	f104 0b1a 	add.w	fp, r4, #26
 8003fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8003fe4:	eba3 0309 	sub.w	r3, r3, r9
 8003fe8:	4543      	cmp	r3, r8
 8003fea:	f77f af7a 	ble.w	8003ee2 <_printf_float+0x242>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	465a      	mov	r2, fp
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f43f aeac 	beq.w	8003d56 <_printf_float+0xb6>
 8003ffe:	f108 0801 	add.w	r8, r8, #1
 8004002:	e7ec      	b.n	8003fde <_printf_float+0x33e>
 8004004:	4642      	mov	r2, r8
 8004006:	4631      	mov	r1, r6
 8004008:	4628      	mov	r0, r5
 800400a:	47b8      	blx	r7
 800400c:	3001      	adds	r0, #1
 800400e:	d1c2      	bne.n	8003f96 <_printf_float+0x2f6>
 8004010:	e6a1      	b.n	8003d56 <_printf_float+0xb6>
 8004012:	2301      	movs	r3, #1
 8004014:	4631      	mov	r1, r6
 8004016:	4628      	mov	r0, r5
 8004018:	920a      	str	r2, [sp, #40]	@ 0x28
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae9a 	beq.w	8003d56 <_printf_float+0xb6>
 8004022:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004024:	f10b 0b01 	add.w	fp, fp, #1
 8004028:	e7bb      	b.n	8003fa2 <_printf_float+0x302>
 800402a:	4631      	mov	r1, r6
 800402c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	d1c0      	bne.n	8003fba <_printf_float+0x31a>
 8004038:	e68d      	b.n	8003d56 <_printf_float+0xb6>
 800403a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800403c:	464b      	mov	r3, r9
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	4442      	add	r2, r8
 8004044:	47b8      	blx	r7
 8004046:	3001      	adds	r0, #1
 8004048:	d1c3      	bne.n	8003fd2 <_printf_float+0x332>
 800404a:	e684      	b.n	8003d56 <_printf_float+0xb6>
 800404c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004050:	f1ba 0f01 	cmp.w	sl, #1
 8004054:	dc01      	bgt.n	800405a <_printf_float+0x3ba>
 8004056:	07db      	lsls	r3, r3, #31
 8004058:	d536      	bpl.n	80040c8 <_printf_float+0x428>
 800405a:	2301      	movs	r3, #1
 800405c:	4642      	mov	r2, r8
 800405e:	4631      	mov	r1, r6
 8004060:	4628      	mov	r0, r5
 8004062:	47b8      	blx	r7
 8004064:	3001      	adds	r0, #1
 8004066:	f43f ae76 	beq.w	8003d56 <_printf_float+0xb6>
 800406a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800406e:	4631      	mov	r1, r6
 8004070:	4628      	mov	r0, r5
 8004072:	47b8      	blx	r7
 8004074:	3001      	adds	r0, #1
 8004076:	f43f ae6e 	beq.w	8003d56 <_printf_float+0xb6>
 800407a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800407e:	2200      	movs	r2, #0
 8004080:	2300      	movs	r3, #0
 8004082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004086:	f7fc fc8f 	bl	80009a8 <__aeabi_dcmpeq>
 800408a:	b9c0      	cbnz	r0, 80040be <_printf_float+0x41e>
 800408c:	4653      	mov	r3, sl
 800408e:	f108 0201 	add.w	r2, r8, #1
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	d10c      	bne.n	80040b6 <_printf_float+0x416>
 800409c:	e65b      	b.n	8003d56 <_printf_float+0xb6>
 800409e:	2301      	movs	r3, #1
 80040a0:	465a      	mov	r2, fp
 80040a2:	4631      	mov	r1, r6
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b8      	blx	r7
 80040a8:	3001      	adds	r0, #1
 80040aa:	f43f ae54 	beq.w	8003d56 <_printf_float+0xb6>
 80040ae:	f108 0801 	add.w	r8, r8, #1
 80040b2:	45d0      	cmp	r8, sl
 80040b4:	dbf3      	blt.n	800409e <_printf_float+0x3fe>
 80040b6:	464b      	mov	r3, r9
 80040b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80040bc:	e6e0      	b.n	8003e80 <_printf_float+0x1e0>
 80040be:	f04f 0800 	mov.w	r8, #0
 80040c2:	f104 0b1a 	add.w	fp, r4, #26
 80040c6:	e7f4      	b.n	80040b2 <_printf_float+0x412>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4642      	mov	r2, r8
 80040cc:	e7e1      	b.n	8004092 <_printf_float+0x3f2>
 80040ce:	2301      	movs	r3, #1
 80040d0:	464a      	mov	r2, r9
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f ae3c 	beq.w	8003d56 <_printf_float+0xb6>
 80040de:	f108 0801 	add.w	r8, r8, #1
 80040e2:	68e3      	ldr	r3, [r4, #12]
 80040e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80040e6:	1a5b      	subs	r3, r3, r1
 80040e8:	4543      	cmp	r3, r8
 80040ea:	dcf0      	bgt.n	80040ce <_printf_float+0x42e>
 80040ec:	e6fd      	b.n	8003eea <_printf_float+0x24a>
 80040ee:	f04f 0800 	mov.w	r8, #0
 80040f2:	f104 0919 	add.w	r9, r4, #25
 80040f6:	e7f4      	b.n	80040e2 <_printf_float+0x442>

080040f8 <_printf_common>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	4616      	mov	r6, r2
 80040fe:	4698      	mov	r8, r3
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	4607      	mov	r7, r0
 8004106:	4293      	cmp	r3, r2
 8004108:	bfb8      	it	lt
 800410a:	4613      	movlt	r3, r2
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004112:	460c      	mov	r4, r1
 8004114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004118:	b10a      	cbz	r2, 800411e <_printf_common+0x26>
 800411a:	3301      	adds	r3, #1
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	0699      	lsls	r1, r3, #26
 8004122:	bf42      	ittt	mi
 8004124:	6833      	ldrmi	r3, [r6, #0]
 8004126:	3302      	addmi	r3, #2
 8004128:	6033      	strmi	r3, [r6, #0]
 800412a:	6825      	ldr	r5, [r4, #0]
 800412c:	f015 0506 	ands.w	r5, r5, #6
 8004130:	d106      	bne.n	8004140 <_printf_common+0x48>
 8004132:	f104 0a19 	add.w	sl, r4, #25
 8004136:	68e3      	ldr	r3, [r4, #12]
 8004138:	6832      	ldr	r2, [r6, #0]
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	42ab      	cmp	r3, r5
 800413e:	dc2b      	bgt.n	8004198 <_printf_common+0xa0>
 8004140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	3b00      	subs	r3, #0
 8004148:	bf18      	it	ne
 800414a:	2301      	movne	r3, #1
 800414c:	0692      	lsls	r2, r2, #26
 800414e:	d430      	bmi.n	80041b2 <_printf_common+0xba>
 8004150:	4641      	mov	r1, r8
 8004152:	4638      	mov	r0, r7
 8004154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004158:	47c8      	blx	r9
 800415a:	3001      	adds	r0, #1
 800415c:	d023      	beq.n	80041a6 <_printf_common+0xae>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	2b04      	cmp	r3, #4
 8004168:	bf14      	ite	ne
 800416a:	2500      	movne	r5, #0
 800416c:	6833      	ldreq	r3, [r6, #0]
 800416e:	f04f 0600 	mov.w	r6, #0
 8004172:	bf08      	it	eq
 8004174:	68e5      	ldreq	r5, [r4, #12]
 8004176:	f104 041a 	add.w	r4, r4, #26
 800417a:	bf08      	it	eq
 800417c:	1aed      	subeq	r5, r5, r3
 800417e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004182:	bf08      	it	eq
 8004184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004188:	4293      	cmp	r3, r2
 800418a:	bfc4      	itt	gt
 800418c:	1a9b      	subgt	r3, r3, r2
 800418e:	18ed      	addgt	r5, r5, r3
 8004190:	42b5      	cmp	r5, r6
 8004192:	d11a      	bne.n	80041ca <_printf_common+0xd2>
 8004194:	2000      	movs	r0, #0
 8004196:	e008      	b.n	80041aa <_printf_common+0xb2>
 8004198:	2301      	movs	r3, #1
 800419a:	4652      	mov	r2, sl
 800419c:	4641      	mov	r1, r8
 800419e:	4638      	mov	r0, r7
 80041a0:	47c8      	blx	r9
 80041a2:	3001      	adds	r0, #1
 80041a4:	d103      	bne.n	80041ae <_printf_common+0xb6>
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295
 80041aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ae:	3501      	adds	r5, #1
 80041b0:	e7c1      	b.n	8004136 <_printf_common+0x3e>
 80041b2:	2030      	movs	r0, #48	@ 0x30
 80041b4:	18e1      	adds	r1, r4, r3
 80041b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041c0:	4422      	add	r2, r4
 80041c2:	3302      	adds	r3, #2
 80041c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041c8:	e7c2      	b.n	8004150 <_printf_common+0x58>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4622      	mov	r2, r4
 80041ce:	4641      	mov	r1, r8
 80041d0:	4638      	mov	r0, r7
 80041d2:	47c8      	blx	r9
 80041d4:	3001      	adds	r0, #1
 80041d6:	d0e6      	beq.n	80041a6 <_printf_common+0xae>
 80041d8:	3601      	adds	r6, #1
 80041da:	e7d9      	b.n	8004190 <_printf_common+0x98>

080041dc <_printf_i>:
 80041dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	7e0f      	ldrb	r7, [r1, #24]
 80041e2:	4691      	mov	r9, r2
 80041e4:	2f78      	cmp	r7, #120	@ 0x78
 80041e6:	4680      	mov	r8, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	469a      	mov	sl, r3
 80041ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041f2:	d807      	bhi.n	8004204 <_printf_i+0x28>
 80041f4:	2f62      	cmp	r7, #98	@ 0x62
 80041f6:	d80a      	bhi.n	800420e <_printf_i+0x32>
 80041f8:	2f00      	cmp	r7, #0
 80041fa:	f000 80d3 	beq.w	80043a4 <_printf_i+0x1c8>
 80041fe:	2f58      	cmp	r7, #88	@ 0x58
 8004200:	f000 80ba 	beq.w	8004378 <_printf_i+0x19c>
 8004204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004208:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800420c:	e03a      	b.n	8004284 <_printf_i+0xa8>
 800420e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004212:	2b15      	cmp	r3, #21
 8004214:	d8f6      	bhi.n	8004204 <_printf_i+0x28>
 8004216:	a101      	add	r1, pc, #4	@ (adr r1, 800421c <_printf_i+0x40>)
 8004218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800421c:	08004275 	.word	0x08004275
 8004220:	08004289 	.word	0x08004289
 8004224:	08004205 	.word	0x08004205
 8004228:	08004205 	.word	0x08004205
 800422c:	08004205 	.word	0x08004205
 8004230:	08004205 	.word	0x08004205
 8004234:	08004289 	.word	0x08004289
 8004238:	08004205 	.word	0x08004205
 800423c:	08004205 	.word	0x08004205
 8004240:	08004205 	.word	0x08004205
 8004244:	08004205 	.word	0x08004205
 8004248:	0800438b 	.word	0x0800438b
 800424c:	080042b3 	.word	0x080042b3
 8004250:	08004345 	.word	0x08004345
 8004254:	08004205 	.word	0x08004205
 8004258:	08004205 	.word	0x08004205
 800425c:	080043ad 	.word	0x080043ad
 8004260:	08004205 	.word	0x08004205
 8004264:	080042b3 	.word	0x080042b3
 8004268:	08004205 	.word	0x08004205
 800426c:	08004205 	.word	0x08004205
 8004270:	0800434d 	.word	0x0800434d
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6032      	str	r2, [r6, #0]
 800427c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004280:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004284:	2301      	movs	r3, #1
 8004286:	e09e      	b.n	80043c6 <_printf_i+0x1ea>
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1d19      	adds	r1, r3, #4
 800428e:	6031      	str	r1, [r6, #0]
 8004290:	0606      	lsls	r6, r0, #24
 8004292:	d501      	bpl.n	8004298 <_printf_i+0xbc>
 8004294:	681d      	ldr	r5, [r3, #0]
 8004296:	e003      	b.n	80042a0 <_printf_i+0xc4>
 8004298:	0645      	lsls	r5, r0, #25
 800429a:	d5fb      	bpl.n	8004294 <_printf_i+0xb8>
 800429c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	da03      	bge.n	80042ac <_printf_i+0xd0>
 80042a4:	232d      	movs	r3, #45	@ 0x2d
 80042a6:	426d      	negs	r5, r5
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ac:	230a      	movs	r3, #10
 80042ae:	4859      	ldr	r0, [pc, #356]	@ (8004414 <_printf_i+0x238>)
 80042b0:	e011      	b.n	80042d6 <_printf_i+0xfa>
 80042b2:	6821      	ldr	r1, [r4, #0]
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	0608      	lsls	r0, r1, #24
 80042b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80042bc:	d402      	bmi.n	80042c4 <_printf_i+0xe8>
 80042be:	0649      	lsls	r1, r1, #25
 80042c0:	bf48      	it	mi
 80042c2:	b2ad      	uxthmi	r5, r5
 80042c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042c6:	6033      	str	r3, [r6, #0]
 80042c8:	bf14      	ite	ne
 80042ca:	230a      	movne	r3, #10
 80042cc:	2308      	moveq	r3, #8
 80042ce:	4851      	ldr	r0, [pc, #324]	@ (8004414 <_printf_i+0x238>)
 80042d0:	2100      	movs	r1, #0
 80042d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042d6:	6866      	ldr	r6, [r4, #4]
 80042d8:	2e00      	cmp	r6, #0
 80042da:	bfa8      	it	ge
 80042dc:	6821      	ldrge	r1, [r4, #0]
 80042de:	60a6      	str	r6, [r4, #8]
 80042e0:	bfa4      	itt	ge
 80042e2:	f021 0104 	bicge.w	r1, r1, #4
 80042e6:	6021      	strge	r1, [r4, #0]
 80042e8:	b90d      	cbnz	r5, 80042ee <_printf_i+0x112>
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	d04b      	beq.n	8004386 <_printf_i+0x1aa>
 80042ee:	4616      	mov	r6, r2
 80042f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80042f4:	fb03 5711 	mls	r7, r3, r1, r5
 80042f8:	5dc7      	ldrb	r7, [r0, r7]
 80042fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042fe:	462f      	mov	r7, r5
 8004300:	42bb      	cmp	r3, r7
 8004302:	460d      	mov	r5, r1
 8004304:	d9f4      	bls.n	80042f0 <_printf_i+0x114>
 8004306:	2b08      	cmp	r3, #8
 8004308:	d10b      	bne.n	8004322 <_printf_i+0x146>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	07df      	lsls	r7, r3, #31
 800430e:	d508      	bpl.n	8004322 <_printf_i+0x146>
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	6861      	ldr	r1, [r4, #4]
 8004314:	4299      	cmp	r1, r3
 8004316:	bfde      	ittt	le
 8004318:	2330      	movle	r3, #48	@ 0x30
 800431a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800431e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004322:	1b92      	subs	r2, r2, r6
 8004324:	6122      	str	r2, [r4, #16]
 8004326:	464b      	mov	r3, r9
 8004328:	4621      	mov	r1, r4
 800432a:	4640      	mov	r0, r8
 800432c:	f8cd a000 	str.w	sl, [sp]
 8004330:	aa03      	add	r2, sp, #12
 8004332:	f7ff fee1 	bl	80040f8 <_printf_common>
 8004336:	3001      	adds	r0, #1
 8004338:	d14a      	bne.n	80043d0 <_printf_i+0x1f4>
 800433a:	f04f 30ff 	mov.w	r0, #4294967295
 800433e:	b004      	add	sp, #16
 8004340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	f043 0320 	orr.w	r3, r3, #32
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	2778      	movs	r7, #120	@ 0x78
 800434e:	4832      	ldr	r0, [pc, #200]	@ (8004418 <_printf_i+0x23c>)
 8004350:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	6831      	ldr	r1, [r6, #0]
 8004358:	061f      	lsls	r7, r3, #24
 800435a:	f851 5b04 	ldr.w	r5, [r1], #4
 800435e:	d402      	bmi.n	8004366 <_printf_i+0x18a>
 8004360:	065f      	lsls	r7, r3, #25
 8004362:	bf48      	it	mi
 8004364:	b2ad      	uxthmi	r5, r5
 8004366:	6031      	str	r1, [r6, #0]
 8004368:	07d9      	lsls	r1, r3, #31
 800436a:	bf44      	itt	mi
 800436c:	f043 0320 	orrmi.w	r3, r3, #32
 8004370:	6023      	strmi	r3, [r4, #0]
 8004372:	b11d      	cbz	r5, 800437c <_printf_i+0x1a0>
 8004374:	2310      	movs	r3, #16
 8004376:	e7ab      	b.n	80042d0 <_printf_i+0xf4>
 8004378:	4826      	ldr	r0, [pc, #152]	@ (8004414 <_printf_i+0x238>)
 800437a:	e7e9      	b.n	8004350 <_printf_i+0x174>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f023 0320 	bic.w	r3, r3, #32
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	e7f6      	b.n	8004374 <_printf_i+0x198>
 8004386:	4616      	mov	r6, r2
 8004388:	e7bd      	b.n	8004306 <_printf_i+0x12a>
 800438a:	6833      	ldr	r3, [r6, #0]
 800438c:	6825      	ldr	r5, [r4, #0]
 800438e:	1d18      	adds	r0, r3, #4
 8004390:	6961      	ldr	r1, [r4, #20]
 8004392:	6030      	str	r0, [r6, #0]
 8004394:	062e      	lsls	r6, r5, #24
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	d501      	bpl.n	800439e <_printf_i+0x1c2>
 800439a:	6019      	str	r1, [r3, #0]
 800439c:	e002      	b.n	80043a4 <_printf_i+0x1c8>
 800439e:	0668      	lsls	r0, r5, #25
 80043a0:	d5fb      	bpl.n	800439a <_printf_i+0x1be>
 80043a2:	8019      	strh	r1, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	4616      	mov	r6, r2
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	e7bc      	b.n	8004326 <_printf_i+0x14a>
 80043ac:	6833      	ldr	r3, [r6, #0]
 80043ae:	2100      	movs	r1, #0
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	6032      	str	r2, [r6, #0]
 80043b4:	681e      	ldr	r6, [r3, #0]
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	4630      	mov	r0, r6
 80043ba:	f000 fab8 	bl	800492e <memchr>
 80043be:	b108      	cbz	r0, 80043c4 <_printf_i+0x1e8>
 80043c0:	1b80      	subs	r0, r0, r6
 80043c2:	6060      	str	r0, [r4, #4]
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	2300      	movs	r3, #0
 80043ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ce:	e7aa      	b.n	8004326 <_printf_i+0x14a>
 80043d0:	4632      	mov	r2, r6
 80043d2:	4649      	mov	r1, r9
 80043d4:	4640      	mov	r0, r8
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	47d0      	blx	sl
 80043da:	3001      	adds	r0, #1
 80043dc:	d0ad      	beq.n	800433a <_printf_i+0x15e>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	079b      	lsls	r3, r3, #30
 80043e2:	d413      	bmi.n	800440c <_printf_i+0x230>
 80043e4:	68e0      	ldr	r0, [r4, #12]
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	4298      	cmp	r0, r3
 80043ea:	bfb8      	it	lt
 80043ec:	4618      	movlt	r0, r3
 80043ee:	e7a6      	b.n	800433e <_printf_i+0x162>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4632      	mov	r2, r6
 80043f4:	4649      	mov	r1, r9
 80043f6:	4640      	mov	r0, r8
 80043f8:	47d0      	blx	sl
 80043fa:	3001      	adds	r0, #1
 80043fc:	d09d      	beq.n	800433a <_printf_i+0x15e>
 80043fe:	3501      	adds	r5, #1
 8004400:	68e3      	ldr	r3, [r4, #12]
 8004402:	9903      	ldr	r1, [sp, #12]
 8004404:	1a5b      	subs	r3, r3, r1
 8004406:	42ab      	cmp	r3, r5
 8004408:	dcf2      	bgt.n	80043f0 <_printf_i+0x214>
 800440a:	e7eb      	b.n	80043e4 <_printf_i+0x208>
 800440c:	2500      	movs	r5, #0
 800440e:	f104 0619 	add.w	r6, r4, #25
 8004412:	e7f5      	b.n	8004400 <_printf_i+0x224>
 8004414:	08006680 	.word	0x08006680
 8004418:	08006691 	.word	0x08006691

0800441c <std>:
 800441c:	2300      	movs	r3, #0
 800441e:	b510      	push	{r4, lr}
 8004420:	4604      	mov	r4, r0
 8004422:	e9c0 3300 	strd	r3, r3, [r0]
 8004426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800442a:	6083      	str	r3, [r0, #8]
 800442c:	8181      	strh	r1, [r0, #12]
 800442e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004430:	81c2      	strh	r2, [r0, #14]
 8004432:	6183      	str	r3, [r0, #24]
 8004434:	4619      	mov	r1, r3
 8004436:	2208      	movs	r2, #8
 8004438:	305c      	adds	r0, #92	@ 0x5c
 800443a:	f000 f9f9 	bl	8004830 <memset>
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <std+0x58>)
 8004440:	6224      	str	r4, [r4, #32]
 8004442:	6263      	str	r3, [r4, #36]	@ 0x24
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <std+0x5c>)
 8004446:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004448:	4b0c      	ldr	r3, [pc, #48]	@ (800447c <std+0x60>)
 800444a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <std+0x64>)
 800444e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <std+0x68>)
 8004452:	429c      	cmp	r4, r3
 8004454:	d006      	beq.n	8004464 <std+0x48>
 8004456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800445a:	4294      	cmp	r4, r2
 800445c:	d002      	beq.n	8004464 <std+0x48>
 800445e:	33d0      	adds	r3, #208	@ 0xd0
 8004460:	429c      	cmp	r4, r3
 8004462:	d105      	bne.n	8004470 <std+0x54>
 8004464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800446c:	f000 ba5c 	b.w	8004928 <__retarget_lock_init_recursive>
 8004470:	bd10      	pop	{r4, pc}
 8004472:	bf00      	nop
 8004474:	08004681 	.word	0x08004681
 8004478:	080046a3 	.word	0x080046a3
 800447c:	080046db 	.word	0x080046db
 8004480:	080046ff 	.word	0x080046ff
 8004484:	200004f0 	.word	0x200004f0

08004488 <stdio_exit_handler>:
 8004488:	4a02      	ldr	r2, [pc, #8]	@ (8004494 <stdio_exit_handler+0xc>)
 800448a:	4903      	ldr	r1, [pc, #12]	@ (8004498 <stdio_exit_handler+0x10>)
 800448c:	4803      	ldr	r0, [pc, #12]	@ (800449c <stdio_exit_handler+0x14>)
 800448e:	f000 b869 	b.w	8004564 <_fwalk_sglue>
 8004492:	bf00      	nop
 8004494:	2000000c 	.word	0x2000000c
 8004498:	08006285 	.word	0x08006285
 800449c:	2000001c 	.word	0x2000001c

080044a0 <cleanup_stdio>:
 80044a0:	6841      	ldr	r1, [r0, #4]
 80044a2:	4b0c      	ldr	r3, [pc, #48]	@ (80044d4 <cleanup_stdio+0x34>)
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4299      	cmp	r1, r3
 80044a8:	4604      	mov	r4, r0
 80044aa:	d001      	beq.n	80044b0 <cleanup_stdio+0x10>
 80044ac:	f001 feea 	bl	8006284 <_fflush_r>
 80044b0:	68a1      	ldr	r1, [r4, #8]
 80044b2:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <cleanup_stdio+0x38>)
 80044b4:	4299      	cmp	r1, r3
 80044b6:	d002      	beq.n	80044be <cleanup_stdio+0x1e>
 80044b8:	4620      	mov	r0, r4
 80044ba:	f001 fee3 	bl	8006284 <_fflush_r>
 80044be:	68e1      	ldr	r1, [r4, #12]
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <cleanup_stdio+0x3c>)
 80044c2:	4299      	cmp	r1, r3
 80044c4:	d004      	beq.n	80044d0 <cleanup_stdio+0x30>
 80044c6:	4620      	mov	r0, r4
 80044c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044cc:	f001 beda 	b.w	8006284 <_fflush_r>
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	200004f0 	.word	0x200004f0
 80044d8:	20000558 	.word	0x20000558
 80044dc:	200005c0 	.word	0x200005c0

080044e0 <global_stdio_init.part.0>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <global_stdio_init.part.0+0x30>)
 80044e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004514 <global_stdio_init.part.0+0x34>)
 80044e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004518 <global_stdio_init.part.0+0x38>)
 80044e8:	4620      	mov	r0, r4
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	2104      	movs	r1, #4
 80044ee:	2200      	movs	r2, #0
 80044f0:	f7ff ff94 	bl	800441c <std>
 80044f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044f8:	2201      	movs	r2, #1
 80044fa:	2109      	movs	r1, #9
 80044fc:	f7ff ff8e 	bl	800441c <std>
 8004500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004504:	2202      	movs	r2, #2
 8004506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800450a:	2112      	movs	r1, #18
 800450c:	f7ff bf86 	b.w	800441c <std>
 8004510:	20000628 	.word	0x20000628
 8004514:	200004f0 	.word	0x200004f0
 8004518:	08004489 	.word	0x08004489

0800451c <__sfp_lock_acquire>:
 800451c:	4801      	ldr	r0, [pc, #4]	@ (8004524 <__sfp_lock_acquire+0x8>)
 800451e:	f000 ba04 	b.w	800492a <__retarget_lock_acquire_recursive>
 8004522:	bf00      	nop
 8004524:	20000631 	.word	0x20000631

08004528 <__sfp_lock_release>:
 8004528:	4801      	ldr	r0, [pc, #4]	@ (8004530 <__sfp_lock_release+0x8>)
 800452a:	f000 b9ff 	b.w	800492c <__retarget_lock_release_recursive>
 800452e:	bf00      	nop
 8004530:	20000631 	.word	0x20000631

08004534 <__sinit>:
 8004534:	b510      	push	{r4, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	f7ff fff0 	bl	800451c <__sfp_lock_acquire>
 800453c:	6a23      	ldr	r3, [r4, #32]
 800453e:	b11b      	cbz	r3, 8004548 <__sinit+0x14>
 8004540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004544:	f7ff bff0 	b.w	8004528 <__sfp_lock_release>
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <__sinit+0x28>)
 800454a:	6223      	str	r3, [r4, #32]
 800454c:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <__sinit+0x2c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f5      	bne.n	8004540 <__sinit+0xc>
 8004554:	f7ff ffc4 	bl	80044e0 <global_stdio_init.part.0>
 8004558:	e7f2      	b.n	8004540 <__sinit+0xc>
 800455a:	bf00      	nop
 800455c:	080044a1 	.word	0x080044a1
 8004560:	20000628 	.word	0x20000628

08004564 <_fwalk_sglue>:
 8004564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004568:	4607      	mov	r7, r0
 800456a:	4688      	mov	r8, r1
 800456c:	4614      	mov	r4, r2
 800456e:	2600      	movs	r6, #0
 8004570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004574:	f1b9 0901 	subs.w	r9, r9, #1
 8004578:	d505      	bpl.n	8004586 <_fwalk_sglue+0x22>
 800457a:	6824      	ldr	r4, [r4, #0]
 800457c:	2c00      	cmp	r4, #0
 800457e:	d1f7      	bne.n	8004570 <_fwalk_sglue+0xc>
 8004580:	4630      	mov	r0, r6
 8004582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d907      	bls.n	800459c <_fwalk_sglue+0x38>
 800458c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004590:	3301      	adds	r3, #1
 8004592:	d003      	beq.n	800459c <_fwalk_sglue+0x38>
 8004594:	4629      	mov	r1, r5
 8004596:	4638      	mov	r0, r7
 8004598:	47c0      	blx	r8
 800459a:	4306      	orrs	r6, r0
 800459c:	3568      	adds	r5, #104	@ 0x68
 800459e:	e7e9      	b.n	8004574 <_fwalk_sglue+0x10>

080045a0 <iprintf>:
 80045a0:	b40f      	push	{r0, r1, r2, r3}
 80045a2:	b507      	push	{r0, r1, r2, lr}
 80045a4:	4906      	ldr	r1, [pc, #24]	@ (80045c0 <iprintf+0x20>)
 80045a6:	ab04      	add	r3, sp, #16
 80045a8:	6808      	ldr	r0, [r1, #0]
 80045aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ae:	6881      	ldr	r1, [r0, #8]
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	f001 fccf 	bl	8005f54 <_vfiprintf_r>
 80045b6:	b003      	add	sp, #12
 80045b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045bc:	b004      	add	sp, #16
 80045be:	4770      	bx	lr
 80045c0:	20000018 	.word	0x20000018

080045c4 <_puts_r>:
 80045c4:	6a03      	ldr	r3, [r0, #32]
 80045c6:	b570      	push	{r4, r5, r6, lr}
 80045c8:	4605      	mov	r5, r0
 80045ca:	460e      	mov	r6, r1
 80045cc:	6884      	ldr	r4, [r0, #8]
 80045ce:	b90b      	cbnz	r3, 80045d4 <_puts_r+0x10>
 80045d0:	f7ff ffb0 	bl	8004534 <__sinit>
 80045d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d6:	07db      	lsls	r3, r3, #31
 80045d8:	d405      	bmi.n	80045e6 <_puts_r+0x22>
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	0598      	lsls	r0, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_puts_r+0x22>
 80045e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045e2:	f000 f9a2 	bl	800492a <__retarget_lock_acquire_recursive>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	0719      	lsls	r1, r3, #28
 80045ea:	d502      	bpl.n	80045f2 <_puts_r+0x2e>
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d135      	bne.n	800465e <_puts_r+0x9a>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f8c5 	bl	8004784 <__swsetup_r>
 80045fa:	b380      	cbz	r0, 800465e <_puts_r+0x9a>
 80045fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004602:	07da      	lsls	r2, r3, #31
 8004604:	d405      	bmi.n	8004612 <_puts_r+0x4e>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	059b      	lsls	r3, r3, #22
 800460a:	d402      	bmi.n	8004612 <_puts_r+0x4e>
 800460c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460e:	f000 f98d 	bl	800492c <__retarget_lock_release_recursive>
 8004612:	4628      	mov	r0, r5
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	2b00      	cmp	r3, #0
 8004618:	da04      	bge.n	8004624 <_puts_r+0x60>
 800461a:	69a2      	ldr	r2, [r4, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	dc17      	bgt.n	8004650 <_puts_r+0x8c>
 8004620:	290a      	cmp	r1, #10
 8004622:	d015      	beq.n	8004650 <_puts_r+0x8c>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	6022      	str	r2, [r4, #0]
 800462a:	7019      	strb	r1, [r3, #0]
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004632:	3b01      	subs	r3, #1
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	2900      	cmp	r1, #0
 8004638:	d1ed      	bne.n	8004616 <_puts_r+0x52>
 800463a:	2b00      	cmp	r3, #0
 800463c:	da11      	bge.n	8004662 <_puts_r+0x9e>
 800463e:	4622      	mov	r2, r4
 8004640:	210a      	movs	r1, #10
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f85f 	bl	8004706 <__swbuf_r>
 8004648:	3001      	adds	r0, #1
 800464a:	d0d7      	beq.n	80045fc <_puts_r+0x38>
 800464c:	250a      	movs	r5, #10
 800464e:	e7d7      	b.n	8004600 <_puts_r+0x3c>
 8004650:	4622      	mov	r2, r4
 8004652:	4628      	mov	r0, r5
 8004654:	f000 f857 	bl	8004706 <__swbuf_r>
 8004658:	3001      	adds	r0, #1
 800465a:	d1e7      	bne.n	800462c <_puts_r+0x68>
 800465c:	e7ce      	b.n	80045fc <_puts_r+0x38>
 800465e:	3e01      	subs	r6, #1
 8004660:	e7e4      	b.n	800462c <_puts_r+0x68>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	6022      	str	r2, [r4, #0]
 8004668:	220a      	movs	r2, #10
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e7ee      	b.n	800464c <_puts_r+0x88>
	...

08004670 <puts>:
 8004670:	4b02      	ldr	r3, [pc, #8]	@ (800467c <puts+0xc>)
 8004672:	4601      	mov	r1, r0
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f7ff bfa5 	b.w	80045c4 <_puts_r>
 800467a:	bf00      	nop
 800467c:	20000018 	.word	0x20000018

08004680 <__sread>:
 8004680:	b510      	push	{r4, lr}
 8004682:	460c      	mov	r4, r1
 8004684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004688:	f000 f900 	bl	800488c <_read_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	bfab      	itete	ge
 8004690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004692:	89a3      	ldrhlt	r3, [r4, #12]
 8004694:	181b      	addge	r3, r3, r0
 8004696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800469a:	bfac      	ite	ge
 800469c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800469e:	81a3      	strhlt	r3, [r4, #12]
 80046a0:	bd10      	pop	{r4, pc}

080046a2 <__swrite>:
 80046a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a6:	461f      	mov	r7, r3
 80046a8:	898b      	ldrh	r3, [r1, #12]
 80046aa:	4605      	mov	r5, r0
 80046ac:	05db      	lsls	r3, r3, #23
 80046ae:	460c      	mov	r4, r1
 80046b0:	4616      	mov	r6, r2
 80046b2:	d505      	bpl.n	80046c0 <__swrite+0x1e>
 80046b4:	2302      	movs	r3, #2
 80046b6:	2200      	movs	r2, #0
 80046b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046bc:	f000 f8d4 	bl	8004868 <_lseek_r>
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	4632      	mov	r2, r6
 80046c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	4628      	mov	r0, r5
 80046cc:	463b      	mov	r3, r7
 80046ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	f000 b8eb 	b.w	80048b0 <_write_r>

080046da <__sseek>:
 80046da:	b510      	push	{r4, lr}
 80046dc:	460c      	mov	r4, r1
 80046de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e2:	f000 f8c1 	bl	8004868 <_lseek_r>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	bf15      	itete	ne
 80046ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046f6:	81a3      	strheq	r3, [r4, #12]
 80046f8:	bf18      	it	ne
 80046fa:	81a3      	strhne	r3, [r4, #12]
 80046fc:	bd10      	pop	{r4, pc}

080046fe <__sclose>:
 80046fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004702:	f000 b8a1 	b.w	8004848 <_close_r>

08004706 <__swbuf_r>:
 8004706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004708:	460e      	mov	r6, r1
 800470a:	4614      	mov	r4, r2
 800470c:	4605      	mov	r5, r0
 800470e:	b118      	cbz	r0, 8004718 <__swbuf_r+0x12>
 8004710:	6a03      	ldr	r3, [r0, #32]
 8004712:	b90b      	cbnz	r3, 8004718 <__swbuf_r+0x12>
 8004714:	f7ff ff0e 	bl	8004534 <__sinit>
 8004718:	69a3      	ldr	r3, [r4, #24]
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	071a      	lsls	r2, r3, #28
 8004720:	d501      	bpl.n	8004726 <__swbuf_r+0x20>
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	b943      	cbnz	r3, 8004738 <__swbuf_r+0x32>
 8004726:	4621      	mov	r1, r4
 8004728:	4628      	mov	r0, r5
 800472a:	f000 f82b 	bl	8004784 <__swsetup_r>
 800472e:	b118      	cbz	r0, 8004738 <__swbuf_r+0x32>
 8004730:	f04f 37ff 	mov.w	r7, #4294967295
 8004734:	4638      	mov	r0, r7
 8004736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	6922      	ldr	r2, [r4, #16]
 800473c:	b2f6      	uxtb	r6, r6
 800473e:	1a98      	subs	r0, r3, r2
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	4637      	mov	r7, r6
 8004744:	4283      	cmp	r3, r0
 8004746:	dc05      	bgt.n	8004754 <__swbuf_r+0x4e>
 8004748:	4621      	mov	r1, r4
 800474a:	4628      	mov	r0, r5
 800474c:	f001 fd9a 	bl	8006284 <_fflush_r>
 8004750:	2800      	cmp	r0, #0
 8004752:	d1ed      	bne.n	8004730 <__swbuf_r+0x2a>
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	3b01      	subs	r3, #1
 8004758:	60a3      	str	r3, [r4, #8]
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	6022      	str	r2, [r4, #0]
 8004760:	701e      	strb	r6, [r3, #0]
 8004762:	6962      	ldr	r2, [r4, #20]
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	429a      	cmp	r2, r3
 8004768:	d004      	beq.n	8004774 <__swbuf_r+0x6e>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	07db      	lsls	r3, r3, #31
 800476e:	d5e1      	bpl.n	8004734 <__swbuf_r+0x2e>
 8004770:	2e0a      	cmp	r6, #10
 8004772:	d1df      	bne.n	8004734 <__swbuf_r+0x2e>
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f001 fd84 	bl	8006284 <_fflush_r>
 800477c:	2800      	cmp	r0, #0
 800477e:	d0d9      	beq.n	8004734 <__swbuf_r+0x2e>
 8004780:	e7d6      	b.n	8004730 <__swbuf_r+0x2a>
	...

08004784 <__swsetup_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4b29      	ldr	r3, [pc, #164]	@ (800482c <__swsetup_r+0xa8>)
 8004788:	4605      	mov	r5, r0
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	460c      	mov	r4, r1
 800478e:	b118      	cbz	r0, 8004798 <__swsetup_r+0x14>
 8004790:	6a03      	ldr	r3, [r0, #32]
 8004792:	b90b      	cbnz	r3, 8004798 <__swsetup_r+0x14>
 8004794:	f7ff fece 	bl	8004534 <__sinit>
 8004798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479c:	0719      	lsls	r1, r3, #28
 800479e:	d422      	bmi.n	80047e6 <__swsetup_r+0x62>
 80047a0:	06da      	lsls	r2, r3, #27
 80047a2:	d407      	bmi.n	80047b4 <__swsetup_r+0x30>
 80047a4:	2209      	movs	r2, #9
 80047a6:	602a      	str	r2, [r5, #0]
 80047a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	e033      	b.n	800481c <__swsetup_r+0x98>
 80047b4:	0758      	lsls	r0, r3, #29
 80047b6:	d512      	bpl.n	80047de <__swsetup_r+0x5a>
 80047b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ba:	b141      	cbz	r1, 80047ce <__swsetup_r+0x4a>
 80047bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047c0:	4299      	cmp	r1, r3
 80047c2:	d002      	beq.n	80047ca <__swsetup_r+0x46>
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 ff1f 	bl	8005608 <_free_r>
 80047ca:	2300      	movs	r3, #0
 80047cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	2300      	movs	r3, #0
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	f043 0308 	orr.w	r3, r3, #8
 80047e4:	81a3      	strh	r3, [r4, #12]
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	b94b      	cbnz	r3, 80047fe <__swsetup_r+0x7a>
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f4:	d003      	beq.n	80047fe <__swsetup_r+0x7a>
 80047f6:	4621      	mov	r1, r4
 80047f8:	4628      	mov	r0, r5
 80047fa:	f001 fd90 	bl	800631e <__smakebuf_r>
 80047fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004802:	f013 0201 	ands.w	r2, r3, #1
 8004806:	d00a      	beq.n	800481e <__swsetup_r+0x9a>
 8004808:	2200      	movs	r2, #0
 800480a:	60a2      	str	r2, [r4, #8]
 800480c:	6962      	ldr	r2, [r4, #20]
 800480e:	4252      	negs	r2, r2
 8004810:	61a2      	str	r2, [r4, #24]
 8004812:	6922      	ldr	r2, [r4, #16]
 8004814:	b942      	cbnz	r2, 8004828 <__swsetup_r+0xa4>
 8004816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800481a:	d1c5      	bne.n	80047a8 <__swsetup_r+0x24>
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	0799      	lsls	r1, r3, #30
 8004820:	bf58      	it	pl
 8004822:	6962      	ldrpl	r2, [r4, #20]
 8004824:	60a2      	str	r2, [r4, #8]
 8004826:	e7f4      	b.n	8004812 <__swsetup_r+0x8e>
 8004828:	2000      	movs	r0, #0
 800482a:	e7f7      	b.n	800481c <__swsetup_r+0x98>
 800482c:	20000018 	.word	0x20000018

08004830 <memset>:
 8004830:	4603      	mov	r3, r0
 8004832:	4402      	add	r2, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <_localeconv_r>:
 8004840:	4800      	ldr	r0, [pc, #0]	@ (8004844 <_localeconv_r+0x4>)
 8004842:	4770      	bx	lr
 8004844:	20000158 	.word	0x20000158

08004848 <_close_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	2300      	movs	r3, #0
 800484c:	4d05      	ldr	r5, [pc, #20]	@ (8004864 <_close_r+0x1c>)
 800484e:	4604      	mov	r4, r0
 8004850:	4608      	mov	r0, r1
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	f7fc fe77 	bl	8001546 <_close>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_close_r+0x1a>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_close_r+0x1a>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	2000062c 	.word	0x2000062c

08004868 <_lseek_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	2200      	movs	r2, #0
 8004872:	4d05      	ldr	r5, [pc, #20]	@ (8004888 <_lseek_r+0x20>)
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fc fe89 	bl	800158e <_lseek>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_lseek_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_lseek_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	2000062c 	.word	0x2000062c

0800488c <_read_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	2200      	movs	r2, #0
 8004896:	4d05      	ldr	r5, [pc, #20]	@ (80048ac <_read_r+0x20>)
 8004898:	602a      	str	r2, [r5, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f7fc fe1a 	bl	80014d4 <_read>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_read_r+0x1e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_read_r+0x1e>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	2000062c 	.word	0x2000062c

080048b0 <_write_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	2200      	movs	r2, #0
 80048ba:	4d05      	ldr	r5, [pc, #20]	@ (80048d0 <_write_r+0x20>)
 80048bc:	602a      	str	r2, [r5, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7fc fe25 	bl	800150e <_write>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_write_r+0x1e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_write_r+0x1e>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	2000062c 	.word	0x2000062c

080048d4 <__errno>:
 80048d4:	4b01      	ldr	r3, [pc, #4]	@ (80048dc <__errno+0x8>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000018 	.word	0x20000018

080048e0 <__libc_init_array>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	2600      	movs	r6, #0
 80048e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004918 <__libc_init_array+0x38>)
 80048e6:	4c0d      	ldr	r4, [pc, #52]	@ (800491c <__libc_init_array+0x3c>)
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	42a6      	cmp	r6, r4
 80048ee:	d109      	bne.n	8004904 <__libc_init_array+0x24>
 80048f0:	f001 fe34 	bl	800655c <_init>
 80048f4:	2600      	movs	r6, #0
 80048f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004920 <__libc_init_array+0x40>)
 80048f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004924 <__libc_init_array+0x44>)
 80048fa:	1b64      	subs	r4, r4, r5
 80048fc:	10a4      	asrs	r4, r4, #2
 80048fe:	42a6      	cmp	r6, r4
 8004900:	d105      	bne.n	800490e <__libc_init_array+0x2e>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	f855 3b04 	ldr.w	r3, [r5], #4
 8004908:	4798      	blx	r3
 800490a:	3601      	adds	r6, #1
 800490c:	e7ee      	b.n	80048ec <__libc_init_array+0xc>
 800490e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004912:	4798      	blx	r3
 8004914:	3601      	adds	r6, #1
 8004916:	e7f2      	b.n	80048fe <__libc_init_array+0x1e>
 8004918:	080069e8 	.word	0x080069e8
 800491c:	080069e8 	.word	0x080069e8
 8004920:	080069e8 	.word	0x080069e8
 8004924:	080069ec 	.word	0x080069ec

08004928 <__retarget_lock_init_recursive>:
 8004928:	4770      	bx	lr

0800492a <__retarget_lock_acquire_recursive>:
 800492a:	4770      	bx	lr

0800492c <__retarget_lock_release_recursive>:
 800492c:	4770      	bx	lr

0800492e <memchr>:
 800492e:	4603      	mov	r3, r0
 8004930:	b510      	push	{r4, lr}
 8004932:	b2c9      	uxtb	r1, r1
 8004934:	4402      	add	r2, r0
 8004936:	4293      	cmp	r3, r2
 8004938:	4618      	mov	r0, r3
 800493a:	d101      	bne.n	8004940 <memchr+0x12>
 800493c:	2000      	movs	r0, #0
 800493e:	e003      	b.n	8004948 <memchr+0x1a>
 8004940:	7804      	ldrb	r4, [r0, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	428c      	cmp	r4, r1
 8004946:	d1f6      	bne.n	8004936 <memchr+0x8>
 8004948:	bd10      	pop	{r4, pc}

0800494a <memcpy>:
 800494a:	440a      	add	r2, r1
 800494c:	4291      	cmp	r1, r2
 800494e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004952:	d100      	bne.n	8004956 <memcpy+0xc>
 8004954:	4770      	bx	lr
 8004956:	b510      	push	{r4, lr}
 8004958:	f811 4b01 	ldrb.w	r4, [r1], #1
 800495c:	4291      	cmp	r1, r2
 800495e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004962:	d1f9      	bne.n	8004958 <memcpy+0xe>
 8004964:	bd10      	pop	{r4, pc}

08004966 <quorem>:
 8004966:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	6903      	ldr	r3, [r0, #16]
 800496c:	690c      	ldr	r4, [r1, #16]
 800496e:	4607      	mov	r7, r0
 8004970:	42a3      	cmp	r3, r4
 8004972:	db7e      	blt.n	8004a72 <quorem+0x10c>
 8004974:	3c01      	subs	r4, #1
 8004976:	00a3      	lsls	r3, r4, #2
 8004978:	f100 0514 	add.w	r5, r0, #20
 800497c:	f101 0814 	add.w	r8, r1, #20
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800498c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004990:	3301      	adds	r3, #1
 8004992:	429a      	cmp	r2, r3
 8004994:	fbb2 f6f3 	udiv	r6, r2, r3
 8004998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800499c:	d32e      	bcc.n	80049fc <quorem+0x96>
 800499e:	f04f 0a00 	mov.w	sl, #0
 80049a2:	46c4      	mov	ip, r8
 80049a4:	46ae      	mov	lr, r5
 80049a6:	46d3      	mov	fp, sl
 80049a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80049ac:	b298      	uxth	r0, r3
 80049ae:	fb06 a000 	mla	r0, r6, r0, sl
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	0c02      	lsrs	r2, r0, #16
 80049b6:	fb06 2303 	mla	r3, r6, r3, r2
 80049ba:	f8de 2000 	ldr.w	r2, [lr]
 80049be:	b280      	uxth	r0, r0
 80049c0:	b292      	uxth	r2, r2
 80049c2:	1a12      	subs	r2, r2, r0
 80049c4:	445a      	add	r2, fp
 80049c6:	f8de 0000 	ldr.w	r0, [lr]
 80049ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80049d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80049d8:	b292      	uxth	r2, r2
 80049da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80049de:	45e1      	cmp	r9, ip
 80049e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80049e4:	f84e 2b04 	str.w	r2, [lr], #4
 80049e8:	d2de      	bcs.n	80049a8 <quorem+0x42>
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	58eb      	ldr	r3, [r5, r3]
 80049ee:	b92b      	cbnz	r3, 80049fc <quorem+0x96>
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	3b04      	subs	r3, #4
 80049f4:	429d      	cmp	r5, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	d32f      	bcc.n	8004a5a <quorem+0xf4>
 80049fa:	613c      	str	r4, [r7, #16]
 80049fc:	4638      	mov	r0, r7
 80049fe:	f001 f979 	bl	8005cf4 <__mcmp>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	db25      	blt.n	8004a52 <quorem+0xec>
 8004a06:	4629      	mov	r1, r5
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a0e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a12:	fa1f fe82 	uxth.w	lr, r2
 8004a16:	fa1f f38c 	uxth.w	r3, ip
 8004a1a:	eba3 030e 	sub.w	r3, r3, lr
 8004a1e:	4403      	add	r3, r0
 8004a20:	0c12      	lsrs	r2, r2, #16
 8004a22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a30:	45c1      	cmp	r9, r8
 8004a32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a36:	f841 3b04 	str.w	r3, [r1], #4
 8004a3a:	d2e6      	bcs.n	8004a0a <quorem+0xa4>
 8004a3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a44:	b922      	cbnz	r2, 8004a50 <quorem+0xea>
 8004a46:	3b04      	subs	r3, #4
 8004a48:	429d      	cmp	r5, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	d30b      	bcc.n	8004a66 <quorem+0x100>
 8004a4e:	613c      	str	r4, [r7, #16]
 8004a50:	3601      	adds	r6, #1
 8004a52:	4630      	mov	r0, r6
 8004a54:	b003      	add	sp, #12
 8004a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	d1cb      	bne.n	80049fa <quorem+0x94>
 8004a62:	3c01      	subs	r4, #1
 8004a64:	e7c6      	b.n	80049f4 <quorem+0x8e>
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	3b04      	subs	r3, #4
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d1ef      	bne.n	8004a4e <quorem+0xe8>
 8004a6e:	3c01      	subs	r4, #1
 8004a70:	e7ea      	b.n	8004a48 <quorem+0xe2>
 8004a72:	2000      	movs	r0, #0
 8004a74:	e7ee      	b.n	8004a54 <quorem+0xee>
	...

08004a78 <_dtoa_r>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	69c7      	ldr	r7, [r0, #28]
 8004a82:	b097      	sub	sp, #92	@ 0x5c
 8004a84:	4683      	mov	fp, r0
 8004a86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004a8c:	b97f      	cbnz	r7, 8004aae <_dtoa_r+0x36>
 8004a8e:	2010      	movs	r0, #16
 8004a90:	f000 fe02 	bl	8005698 <malloc>
 8004a94:	4602      	mov	r2, r0
 8004a96:	f8cb 001c 	str.w	r0, [fp, #28]
 8004a9a:	b920      	cbnz	r0, 8004aa6 <_dtoa_r+0x2e>
 8004a9c:	21ef      	movs	r1, #239	@ 0xef
 8004a9e:	4ba8      	ldr	r3, [pc, #672]	@ (8004d40 <_dtoa_r+0x2c8>)
 8004aa0:	48a8      	ldr	r0, [pc, #672]	@ (8004d44 <_dtoa_r+0x2cc>)
 8004aa2:	f001 fcab 	bl	80063fc <__assert_func>
 8004aa6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004aaa:	6007      	str	r7, [r0, #0]
 8004aac:	60c7      	str	r7, [r0, #12]
 8004aae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	b159      	cbz	r1, 8004ace <_dtoa_r+0x56>
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4093      	lsls	r3, r2
 8004abc:	604a      	str	r2, [r1, #4]
 8004abe:	608b      	str	r3, [r1, #8]
 8004ac0:	4658      	mov	r0, fp
 8004ac2:	f000 fedf 	bl	8005884 <_Bfree>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	1e2b      	subs	r3, r5, #0
 8004ad0:	bfaf      	iteee	ge
 8004ad2:	2300      	movge	r3, #0
 8004ad4:	2201      	movlt	r2, #1
 8004ad6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ada:	9303      	strlt	r3, [sp, #12]
 8004adc:	bfa8      	it	ge
 8004ade:	6033      	strge	r3, [r6, #0]
 8004ae0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ae4:	4b98      	ldr	r3, [pc, #608]	@ (8004d48 <_dtoa_r+0x2d0>)
 8004ae6:	bfb8      	it	lt
 8004ae8:	6032      	strlt	r2, [r6, #0]
 8004aea:	ea33 0308 	bics.w	r3, r3, r8
 8004aee:	d112      	bne.n	8004b16 <_dtoa_r+0x9e>
 8004af0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004af4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004afc:	4323      	orrs	r3, r4
 8004afe:	f000 8550 	beq.w	80055a2 <_dtoa_r+0xb2a>
 8004b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004d4c <_dtoa_r+0x2d4>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8552 	beq.w	80055b2 <_dtoa_r+0xb3a>
 8004b0e:	f10a 0303 	add.w	r3, sl, #3
 8004b12:	f000 bd4c 	b.w	80055ae <_dtoa_r+0xb36>
 8004b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b22:	2200      	movs	r2, #0
 8004b24:	2300      	movs	r3, #0
 8004b26:	f7fb ff3f 	bl	80009a8 <__aeabi_dcmpeq>
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	b158      	cbz	r0, 8004b46 <_dtoa_r+0xce>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b36:	b113      	cbz	r3, 8004b3e <_dtoa_r+0xc6>
 8004b38:	4b85      	ldr	r3, [pc, #532]	@ (8004d50 <_dtoa_r+0x2d8>)
 8004b3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004d54 <_dtoa_r+0x2dc>
 8004b42:	f000 bd36 	b.w	80055b2 <_dtoa_r+0xb3a>
 8004b46:	ab14      	add	r3, sp, #80	@ 0x50
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	ab15      	add	r3, sp, #84	@ 0x54
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4658      	mov	r0, fp
 8004b50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004b54:	f001 f97e 	bl	8005e54 <__d2b>
 8004b58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004b5c:	4681      	mov	r9, r0
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	d077      	beq.n	8004c52 <_dtoa_r+0x1da>
 8004b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b78:	9712      	str	r7, [sp, #72]	@ 0x48
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4b76      	ldr	r3, [pc, #472]	@ (8004d58 <_dtoa_r+0x2e0>)
 8004b80:	f7fb faf2 	bl	8000168 <__aeabi_dsub>
 8004b84:	a368      	add	r3, pc, #416	@ (adr r3, 8004d28 <_dtoa_r+0x2b0>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fca5 	bl	80004d8 <__aeabi_dmul>
 8004b8e:	a368      	add	r3, pc, #416	@ (adr r3, 8004d30 <_dtoa_r+0x2b8>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb faea 	bl	800016c <__adddf3>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	f7fb fc31 	bl	8000404 <__aeabi_i2d>
 8004ba2:	a365      	add	r3, pc, #404	@ (adr r3, 8004d38 <_dtoa_r+0x2c0>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fc96 	bl	80004d8 <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f7fb fada 	bl	800016c <__adddf3>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	f7fb ff3c 	bl	8000a38 <__aeabi_d2iz>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f7fb fef7 	bl	80009bc <__aeabi_dcmplt>
 8004bce:	b140      	cbz	r0, 8004be2 <_dtoa_r+0x16a>
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f7fb fc17 	bl	8000404 <__aeabi_i2d>
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f7fb fee5 	bl	80009a8 <__aeabi_dcmpeq>
 8004bde:	b900      	cbnz	r0, 8004be2 <_dtoa_r+0x16a>
 8004be0:	3f01      	subs	r7, #1
 8004be2:	2f16      	cmp	r7, #22
 8004be4:	d853      	bhi.n	8004c8e <_dtoa_r+0x216>
 8004be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bea:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <_dtoa_r+0x2e4>)
 8004bec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f7fb fee2 	bl	80009bc <__aeabi_dcmplt>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d04a      	beq.n	8004c92 <_dtoa_r+0x21a>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	3f01      	subs	r7, #1
 8004c00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004c02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c04:	1b9b      	subs	r3, r3, r6
 8004c06:	1e5a      	subs	r2, r3, #1
 8004c08:	bf46      	itte	mi
 8004c0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004c0e:	2300      	movmi	r3, #0
 8004c10:	f04f 0800 	movpl.w	r8, #0
 8004c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c16:	bf48      	it	mi
 8004c18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004c1a:	2f00      	cmp	r7, #0
 8004c1c:	db3b      	blt.n	8004c96 <_dtoa_r+0x21e>
 8004c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c20:	970e      	str	r7, [sp, #56]	@ 0x38
 8004c22:	443b      	add	r3, r7
 8004c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c26:	2300      	movs	r3, #0
 8004c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	d866      	bhi.n	8004cfe <_dtoa_r+0x286>
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	bfc4      	itt	gt
 8004c34:	3b04      	subgt	r3, #4
 8004c36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004c38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c3a:	bfc8      	it	gt
 8004c3c:	2400      	movgt	r4, #0
 8004c3e:	f1a3 0302 	sub.w	r3, r3, #2
 8004c42:	bfd8      	it	le
 8004c44:	2401      	movle	r4, #1
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d864      	bhi.n	8004d14 <_dtoa_r+0x29c>
 8004c4a:	e8df f003 	tbb	[pc, r3]
 8004c4e:	382b      	.short	0x382b
 8004c50:	5636      	.short	0x5636
 8004c52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004c56:	441e      	add	r6, r3
 8004c58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	bfc1      	itttt	gt
 8004c60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c64:	fa08 f803 	lslgt.w	r8, r8, r3
 8004c68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004c6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004c70:	bfd6      	itet	le
 8004c72:	f1c3 0320 	rsble	r3, r3, #32
 8004c76:	ea48 0003 	orrgt.w	r0, r8, r3
 8004c7a:	fa04 f003 	lslle.w	r0, r4, r3
 8004c7e:	f7fb fbb1 	bl	80003e4 <__aeabi_ui2d>
 8004c82:	2201      	movs	r2, #1
 8004c84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004c88:	3e01      	subs	r6, #1
 8004c8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004c8c:	e775      	b.n	8004b7a <_dtoa_r+0x102>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e7b6      	b.n	8004c00 <_dtoa_r+0x188>
 8004c92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c94:	e7b5      	b.n	8004c02 <_dtoa_r+0x18a>
 8004c96:	427b      	negs	r3, r7
 8004c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	eba8 0807 	sub.w	r8, r8, r7
 8004ca0:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ca2:	e7c2      	b.n	8004c2a <_dtoa_r+0x1b2>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ca8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc35      	bgt.n	8004d1a <_dtoa_r+0x2a2>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004cb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8004cb8:	e00b      	b.n	8004cd2 <_dtoa_r+0x25a>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e7f3      	b.n	8004ca6 <_dtoa_r+0x22e>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	9308      	str	r3, [sp, #32]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	bfb8      	it	lt
 8004cd0:	2301      	movlt	r3, #1
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004cda:	f102 0514 	add.w	r5, r2, #20
 8004cde:	429d      	cmp	r5, r3
 8004ce0:	d91f      	bls.n	8004d22 <_dtoa_r+0x2aa>
 8004ce2:	6041      	str	r1, [r0, #4]
 8004ce4:	4658      	mov	r0, fp
 8004ce6:	f000 fd8d 	bl	8005804 <_Balloc>
 8004cea:	4682      	mov	sl, r0
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d139      	bne.n	8004d64 <_dtoa_r+0x2ec>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <_dtoa_r+0x2e8>)
 8004cf8:	e6d2      	b.n	8004aa0 <_dtoa_r+0x28>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e7e0      	b.n	8004cc0 <_dtoa_r+0x248>
 8004cfe:	2401      	movs	r4, #1
 8004d00:	2300      	movs	r3, #0
 8004d02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d04:	9320      	str	r3, [sp, #128]	@ 0x80
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004d10:	2312      	movs	r3, #18
 8004d12:	e7d0      	b.n	8004cb6 <_dtoa_r+0x23e>
 8004d14:	2301      	movs	r3, #1
 8004d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d18:	e7f5      	b.n	8004d06 <_dtoa_r+0x28e>
 8004d1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004d20:	e7d7      	b.n	8004cd2 <_dtoa_r+0x25a>
 8004d22:	3101      	adds	r1, #1
 8004d24:	0052      	lsls	r2, r2, #1
 8004d26:	e7d8      	b.n	8004cda <_dtoa_r+0x262>
 8004d28:	636f4361 	.word	0x636f4361
 8004d2c:	3fd287a7 	.word	0x3fd287a7
 8004d30:	8b60c8b3 	.word	0x8b60c8b3
 8004d34:	3fc68a28 	.word	0x3fc68a28
 8004d38:	509f79fb 	.word	0x509f79fb
 8004d3c:	3fd34413 	.word	0x3fd34413
 8004d40:	080066af 	.word	0x080066af
 8004d44:	080066c6 	.word	0x080066c6
 8004d48:	7ff00000 	.word	0x7ff00000
 8004d4c:	080066ab 	.word	0x080066ab
 8004d50:	0800667f 	.word	0x0800667f
 8004d54:	0800667e 	.word	0x0800667e
 8004d58:	3ff80000 	.word	0x3ff80000
 8004d5c:	080067c0 	.word	0x080067c0
 8004d60:	0800671e 	.word	0x0800671e
 8004d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d68:	6018      	str	r0, [r3, #0]
 8004d6a:	9b07      	ldr	r3, [sp, #28]
 8004d6c:	2b0e      	cmp	r3, #14
 8004d6e:	f200 80a4 	bhi.w	8004eba <_dtoa_r+0x442>
 8004d72:	2c00      	cmp	r4, #0
 8004d74:	f000 80a1 	beq.w	8004eba <_dtoa_r+0x442>
 8004d78:	2f00      	cmp	r7, #0
 8004d7a:	dd33      	ble.n	8004de4 <_dtoa_r+0x36c>
 8004d7c:	4b86      	ldr	r3, [pc, #536]	@ (8004f98 <_dtoa_r+0x520>)
 8004d7e:	f007 020f 	and.w	r2, r7, #15
 8004d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d86:	05f8      	lsls	r0, r7, #23
 8004d88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d94:	d516      	bpl.n	8004dc4 <_dtoa_r+0x34c>
 8004d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d9a:	4b80      	ldr	r3, [pc, #512]	@ (8004f9c <_dtoa_r+0x524>)
 8004d9c:	2603      	movs	r6, #3
 8004d9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004da2:	f7fb fcc3 	bl	800072c <__aeabi_ddiv>
 8004da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004daa:	f004 040f 	and.w	r4, r4, #15
 8004dae:	4d7b      	ldr	r5, [pc, #492]	@ (8004f9c <_dtoa_r+0x524>)
 8004db0:	b954      	cbnz	r4, 8004dc8 <_dtoa_r+0x350>
 8004db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dba:	f7fb fcb7 	bl	800072c <__aeabi_ddiv>
 8004dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc2:	e028      	b.n	8004e16 <_dtoa_r+0x39e>
 8004dc4:	2602      	movs	r6, #2
 8004dc6:	e7f2      	b.n	8004dae <_dtoa_r+0x336>
 8004dc8:	07e1      	lsls	r1, r4, #31
 8004dca:	d508      	bpl.n	8004dde <_dtoa_r+0x366>
 8004dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dd4:	f7fb fb80 	bl	80004d8 <__aeabi_dmul>
 8004dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ddc:	3601      	adds	r6, #1
 8004dde:	1064      	asrs	r4, r4, #1
 8004de0:	3508      	adds	r5, #8
 8004de2:	e7e5      	b.n	8004db0 <_dtoa_r+0x338>
 8004de4:	f000 80d2 	beq.w	8004f8c <_dtoa_r+0x514>
 8004de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dec:	427c      	negs	r4, r7
 8004dee:	4b6a      	ldr	r3, [pc, #424]	@ (8004f98 <_dtoa_r+0x520>)
 8004df0:	f004 020f 	and.w	r2, r4, #15
 8004df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f7fb fb6c 	bl	80004d8 <__aeabi_dmul>
 8004e00:	2602      	movs	r6, #2
 8004e02:	2300      	movs	r3, #0
 8004e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e08:	4d64      	ldr	r5, [pc, #400]	@ (8004f9c <_dtoa_r+0x524>)
 8004e0a:	1124      	asrs	r4, r4, #4
 8004e0c:	2c00      	cmp	r4, #0
 8004e0e:	f040 80b2 	bne.w	8004f76 <_dtoa_r+0x4fe>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1d3      	bne.n	8004dbe <_dtoa_r+0x346>
 8004e16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004e1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80b7 	beq.w	8004f90 <_dtoa_r+0x518>
 8004e22:	2200      	movs	r2, #0
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa0 <_dtoa_r+0x528>)
 8004e2a:	f7fb fdc7 	bl	80009bc <__aeabi_dcmplt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f000 80ae 	beq.w	8004f90 <_dtoa_r+0x518>
 8004e34:	9b07      	ldr	r3, [sp, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80aa 	beq.w	8004f90 <_dtoa_r+0x518>
 8004e3c:	9b08      	ldr	r3, [sp, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd37      	ble.n	8004eb2 <_dtoa_r+0x43a>
 8004e42:	1e7b      	subs	r3, r7, #1
 8004e44:	4620      	mov	r0, r4
 8004e46:	9304      	str	r3, [sp, #16]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	4b55      	ldr	r3, [pc, #340]	@ (8004fa4 <_dtoa_r+0x52c>)
 8004e4e:	f7fb fb43 	bl	80004d8 <__aeabi_dmul>
 8004e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e56:	9c08      	ldr	r4, [sp, #32]
 8004e58:	3601      	adds	r6, #1
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7fb fad2 	bl	8000404 <__aeabi_i2d>
 8004e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e64:	f7fb fb38 	bl	80004d8 <__aeabi_dmul>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <_dtoa_r+0x530>)
 8004e6c:	f7fb f97e 	bl	800016c <__adddf3>
 8004e70:	4605      	mov	r5, r0
 8004e72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004e76:	2c00      	cmp	r4, #0
 8004e78:	f040 809a 	bne.w	8004fb0 <_dtoa_r+0x538>
 8004e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e80:	2200      	movs	r2, #0
 8004e82:	4b4a      	ldr	r3, [pc, #296]	@ (8004fac <_dtoa_r+0x534>)
 8004e84:	f7fb f970 	bl	8000168 <__aeabi_dsub>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4633      	mov	r3, r6
 8004e94:	f7fb fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f040 828e 	bne.w	80053ba <_dtoa_r+0x942>
 8004e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ea8:	f7fb fd88 	bl	80009bc <__aeabi_dcmplt>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	f040 8127 	bne.w	8005100 <_dtoa_r+0x688>
 8004eb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004eb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004eba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f2c0 8163 	blt.w	8005188 <_dtoa_r+0x710>
 8004ec2:	2f0e      	cmp	r7, #14
 8004ec4:	f300 8160 	bgt.w	8005188 <_dtoa_r+0x710>
 8004ec8:	4b33      	ldr	r3, [pc, #204]	@ (8004f98 <_dtoa_r+0x520>)
 8004eca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ed2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ed6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	da03      	bge.n	8004ee4 <_dtoa_r+0x46c>
 8004edc:	9b07      	ldr	r3, [sp, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f340 8100 	ble.w	80050e4 <_dtoa_r+0x66c>
 8004ee4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ee8:	4656      	mov	r6, sl
 8004eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f7fb fc1b 	bl	800072c <__aeabi_ddiv>
 8004ef6:	f7fb fd9f 	bl	8000a38 <__aeabi_d2iz>
 8004efa:	4680      	mov	r8, r0
 8004efc:	f7fb fa82 	bl	8000404 <__aeabi_i2d>
 8004f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f04:	f7fb fae8 	bl	80004d8 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb f92a 	bl	8000168 <__aeabi_dsub>
 8004f14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004f18:	9d07      	ldr	r5, [sp, #28]
 8004f1a:	f806 4b01 	strb.w	r4, [r6], #1
 8004f1e:	eba6 040a 	sub.w	r4, r6, sl
 8004f22:	42a5      	cmp	r5, r4
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	f040 8116 	bne.w	8005158 <_dtoa_r+0x6e0>
 8004f2c:	f7fb f91e 	bl	800016c <__adddf3>
 8004f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f34:	4604      	mov	r4, r0
 8004f36:	460d      	mov	r5, r1
 8004f38:	f7fb fd5e 	bl	80009f8 <__aeabi_dcmpgt>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f040 80f8 	bne.w	8005132 <_dtoa_r+0x6ba>
 8004f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fb fd2d 	bl	80009a8 <__aeabi_dcmpeq>
 8004f4e:	b118      	cbz	r0, 8004f58 <_dtoa_r+0x4e0>
 8004f50:	f018 0f01 	tst.w	r8, #1
 8004f54:	f040 80ed 	bne.w	8005132 <_dtoa_r+0x6ba>
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4658      	mov	r0, fp
 8004f5c:	f000 fc92 	bl	8005884 <_Bfree>
 8004f60:	2300      	movs	r3, #0
 8004f62:	7033      	strb	r3, [r6, #0]
 8004f64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004f66:	3701      	adds	r7, #1
 8004f68:	601f      	str	r7, [r3, #0]
 8004f6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8320 	beq.w	80055b2 <_dtoa_r+0xb3a>
 8004f72:	601e      	str	r6, [r3, #0]
 8004f74:	e31d      	b.n	80055b2 <_dtoa_r+0xb3a>
 8004f76:	07e2      	lsls	r2, r4, #31
 8004f78:	d505      	bpl.n	8004f86 <_dtoa_r+0x50e>
 8004f7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f7e:	f7fb faab 	bl	80004d8 <__aeabi_dmul>
 8004f82:	2301      	movs	r3, #1
 8004f84:	3601      	adds	r6, #1
 8004f86:	1064      	asrs	r4, r4, #1
 8004f88:	3508      	adds	r5, #8
 8004f8a:	e73f      	b.n	8004e0c <_dtoa_r+0x394>
 8004f8c:	2602      	movs	r6, #2
 8004f8e:	e742      	b.n	8004e16 <_dtoa_r+0x39e>
 8004f90:	9c07      	ldr	r4, [sp, #28]
 8004f92:	9704      	str	r7, [sp, #16]
 8004f94:	e761      	b.n	8004e5a <_dtoa_r+0x3e2>
 8004f96:	bf00      	nop
 8004f98:	080067c0 	.word	0x080067c0
 8004f9c:	08006798 	.word	0x08006798
 8004fa0:	3ff00000 	.word	0x3ff00000
 8004fa4:	40240000 	.word	0x40240000
 8004fa8:	401c0000 	.word	0x401c0000
 8004fac:	40140000 	.word	0x40140000
 8004fb0:	4b70      	ldr	r3, [pc, #448]	@ (8005174 <_dtoa_r+0x6fc>)
 8004fb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fbc:	4454      	add	r4, sl
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d045      	beq.n	800504e <_dtoa_r+0x5d6>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	496c      	ldr	r1, [pc, #432]	@ (8005178 <_dtoa_r+0x700>)
 8004fc6:	f7fb fbb1 	bl	800072c <__aeabi_ddiv>
 8004fca:	4633      	mov	r3, r6
 8004fcc:	462a      	mov	r2, r5
 8004fce:	f7fb f8cb 	bl	8000168 <__aeabi_dsub>
 8004fd2:	4656      	mov	r6, sl
 8004fd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fdc:	f7fb fd2c 	bl	8000a38 <__aeabi_d2iz>
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	f7fb fa0f 	bl	8000404 <__aeabi_i2d>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fee:	f7fb f8bb 	bl	8000168 <__aeabi_dsub>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	3530      	adds	r5, #48	@ 0x30
 8004ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ffc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005000:	f806 5b01 	strb.w	r5, [r6], #1
 8005004:	f7fb fcda 	bl	80009bc <__aeabi_dcmplt>
 8005008:	2800      	cmp	r0, #0
 800500a:	d163      	bne.n	80050d4 <_dtoa_r+0x65c>
 800500c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005010:	2000      	movs	r0, #0
 8005012:	495a      	ldr	r1, [pc, #360]	@ (800517c <_dtoa_r+0x704>)
 8005014:	f7fb f8a8 	bl	8000168 <__aeabi_dsub>
 8005018:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800501c:	f7fb fcce 	bl	80009bc <__aeabi_dcmplt>
 8005020:	2800      	cmp	r0, #0
 8005022:	f040 8087 	bne.w	8005134 <_dtoa_r+0x6bc>
 8005026:	42a6      	cmp	r6, r4
 8005028:	f43f af43 	beq.w	8004eb2 <_dtoa_r+0x43a>
 800502c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005030:	2200      	movs	r2, #0
 8005032:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <_dtoa_r+0x708>)
 8005034:	f7fb fa50 	bl	80004d8 <__aeabi_dmul>
 8005038:	2200      	movs	r2, #0
 800503a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800503e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005042:	4b4f      	ldr	r3, [pc, #316]	@ (8005180 <_dtoa_r+0x708>)
 8005044:	f7fb fa48 	bl	80004d8 <__aeabi_dmul>
 8005048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800504c:	e7c4      	b.n	8004fd8 <_dtoa_r+0x560>
 800504e:	4631      	mov	r1, r6
 8005050:	4628      	mov	r0, r5
 8005052:	f7fb fa41 	bl	80004d8 <__aeabi_dmul>
 8005056:	4656      	mov	r6, sl
 8005058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800505c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800505e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005062:	f7fb fce9 	bl	8000a38 <__aeabi_d2iz>
 8005066:	4605      	mov	r5, r0
 8005068:	f7fb f9cc 	bl	8000404 <__aeabi_i2d>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005074:	f7fb f878 	bl	8000168 <__aeabi_dsub>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	3530      	adds	r5, #48	@ 0x30
 800507e:	f806 5b01 	strb.w	r5, [r6], #1
 8005082:	42a6      	cmp	r6, r4
 8005084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	d124      	bne.n	80050d8 <_dtoa_r+0x660>
 800508e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005092:	4b39      	ldr	r3, [pc, #228]	@ (8005178 <_dtoa_r+0x700>)
 8005094:	f7fb f86a 	bl	800016c <__adddf3>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a0:	f7fb fcaa 	bl	80009f8 <__aeabi_dcmpgt>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d145      	bne.n	8005134 <_dtoa_r+0x6bc>
 80050a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050ac:	2000      	movs	r0, #0
 80050ae:	4932      	ldr	r1, [pc, #200]	@ (8005178 <_dtoa_r+0x700>)
 80050b0:	f7fb f85a 	bl	8000168 <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050bc:	f7fb fc7e 	bl	80009bc <__aeabi_dcmplt>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	f43f aef6 	beq.w	8004eb2 <_dtoa_r+0x43a>
 80050c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80050c8:	1e73      	subs	r3, r6, #1
 80050ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80050d0:	2b30      	cmp	r3, #48	@ 0x30
 80050d2:	d0f8      	beq.n	80050c6 <_dtoa_r+0x64e>
 80050d4:	9f04      	ldr	r7, [sp, #16]
 80050d6:	e73f      	b.n	8004f58 <_dtoa_r+0x4e0>
 80050d8:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <_dtoa_r+0x708>)
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e2:	e7bc      	b.n	800505e <_dtoa_r+0x5e6>
 80050e4:	d10c      	bne.n	8005100 <_dtoa_r+0x688>
 80050e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ea:	2200      	movs	r2, #0
 80050ec:	4b25      	ldr	r3, [pc, #148]	@ (8005184 <_dtoa_r+0x70c>)
 80050ee:	f7fb f9f3 	bl	80004d8 <__aeabi_dmul>
 80050f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f6:	f7fb fc75 	bl	80009e4 <__aeabi_dcmpge>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	f000 815b 	beq.w	80053b6 <_dtoa_r+0x93e>
 8005100:	2400      	movs	r4, #0
 8005102:	4625      	mov	r5, r4
 8005104:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005106:	4656      	mov	r6, sl
 8005108:	43db      	mvns	r3, r3
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	2700      	movs	r7, #0
 800510e:	4621      	mov	r1, r4
 8005110:	4658      	mov	r0, fp
 8005112:	f000 fbb7 	bl	8005884 <_Bfree>
 8005116:	2d00      	cmp	r5, #0
 8005118:	d0dc      	beq.n	80050d4 <_dtoa_r+0x65c>
 800511a:	b12f      	cbz	r7, 8005128 <_dtoa_r+0x6b0>
 800511c:	42af      	cmp	r7, r5
 800511e:	d003      	beq.n	8005128 <_dtoa_r+0x6b0>
 8005120:	4639      	mov	r1, r7
 8005122:	4658      	mov	r0, fp
 8005124:	f000 fbae 	bl	8005884 <_Bfree>
 8005128:	4629      	mov	r1, r5
 800512a:	4658      	mov	r0, fp
 800512c:	f000 fbaa 	bl	8005884 <_Bfree>
 8005130:	e7d0      	b.n	80050d4 <_dtoa_r+0x65c>
 8005132:	9704      	str	r7, [sp, #16]
 8005134:	4633      	mov	r3, r6
 8005136:	461e      	mov	r6, r3
 8005138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800513c:	2a39      	cmp	r2, #57	@ 0x39
 800513e:	d107      	bne.n	8005150 <_dtoa_r+0x6d8>
 8005140:	459a      	cmp	sl, r3
 8005142:	d1f8      	bne.n	8005136 <_dtoa_r+0x6be>
 8005144:	9a04      	ldr	r2, [sp, #16]
 8005146:	3201      	adds	r2, #1
 8005148:	9204      	str	r2, [sp, #16]
 800514a:	2230      	movs	r2, #48	@ 0x30
 800514c:	f88a 2000 	strb.w	r2, [sl]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	3201      	adds	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e7bd      	b.n	80050d4 <_dtoa_r+0x65c>
 8005158:	2200      	movs	r2, #0
 800515a:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <_dtoa_r+0x708>)
 800515c:	f7fb f9bc 	bl	80004d8 <__aeabi_dmul>
 8005160:	2200      	movs	r2, #0
 8005162:	2300      	movs	r3, #0
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
 8005168:	f7fb fc1e 	bl	80009a8 <__aeabi_dcmpeq>
 800516c:	2800      	cmp	r0, #0
 800516e:	f43f aebc 	beq.w	8004eea <_dtoa_r+0x472>
 8005172:	e6f1      	b.n	8004f58 <_dtoa_r+0x4e0>
 8005174:	080067c0 	.word	0x080067c0
 8005178:	3fe00000 	.word	0x3fe00000
 800517c:	3ff00000 	.word	0x3ff00000
 8005180:	40240000 	.word	0x40240000
 8005184:	40140000 	.word	0x40140000
 8005188:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800518a:	2a00      	cmp	r2, #0
 800518c:	f000 80db 	beq.w	8005346 <_dtoa_r+0x8ce>
 8005190:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005192:	2a01      	cmp	r2, #1
 8005194:	f300 80bf 	bgt.w	8005316 <_dtoa_r+0x89e>
 8005198:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800519a:	2a00      	cmp	r2, #0
 800519c:	f000 80b7 	beq.w	800530e <_dtoa_r+0x896>
 80051a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80051a4:	4646      	mov	r6, r8
 80051a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051aa:	2101      	movs	r1, #1
 80051ac:	441a      	add	r2, r3
 80051ae:	4658      	mov	r0, fp
 80051b0:	4498      	add	r8, r3
 80051b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80051b4:	f000 fc1a 	bl	80059ec <__i2b>
 80051b8:	4605      	mov	r5, r0
 80051ba:	b15e      	cbz	r6, 80051d4 <_dtoa_r+0x75c>
 80051bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dd08      	ble.n	80051d4 <_dtoa_r+0x75c>
 80051c2:	42b3      	cmp	r3, r6
 80051c4:	bfa8      	it	ge
 80051c6:	4633      	movge	r3, r6
 80051c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051ca:	eba8 0803 	sub.w	r8, r8, r3
 80051ce:	1af6      	subs	r6, r6, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051d6:	b1f3      	cbz	r3, 8005216 <_dtoa_r+0x79e>
 80051d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80b7 	beq.w	800534e <_dtoa_r+0x8d6>
 80051e0:	b18c      	cbz	r4, 8005206 <_dtoa_r+0x78e>
 80051e2:	4629      	mov	r1, r5
 80051e4:	4622      	mov	r2, r4
 80051e6:	4658      	mov	r0, fp
 80051e8:	f000 fcbe 	bl	8005b68 <__pow5mult>
 80051ec:	464a      	mov	r2, r9
 80051ee:	4601      	mov	r1, r0
 80051f0:	4605      	mov	r5, r0
 80051f2:	4658      	mov	r0, fp
 80051f4:	f000 fc10 	bl	8005a18 <__multiply>
 80051f8:	4649      	mov	r1, r9
 80051fa:	9004      	str	r0, [sp, #16]
 80051fc:	4658      	mov	r0, fp
 80051fe:	f000 fb41 	bl	8005884 <_Bfree>
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	4699      	mov	r9, r3
 8005206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005208:	1b1a      	subs	r2, r3, r4
 800520a:	d004      	beq.n	8005216 <_dtoa_r+0x79e>
 800520c:	4649      	mov	r1, r9
 800520e:	4658      	mov	r0, fp
 8005210:	f000 fcaa 	bl	8005b68 <__pow5mult>
 8005214:	4681      	mov	r9, r0
 8005216:	2101      	movs	r1, #1
 8005218:	4658      	mov	r0, fp
 800521a:	f000 fbe7 	bl	80059ec <__i2b>
 800521e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005220:	4604      	mov	r4, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 81c9 	beq.w	80055ba <_dtoa_r+0xb42>
 8005228:	461a      	mov	r2, r3
 800522a:	4601      	mov	r1, r0
 800522c:	4658      	mov	r0, fp
 800522e:	f000 fc9b 	bl	8005b68 <__pow5mult>
 8005232:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005234:	4604      	mov	r4, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	f300 808f 	bgt.w	800535a <_dtoa_r+0x8e2>
 800523c:	9b02      	ldr	r3, [sp, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8087 	bne.w	8005352 <_dtoa_r+0x8da>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 8083 	bne.w	8005356 <_dtoa_r+0x8de>
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005256:	0d1b      	lsrs	r3, r3, #20
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	b12b      	cbz	r3, 8005268 <_dtoa_r+0x7f0>
 800525c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525e:	f108 0801 	add.w	r8, r8, #1
 8005262:	3301      	adds	r3, #1
 8005264:	9309      	str	r3, [sp, #36]	@ 0x24
 8005266:	2301      	movs	r3, #1
 8005268:	930a      	str	r3, [sp, #40]	@ 0x28
 800526a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 81aa 	beq.w	80055c6 <_dtoa_r+0xb4e>
 8005272:	6923      	ldr	r3, [r4, #16]
 8005274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005278:	6918      	ldr	r0, [r3, #16]
 800527a:	f000 fb6b 	bl	8005954 <__hi0bits>
 800527e:	f1c0 0020 	rsb	r0, r0, #32
 8005282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005284:	4418      	add	r0, r3
 8005286:	f010 001f 	ands.w	r0, r0, #31
 800528a:	d071      	beq.n	8005370 <_dtoa_r+0x8f8>
 800528c:	f1c0 0320 	rsb	r3, r0, #32
 8005290:	2b04      	cmp	r3, #4
 8005292:	dd65      	ble.n	8005360 <_dtoa_r+0x8e8>
 8005294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005296:	f1c0 001c 	rsb	r0, r0, #28
 800529a:	4403      	add	r3, r0
 800529c:	4480      	add	r8, r0
 800529e:	4406      	add	r6, r0
 80052a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052a2:	f1b8 0f00 	cmp.w	r8, #0
 80052a6:	dd05      	ble.n	80052b4 <_dtoa_r+0x83c>
 80052a8:	4649      	mov	r1, r9
 80052aa:	4642      	mov	r2, r8
 80052ac:	4658      	mov	r0, fp
 80052ae:	f000 fcb5 	bl	8005c1c <__lshift>
 80052b2:	4681      	mov	r9, r0
 80052b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	dd05      	ble.n	80052c6 <_dtoa_r+0x84e>
 80052ba:	4621      	mov	r1, r4
 80052bc:	461a      	mov	r2, r3
 80052be:	4658      	mov	r0, fp
 80052c0:	f000 fcac 	bl	8005c1c <__lshift>
 80052c4:	4604      	mov	r4, r0
 80052c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d053      	beq.n	8005374 <_dtoa_r+0x8fc>
 80052cc:	4621      	mov	r1, r4
 80052ce:	4648      	mov	r0, r9
 80052d0:	f000 fd10 	bl	8005cf4 <__mcmp>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	da4d      	bge.n	8005374 <_dtoa_r+0x8fc>
 80052d8:	1e7b      	subs	r3, r7, #1
 80052da:	4649      	mov	r1, r9
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	220a      	movs	r2, #10
 80052e0:	2300      	movs	r3, #0
 80052e2:	4658      	mov	r0, fp
 80052e4:	f000 faf0 	bl	80058c8 <__multadd>
 80052e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ea:	4681      	mov	r9, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 816c 	beq.w	80055ca <_dtoa_r+0xb52>
 80052f2:	2300      	movs	r3, #0
 80052f4:	4629      	mov	r1, r5
 80052f6:	220a      	movs	r2, #10
 80052f8:	4658      	mov	r0, fp
 80052fa:	f000 fae5 	bl	80058c8 <__multadd>
 80052fe:	9b08      	ldr	r3, [sp, #32]
 8005300:	4605      	mov	r5, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	dc61      	bgt.n	80053ca <_dtoa_r+0x952>
 8005306:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005308:	2b02      	cmp	r3, #2
 800530a:	dc3b      	bgt.n	8005384 <_dtoa_r+0x90c>
 800530c:	e05d      	b.n	80053ca <_dtoa_r+0x952>
 800530e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005310:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005314:	e746      	b.n	80051a4 <_dtoa_r+0x72c>
 8005316:	9b07      	ldr	r3, [sp, #28]
 8005318:	1e5c      	subs	r4, r3, #1
 800531a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800531c:	42a3      	cmp	r3, r4
 800531e:	bfbf      	itttt	lt
 8005320:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005322:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005324:	1ae3      	sublt	r3, r4, r3
 8005326:	18d2      	addlt	r2, r2, r3
 8005328:	bfa8      	it	ge
 800532a:	1b1c      	subge	r4, r3, r4
 800532c:	9b07      	ldr	r3, [sp, #28]
 800532e:	bfbe      	ittt	lt
 8005330:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005332:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005334:	2400      	movlt	r4, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfb5      	itete	lt
 800533a:	eba8 0603 	sublt.w	r6, r8, r3
 800533e:	4646      	movge	r6, r8
 8005340:	2300      	movlt	r3, #0
 8005342:	9b07      	ldrge	r3, [sp, #28]
 8005344:	e730      	b.n	80051a8 <_dtoa_r+0x730>
 8005346:	4646      	mov	r6, r8
 8005348:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800534a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800534c:	e735      	b.n	80051ba <_dtoa_r+0x742>
 800534e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005350:	e75c      	b.n	800520c <_dtoa_r+0x794>
 8005352:	2300      	movs	r3, #0
 8005354:	e788      	b.n	8005268 <_dtoa_r+0x7f0>
 8005356:	9b02      	ldr	r3, [sp, #8]
 8005358:	e786      	b.n	8005268 <_dtoa_r+0x7f0>
 800535a:	2300      	movs	r3, #0
 800535c:	930a      	str	r3, [sp, #40]	@ 0x28
 800535e:	e788      	b.n	8005272 <_dtoa_r+0x7fa>
 8005360:	d09f      	beq.n	80052a2 <_dtoa_r+0x82a>
 8005362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005364:	331c      	adds	r3, #28
 8005366:	441a      	add	r2, r3
 8005368:	4498      	add	r8, r3
 800536a:	441e      	add	r6, r3
 800536c:	9209      	str	r2, [sp, #36]	@ 0x24
 800536e:	e798      	b.n	80052a2 <_dtoa_r+0x82a>
 8005370:	4603      	mov	r3, r0
 8005372:	e7f6      	b.n	8005362 <_dtoa_r+0x8ea>
 8005374:	9b07      	ldr	r3, [sp, #28]
 8005376:	9704      	str	r7, [sp, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	dc20      	bgt.n	80053be <_dtoa_r+0x946>
 800537c:	9308      	str	r3, [sp, #32]
 800537e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005380:	2b02      	cmp	r3, #2
 8005382:	dd1e      	ble.n	80053c2 <_dtoa_r+0x94a>
 8005384:	9b08      	ldr	r3, [sp, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f47f aebc 	bne.w	8005104 <_dtoa_r+0x68c>
 800538c:	4621      	mov	r1, r4
 800538e:	2205      	movs	r2, #5
 8005390:	4658      	mov	r0, fp
 8005392:	f000 fa99 	bl	80058c8 <__multadd>
 8005396:	4601      	mov	r1, r0
 8005398:	4604      	mov	r4, r0
 800539a:	4648      	mov	r0, r9
 800539c:	f000 fcaa 	bl	8005cf4 <__mcmp>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f77f aeaf 	ble.w	8005104 <_dtoa_r+0x68c>
 80053a6:	2331      	movs	r3, #49	@ 0x31
 80053a8:	4656      	mov	r6, sl
 80053aa:	f806 3b01 	strb.w	r3, [r6], #1
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	3301      	adds	r3, #1
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	e6aa      	b.n	800510c <_dtoa_r+0x694>
 80053b6:	9c07      	ldr	r4, [sp, #28]
 80053b8:	9704      	str	r7, [sp, #16]
 80053ba:	4625      	mov	r5, r4
 80053bc:	e7f3      	b.n	80053a6 <_dtoa_r+0x92e>
 80053be:	9b07      	ldr	r3, [sp, #28]
 80053c0:	9308      	str	r3, [sp, #32]
 80053c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8104 	beq.w	80055d2 <_dtoa_r+0xb5a>
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	dd05      	ble.n	80053da <_dtoa_r+0x962>
 80053ce:	4629      	mov	r1, r5
 80053d0:	4632      	mov	r2, r6
 80053d2:	4658      	mov	r0, fp
 80053d4:	f000 fc22 	bl	8005c1c <__lshift>
 80053d8:	4605      	mov	r5, r0
 80053da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05a      	beq.n	8005496 <_dtoa_r+0xa1e>
 80053e0:	4658      	mov	r0, fp
 80053e2:	6869      	ldr	r1, [r5, #4]
 80053e4:	f000 fa0e 	bl	8005804 <_Balloc>
 80053e8:	4606      	mov	r6, r0
 80053ea:	b928      	cbnz	r0, 80053f8 <_dtoa_r+0x980>
 80053ec:	4602      	mov	r2, r0
 80053ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80053f2:	4b83      	ldr	r3, [pc, #524]	@ (8005600 <_dtoa_r+0xb88>)
 80053f4:	f7ff bb54 	b.w	8004aa0 <_dtoa_r+0x28>
 80053f8:	692a      	ldr	r2, [r5, #16]
 80053fa:	f105 010c 	add.w	r1, r5, #12
 80053fe:	3202      	adds	r2, #2
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	300c      	adds	r0, #12
 8005404:	f7ff faa1 	bl	800494a <memcpy>
 8005408:	2201      	movs	r2, #1
 800540a:	4631      	mov	r1, r6
 800540c:	4658      	mov	r0, fp
 800540e:	f000 fc05 	bl	8005c1c <__lshift>
 8005412:	462f      	mov	r7, r5
 8005414:	4605      	mov	r5, r0
 8005416:	f10a 0301 	add.w	r3, sl, #1
 800541a:	9307      	str	r3, [sp, #28]
 800541c:	9b08      	ldr	r3, [sp, #32]
 800541e:	4453      	add	r3, sl
 8005420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005422:	9b02      	ldr	r3, [sp, #8]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	930a      	str	r3, [sp, #40]	@ 0x28
 800542a:	9b07      	ldr	r3, [sp, #28]
 800542c:	4621      	mov	r1, r4
 800542e:	3b01      	subs	r3, #1
 8005430:	4648      	mov	r0, r9
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	f7ff fa97 	bl	8004966 <quorem>
 8005438:	4639      	mov	r1, r7
 800543a:	9008      	str	r0, [sp, #32]
 800543c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005440:	4648      	mov	r0, r9
 8005442:	f000 fc57 	bl	8005cf4 <__mcmp>
 8005446:	462a      	mov	r2, r5
 8005448:	9009      	str	r0, [sp, #36]	@ 0x24
 800544a:	4621      	mov	r1, r4
 800544c:	4658      	mov	r0, fp
 800544e:	f000 fc6d 	bl	8005d2c <__mdiff>
 8005452:	68c2      	ldr	r2, [r0, #12]
 8005454:	4606      	mov	r6, r0
 8005456:	bb02      	cbnz	r2, 800549a <_dtoa_r+0xa22>
 8005458:	4601      	mov	r1, r0
 800545a:	4648      	mov	r0, r9
 800545c:	f000 fc4a 	bl	8005cf4 <__mcmp>
 8005460:	4602      	mov	r2, r0
 8005462:	4631      	mov	r1, r6
 8005464:	4658      	mov	r0, fp
 8005466:	920c      	str	r2, [sp, #48]	@ 0x30
 8005468:	f000 fa0c 	bl	8005884 <_Bfree>
 800546c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800546e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005470:	9e07      	ldr	r6, [sp, #28]
 8005472:	ea43 0102 	orr.w	r1, r3, r2
 8005476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005478:	4319      	orrs	r1, r3
 800547a:	d110      	bne.n	800549e <_dtoa_r+0xa26>
 800547c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005480:	d029      	beq.n	80054d6 <_dtoa_r+0xa5e>
 8005482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	dd02      	ble.n	800548e <_dtoa_r+0xa16>
 8005488:	9b08      	ldr	r3, [sp, #32]
 800548a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800548e:	9b02      	ldr	r3, [sp, #8]
 8005490:	f883 8000 	strb.w	r8, [r3]
 8005494:	e63b      	b.n	800510e <_dtoa_r+0x696>
 8005496:	4628      	mov	r0, r5
 8005498:	e7bb      	b.n	8005412 <_dtoa_r+0x99a>
 800549a:	2201      	movs	r2, #1
 800549c:	e7e1      	b.n	8005462 <_dtoa_r+0x9ea>
 800549e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db04      	blt.n	80054ae <_dtoa_r+0xa36>
 80054a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80054a6:	430b      	orrs	r3, r1
 80054a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054aa:	430b      	orrs	r3, r1
 80054ac:	d120      	bne.n	80054f0 <_dtoa_r+0xa78>
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	dded      	ble.n	800548e <_dtoa_r+0xa16>
 80054b2:	4649      	mov	r1, r9
 80054b4:	2201      	movs	r2, #1
 80054b6:	4658      	mov	r0, fp
 80054b8:	f000 fbb0 	bl	8005c1c <__lshift>
 80054bc:	4621      	mov	r1, r4
 80054be:	4681      	mov	r9, r0
 80054c0:	f000 fc18 	bl	8005cf4 <__mcmp>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	dc03      	bgt.n	80054d0 <_dtoa_r+0xa58>
 80054c8:	d1e1      	bne.n	800548e <_dtoa_r+0xa16>
 80054ca:	f018 0f01 	tst.w	r8, #1
 80054ce:	d0de      	beq.n	800548e <_dtoa_r+0xa16>
 80054d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054d4:	d1d8      	bne.n	8005488 <_dtoa_r+0xa10>
 80054d6:	2339      	movs	r3, #57	@ 0x39
 80054d8:	9a02      	ldr	r2, [sp, #8]
 80054da:	7013      	strb	r3, [r2, #0]
 80054dc:	4633      	mov	r3, r6
 80054de:	461e      	mov	r6, r3
 80054e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	2a39      	cmp	r2, #57	@ 0x39
 80054e8:	d052      	beq.n	8005590 <_dtoa_r+0xb18>
 80054ea:	3201      	adds	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e60e      	b.n	800510e <_dtoa_r+0x696>
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	dd07      	ble.n	8005504 <_dtoa_r+0xa8c>
 80054f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054f8:	d0ed      	beq.n	80054d6 <_dtoa_r+0xa5e>
 80054fa:	9a02      	ldr	r2, [sp, #8]
 80054fc:	f108 0301 	add.w	r3, r8, #1
 8005500:	7013      	strb	r3, [r2, #0]
 8005502:	e604      	b.n	800510e <_dtoa_r+0x696>
 8005504:	9b07      	ldr	r3, [sp, #28]
 8005506:	9a07      	ldr	r2, [sp, #28]
 8005508:	f803 8c01 	strb.w	r8, [r3, #-1]
 800550c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800550e:	4293      	cmp	r3, r2
 8005510:	d028      	beq.n	8005564 <_dtoa_r+0xaec>
 8005512:	4649      	mov	r1, r9
 8005514:	2300      	movs	r3, #0
 8005516:	220a      	movs	r2, #10
 8005518:	4658      	mov	r0, fp
 800551a:	f000 f9d5 	bl	80058c8 <__multadd>
 800551e:	42af      	cmp	r7, r5
 8005520:	4681      	mov	r9, r0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	f04f 020a 	mov.w	r2, #10
 800552a:	4639      	mov	r1, r7
 800552c:	4658      	mov	r0, fp
 800552e:	d107      	bne.n	8005540 <_dtoa_r+0xac8>
 8005530:	f000 f9ca 	bl	80058c8 <__multadd>
 8005534:	4607      	mov	r7, r0
 8005536:	4605      	mov	r5, r0
 8005538:	9b07      	ldr	r3, [sp, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	9307      	str	r3, [sp, #28]
 800553e:	e774      	b.n	800542a <_dtoa_r+0x9b2>
 8005540:	f000 f9c2 	bl	80058c8 <__multadd>
 8005544:	4629      	mov	r1, r5
 8005546:	4607      	mov	r7, r0
 8005548:	2300      	movs	r3, #0
 800554a:	220a      	movs	r2, #10
 800554c:	4658      	mov	r0, fp
 800554e:	f000 f9bb 	bl	80058c8 <__multadd>
 8005552:	4605      	mov	r5, r0
 8005554:	e7f0      	b.n	8005538 <_dtoa_r+0xac0>
 8005556:	9b08      	ldr	r3, [sp, #32]
 8005558:	2700      	movs	r7, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfcc      	ite	gt
 800555e:	461e      	movgt	r6, r3
 8005560:	2601      	movle	r6, #1
 8005562:	4456      	add	r6, sl
 8005564:	4649      	mov	r1, r9
 8005566:	2201      	movs	r2, #1
 8005568:	4658      	mov	r0, fp
 800556a:	f000 fb57 	bl	8005c1c <__lshift>
 800556e:	4621      	mov	r1, r4
 8005570:	4681      	mov	r9, r0
 8005572:	f000 fbbf 	bl	8005cf4 <__mcmp>
 8005576:	2800      	cmp	r0, #0
 8005578:	dcb0      	bgt.n	80054dc <_dtoa_r+0xa64>
 800557a:	d102      	bne.n	8005582 <_dtoa_r+0xb0a>
 800557c:	f018 0f01 	tst.w	r8, #1
 8005580:	d1ac      	bne.n	80054dc <_dtoa_r+0xa64>
 8005582:	4633      	mov	r3, r6
 8005584:	461e      	mov	r6, r3
 8005586:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800558a:	2a30      	cmp	r2, #48	@ 0x30
 800558c:	d0fa      	beq.n	8005584 <_dtoa_r+0xb0c>
 800558e:	e5be      	b.n	800510e <_dtoa_r+0x696>
 8005590:	459a      	cmp	sl, r3
 8005592:	d1a4      	bne.n	80054de <_dtoa_r+0xa66>
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	3301      	adds	r3, #1
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	2331      	movs	r3, #49	@ 0x31
 800559c:	f88a 3000 	strb.w	r3, [sl]
 80055a0:	e5b5      	b.n	800510e <_dtoa_r+0x696>
 80055a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80055a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005604 <_dtoa_r+0xb8c>
 80055a8:	b11b      	cbz	r3, 80055b2 <_dtoa_r+0xb3a>
 80055aa:	f10a 0308 	add.w	r3, sl, #8
 80055ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	4650      	mov	r0, sl
 80055b4:	b017      	add	sp, #92	@ 0x5c
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f77f ae3d 	ble.w	800523c <_dtoa_r+0x7c4>
 80055c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80055c6:	2001      	movs	r0, #1
 80055c8:	e65b      	b.n	8005282 <_dtoa_r+0x80a>
 80055ca:	9b08      	ldr	r3, [sp, #32]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f77f aed6 	ble.w	800537e <_dtoa_r+0x906>
 80055d2:	4656      	mov	r6, sl
 80055d4:	4621      	mov	r1, r4
 80055d6:	4648      	mov	r0, r9
 80055d8:	f7ff f9c5 	bl	8004966 <quorem>
 80055dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055e0:	9b08      	ldr	r3, [sp, #32]
 80055e2:	f806 8b01 	strb.w	r8, [r6], #1
 80055e6:	eba6 020a 	sub.w	r2, r6, sl
 80055ea:	4293      	cmp	r3, r2
 80055ec:	ddb3      	ble.n	8005556 <_dtoa_r+0xade>
 80055ee:	4649      	mov	r1, r9
 80055f0:	2300      	movs	r3, #0
 80055f2:	220a      	movs	r2, #10
 80055f4:	4658      	mov	r0, fp
 80055f6:	f000 f967 	bl	80058c8 <__multadd>
 80055fa:	4681      	mov	r9, r0
 80055fc:	e7ea      	b.n	80055d4 <_dtoa_r+0xb5c>
 80055fe:	bf00      	nop
 8005600:	0800671e 	.word	0x0800671e
 8005604:	080066a2 	.word	0x080066a2

08005608 <_free_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4605      	mov	r5, r0
 800560c:	2900      	cmp	r1, #0
 800560e:	d040      	beq.n	8005692 <_free_r+0x8a>
 8005610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005614:	1f0c      	subs	r4, r1, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	bfb8      	it	lt
 800561a:	18e4      	addlt	r4, r4, r3
 800561c:	f000 f8e6 	bl	80057ec <__malloc_lock>
 8005620:	4a1c      	ldr	r2, [pc, #112]	@ (8005694 <_free_r+0x8c>)
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	b933      	cbnz	r3, 8005634 <_free_r+0x2c>
 8005626:	6063      	str	r3, [r4, #4]
 8005628:	6014      	str	r4, [r2, #0]
 800562a:	4628      	mov	r0, r5
 800562c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005630:	f000 b8e2 	b.w	80057f8 <__malloc_unlock>
 8005634:	42a3      	cmp	r3, r4
 8005636:	d908      	bls.n	800564a <_free_r+0x42>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	1821      	adds	r1, r4, r0
 800563c:	428b      	cmp	r3, r1
 800563e:	bf01      	itttt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	1809      	addeq	r1, r1, r0
 8005646:	6021      	streq	r1, [r4, #0]
 8005648:	e7ed      	b.n	8005626 <_free_r+0x1e>
 800564a:	461a      	mov	r2, r3
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b10b      	cbz	r3, 8005654 <_free_r+0x4c>
 8005650:	42a3      	cmp	r3, r4
 8005652:	d9fa      	bls.n	800564a <_free_r+0x42>
 8005654:	6811      	ldr	r1, [r2, #0]
 8005656:	1850      	adds	r0, r2, r1
 8005658:	42a0      	cmp	r0, r4
 800565a:	d10b      	bne.n	8005674 <_free_r+0x6c>
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	4401      	add	r1, r0
 8005660:	1850      	adds	r0, r2, r1
 8005662:	4283      	cmp	r3, r0
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	d1e0      	bne.n	800562a <_free_r+0x22>
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4408      	add	r0, r1
 800566e:	6010      	str	r0, [r2, #0]
 8005670:	6053      	str	r3, [r2, #4]
 8005672:	e7da      	b.n	800562a <_free_r+0x22>
 8005674:	d902      	bls.n	800567c <_free_r+0x74>
 8005676:	230c      	movs	r3, #12
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	e7d6      	b.n	800562a <_free_r+0x22>
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	1821      	adds	r1, r4, r0
 8005680:	428b      	cmp	r3, r1
 8005682:	bf01      	itttt	eq
 8005684:	6819      	ldreq	r1, [r3, #0]
 8005686:	685b      	ldreq	r3, [r3, #4]
 8005688:	1809      	addeq	r1, r1, r0
 800568a:	6021      	streq	r1, [r4, #0]
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	6054      	str	r4, [r2, #4]
 8005690:	e7cb      	b.n	800562a <_free_r+0x22>
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	20000638 	.word	0x20000638

08005698 <malloc>:
 8005698:	4b02      	ldr	r3, [pc, #8]	@ (80056a4 <malloc+0xc>)
 800569a:	4601      	mov	r1, r0
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	f000 b825 	b.w	80056ec <_malloc_r>
 80056a2:	bf00      	nop
 80056a4:	20000018 	.word	0x20000018

080056a8 <sbrk_aligned>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4e0f      	ldr	r6, [pc, #60]	@ (80056e8 <sbrk_aligned+0x40>)
 80056ac:	460c      	mov	r4, r1
 80056ae:	6831      	ldr	r1, [r6, #0]
 80056b0:	4605      	mov	r5, r0
 80056b2:	b911      	cbnz	r1, 80056ba <sbrk_aligned+0x12>
 80056b4:	f000 fe92 	bl	80063dc <_sbrk_r>
 80056b8:	6030      	str	r0, [r6, #0]
 80056ba:	4621      	mov	r1, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 fe8d 	bl	80063dc <_sbrk_r>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d103      	bne.n	80056ce <sbrk_aligned+0x26>
 80056c6:	f04f 34ff 	mov.w	r4, #4294967295
 80056ca:	4620      	mov	r0, r4
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	1cc4      	adds	r4, r0, #3
 80056d0:	f024 0403 	bic.w	r4, r4, #3
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d0f8      	beq.n	80056ca <sbrk_aligned+0x22>
 80056d8:	1a21      	subs	r1, r4, r0
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 fe7e 	bl	80063dc <_sbrk_r>
 80056e0:	3001      	adds	r0, #1
 80056e2:	d1f2      	bne.n	80056ca <sbrk_aligned+0x22>
 80056e4:	e7ef      	b.n	80056c6 <sbrk_aligned+0x1e>
 80056e6:	bf00      	nop
 80056e8:	20000634 	.word	0x20000634

080056ec <_malloc_r>:
 80056ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	1ccd      	adds	r5, r1, #3
 80056f2:	f025 0503 	bic.w	r5, r5, #3
 80056f6:	3508      	adds	r5, #8
 80056f8:	2d0c      	cmp	r5, #12
 80056fa:	bf38      	it	cc
 80056fc:	250c      	movcc	r5, #12
 80056fe:	2d00      	cmp	r5, #0
 8005700:	4606      	mov	r6, r0
 8005702:	db01      	blt.n	8005708 <_malloc_r+0x1c>
 8005704:	42a9      	cmp	r1, r5
 8005706:	d904      	bls.n	8005712 <_malloc_r+0x26>
 8005708:	230c      	movs	r3, #12
 800570a:	6033      	str	r3, [r6, #0]
 800570c:	2000      	movs	r0, #0
 800570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057e8 <_malloc_r+0xfc>
 8005716:	f000 f869 	bl	80057ec <__malloc_lock>
 800571a:	f8d8 3000 	ldr.w	r3, [r8]
 800571e:	461c      	mov	r4, r3
 8005720:	bb44      	cbnz	r4, 8005774 <_malloc_r+0x88>
 8005722:	4629      	mov	r1, r5
 8005724:	4630      	mov	r0, r6
 8005726:	f7ff ffbf 	bl	80056a8 <sbrk_aligned>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	4604      	mov	r4, r0
 800572e:	d158      	bne.n	80057e2 <_malloc_r+0xf6>
 8005730:	f8d8 4000 	ldr.w	r4, [r8]
 8005734:	4627      	mov	r7, r4
 8005736:	2f00      	cmp	r7, #0
 8005738:	d143      	bne.n	80057c2 <_malloc_r+0xd6>
 800573a:	2c00      	cmp	r4, #0
 800573c:	d04b      	beq.n	80057d6 <_malloc_r+0xea>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	4639      	mov	r1, r7
 8005742:	4630      	mov	r0, r6
 8005744:	eb04 0903 	add.w	r9, r4, r3
 8005748:	f000 fe48 	bl	80063dc <_sbrk_r>
 800574c:	4581      	cmp	r9, r0
 800574e:	d142      	bne.n	80057d6 <_malloc_r+0xea>
 8005750:	6821      	ldr	r1, [r4, #0]
 8005752:	4630      	mov	r0, r6
 8005754:	1a6d      	subs	r5, r5, r1
 8005756:	4629      	mov	r1, r5
 8005758:	f7ff ffa6 	bl	80056a8 <sbrk_aligned>
 800575c:	3001      	adds	r0, #1
 800575e:	d03a      	beq.n	80057d6 <_malloc_r+0xea>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	442b      	add	r3, r5
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	f8d8 3000 	ldr.w	r3, [r8]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	bb62      	cbnz	r2, 80057c8 <_malloc_r+0xdc>
 800576e:	f8c8 7000 	str.w	r7, [r8]
 8005772:	e00f      	b.n	8005794 <_malloc_r+0xa8>
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	1b52      	subs	r2, r2, r5
 8005778:	d420      	bmi.n	80057bc <_malloc_r+0xd0>
 800577a:	2a0b      	cmp	r2, #11
 800577c:	d917      	bls.n	80057ae <_malloc_r+0xc2>
 800577e:	1961      	adds	r1, r4, r5
 8005780:	42a3      	cmp	r3, r4
 8005782:	6025      	str	r5, [r4, #0]
 8005784:	bf18      	it	ne
 8005786:	6059      	strne	r1, [r3, #4]
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	bf08      	it	eq
 800578c:	f8c8 1000 	streq.w	r1, [r8]
 8005790:	5162      	str	r2, [r4, r5]
 8005792:	604b      	str	r3, [r1, #4]
 8005794:	4630      	mov	r0, r6
 8005796:	f000 f82f 	bl	80057f8 <__malloc_unlock>
 800579a:	f104 000b 	add.w	r0, r4, #11
 800579e:	1d23      	adds	r3, r4, #4
 80057a0:	f020 0007 	bic.w	r0, r0, #7
 80057a4:	1ac2      	subs	r2, r0, r3
 80057a6:	bf1c      	itt	ne
 80057a8:	1a1b      	subne	r3, r3, r0
 80057aa:	50a3      	strne	r3, [r4, r2]
 80057ac:	e7af      	b.n	800570e <_malloc_r+0x22>
 80057ae:	6862      	ldr	r2, [r4, #4]
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	bf0c      	ite	eq
 80057b4:	f8c8 2000 	streq.w	r2, [r8]
 80057b8:	605a      	strne	r2, [r3, #4]
 80057ba:	e7eb      	b.n	8005794 <_malloc_r+0xa8>
 80057bc:	4623      	mov	r3, r4
 80057be:	6864      	ldr	r4, [r4, #4]
 80057c0:	e7ae      	b.n	8005720 <_malloc_r+0x34>
 80057c2:	463c      	mov	r4, r7
 80057c4:	687f      	ldr	r7, [r7, #4]
 80057c6:	e7b6      	b.n	8005736 <_malloc_r+0x4a>
 80057c8:	461a      	mov	r2, r3
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d1fb      	bne.n	80057c8 <_malloc_r+0xdc>
 80057d0:	2300      	movs	r3, #0
 80057d2:	6053      	str	r3, [r2, #4]
 80057d4:	e7de      	b.n	8005794 <_malloc_r+0xa8>
 80057d6:	230c      	movs	r3, #12
 80057d8:	4630      	mov	r0, r6
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	f000 f80c 	bl	80057f8 <__malloc_unlock>
 80057e0:	e794      	b.n	800570c <_malloc_r+0x20>
 80057e2:	6005      	str	r5, [r0, #0]
 80057e4:	e7d6      	b.n	8005794 <_malloc_r+0xa8>
 80057e6:	bf00      	nop
 80057e8:	20000638 	.word	0x20000638

080057ec <__malloc_lock>:
 80057ec:	4801      	ldr	r0, [pc, #4]	@ (80057f4 <__malloc_lock+0x8>)
 80057ee:	f7ff b89c 	b.w	800492a <__retarget_lock_acquire_recursive>
 80057f2:	bf00      	nop
 80057f4:	20000630 	.word	0x20000630

080057f8 <__malloc_unlock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	@ (8005800 <__malloc_unlock+0x8>)
 80057fa:	f7ff b897 	b.w	800492c <__retarget_lock_release_recursive>
 80057fe:	bf00      	nop
 8005800:	20000630 	.word	0x20000630

08005804 <_Balloc>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	69c6      	ldr	r6, [r0, #28]
 8005808:	4604      	mov	r4, r0
 800580a:	460d      	mov	r5, r1
 800580c:	b976      	cbnz	r6, 800582c <_Balloc+0x28>
 800580e:	2010      	movs	r0, #16
 8005810:	f7ff ff42 	bl	8005698 <malloc>
 8005814:	4602      	mov	r2, r0
 8005816:	61e0      	str	r0, [r4, #28]
 8005818:	b920      	cbnz	r0, 8005824 <_Balloc+0x20>
 800581a:	216b      	movs	r1, #107	@ 0x6b
 800581c:	4b17      	ldr	r3, [pc, #92]	@ (800587c <_Balloc+0x78>)
 800581e:	4818      	ldr	r0, [pc, #96]	@ (8005880 <_Balloc+0x7c>)
 8005820:	f000 fdec 	bl	80063fc <__assert_func>
 8005824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005828:	6006      	str	r6, [r0, #0]
 800582a:	60c6      	str	r6, [r0, #12]
 800582c:	69e6      	ldr	r6, [r4, #28]
 800582e:	68f3      	ldr	r3, [r6, #12]
 8005830:	b183      	cbz	r3, 8005854 <_Balloc+0x50>
 8005832:	69e3      	ldr	r3, [r4, #28]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800583a:	b9b8      	cbnz	r0, 800586c <_Balloc+0x68>
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f605 	lsl.w	r6, r1, r5
 8005842:	1d72      	adds	r2, r6, #5
 8005844:	4620      	mov	r0, r4
 8005846:	0092      	lsls	r2, r2, #2
 8005848:	f000 fdf6 	bl	8006438 <_calloc_r>
 800584c:	b160      	cbz	r0, 8005868 <_Balloc+0x64>
 800584e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005852:	e00e      	b.n	8005872 <_Balloc+0x6e>
 8005854:	2221      	movs	r2, #33	@ 0x21
 8005856:	2104      	movs	r1, #4
 8005858:	4620      	mov	r0, r4
 800585a:	f000 fded 	bl	8006438 <_calloc_r>
 800585e:	69e3      	ldr	r3, [r4, #28]
 8005860:	60f0      	str	r0, [r6, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e4      	bne.n	8005832 <_Balloc+0x2e>
 8005868:	2000      	movs	r0, #0
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	6802      	ldr	r2, [r0, #0]
 800586e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005872:	2300      	movs	r3, #0
 8005874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005878:	e7f7      	b.n	800586a <_Balloc+0x66>
 800587a:	bf00      	nop
 800587c:	080066af 	.word	0x080066af
 8005880:	0800672f 	.word	0x0800672f

08005884 <_Bfree>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	69c6      	ldr	r6, [r0, #28]
 8005888:	4605      	mov	r5, r0
 800588a:	460c      	mov	r4, r1
 800588c:	b976      	cbnz	r6, 80058ac <_Bfree+0x28>
 800588e:	2010      	movs	r0, #16
 8005890:	f7ff ff02 	bl	8005698 <malloc>
 8005894:	4602      	mov	r2, r0
 8005896:	61e8      	str	r0, [r5, #28]
 8005898:	b920      	cbnz	r0, 80058a4 <_Bfree+0x20>
 800589a:	218f      	movs	r1, #143	@ 0x8f
 800589c:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <_Bfree+0x3c>)
 800589e:	4809      	ldr	r0, [pc, #36]	@ (80058c4 <_Bfree+0x40>)
 80058a0:	f000 fdac 	bl	80063fc <__assert_func>
 80058a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058a8:	6006      	str	r6, [r0, #0]
 80058aa:	60c6      	str	r6, [r0, #12]
 80058ac:	b13c      	cbz	r4, 80058be <_Bfree+0x3a>
 80058ae:	69eb      	ldr	r3, [r5, #28]
 80058b0:	6862      	ldr	r2, [r4, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058b8:	6021      	str	r1, [r4, #0]
 80058ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	080066af 	.word	0x080066af
 80058c4:	0800672f 	.word	0x0800672f

080058c8 <__multadd>:
 80058c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058cc:	4607      	mov	r7, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	461e      	mov	r6, r3
 80058d2:	2000      	movs	r0, #0
 80058d4:	690d      	ldr	r5, [r1, #16]
 80058d6:	f101 0c14 	add.w	ip, r1, #20
 80058da:	f8dc 3000 	ldr.w	r3, [ip]
 80058de:	3001      	adds	r0, #1
 80058e0:	b299      	uxth	r1, r3
 80058e2:	fb02 6101 	mla	r1, r2, r1, r6
 80058e6:	0c1e      	lsrs	r6, r3, #16
 80058e8:	0c0b      	lsrs	r3, r1, #16
 80058ea:	fb02 3306 	mla	r3, r2, r6, r3
 80058ee:	b289      	uxth	r1, r1
 80058f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058f4:	4285      	cmp	r5, r0
 80058f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80058fa:	f84c 1b04 	str.w	r1, [ip], #4
 80058fe:	dcec      	bgt.n	80058da <__multadd+0x12>
 8005900:	b30e      	cbz	r6, 8005946 <__multadd+0x7e>
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	42ab      	cmp	r3, r5
 8005906:	dc19      	bgt.n	800593c <__multadd+0x74>
 8005908:	6861      	ldr	r1, [r4, #4]
 800590a:	4638      	mov	r0, r7
 800590c:	3101      	adds	r1, #1
 800590e:	f7ff ff79 	bl	8005804 <_Balloc>
 8005912:	4680      	mov	r8, r0
 8005914:	b928      	cbnz	r0, 8005922 <__multadd+0x5a>
 8005916:	4602      	mov	r2, r0
 8005918:	21ba      	movs	r1, #186	@ 0xba
 800591a:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <__multadd+0x84>)
 800591c:	480c      	ldr	r0, [pc, #48]	@ (8005950 <__multadd+0x88>)
 800591e:	f000 fd6d 	bl	80063fc <__assert_func>
 8005922:	6922      	ldr	r2, [r4, #16]
 8005924:	f104 010c 	add.w	r1, r4, #12
 8005928:	3202      	adds	r2, #2
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	300c      	adds	r0, #12
 800592e:	f7ff f80c 	bl	800494a <memcpy>
 8005932:	4621      	mov	r1, r4
 8005934:	4638      	mov	r0, r7
 8005936:	f7ff ffa5 	bl	8005884 <_Bfree>
 800593a:	4644      	mov	r4, r8
 800593c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005940:	3501      	adds	r5, #1
 8005942:	615e      	str	r6, [r3, #20]
 8005944:	6125      	str	r5, [r4, #16]
 8005946:	4620      	mov	r0, r4
 8005948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800594c:	0800671e 	.word	0x0800671e
 8005950:	0800672f 	.word	0x0800672f

08005954 <__hi0bits>:
 8005954:	4603      	mov	r3, r0
 8005956:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800595a:	bf3a      	itte	cc
 800595c:	0403      	lslcc	r3, r0, #16
 800595e:	2010      	movcc	r0, #16
 8005960:	2000      	movcs	r0, #0
 8005962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005966:	bf3c      	itt	cc
 8005968:	021b      	lslcc	r3, r3, #8
 800596a:	3008      	addcc	r0, #8
 800596c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005970:	bf3c      	itt	cc
 8005972:	011b      	lslcc	r3, r3, #4
 8005974:	3004      	addcc	r0, #4
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597a:	bf3c      	itt	cc
 800597c:	009b      	lslcc	r3, r3, #2
 800597e:	3002      	addcc	r0, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	db05      	blt.n	8005990 <__hi0bits+0x3c>
 8005984:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005988:	f100 0001 	add.w	r0, r0, #1
 800598c:	bf08      	it	eq
 800598e:	2020      	moveq	r0, #32
 8005990:	4770      	bx	lr

08005992 <__lo0bits>:
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	4602      	mov	r2, r0
 8005996:	f013 0007 	ands.w	r0, r3, #7
 800599a:	d00b      	beq.n	80059b4 <__lo0bits+0x22>
 800599c:	07d9      	lsls	r1, r3, #31
 800599e:	d421      	bmi.n	80059e4 <__lo0bits+0x52>
 80059a0:	0798      	lsls	r0, r3, #30
 80059a2:	bf49      	itett	mi
 80059a4:	085b      	lsrmi	r3, r3, #1
 80059a6:	089b      	lsrpl	r3, r3, #2
 80059a8:	2001      	movmi	r0, #1
 80059aa:	6013      	strmi	r3, [r2, #0]
 80059ac:	bf5c      	itt	pl
 80059ae:	2002      	movpl	r0, #2
 80059b0:	6013      	strpl	r3, [r2, #0]
 80059b2:	4770      	bx	lr
 80059b4:	b299      	uxth	r1, r3
 80059b6:	b909      	cbnz	r1, 80059bc <__lo0bits+0x2a>
 80059b8:	2010      	movs	r0, #16
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	b2d9      	uxtb	r1, r3
 80059be:	b909      	cbnz	r1, 80059c4 <__lo0bits+0x32>
 80059c0:	3008      	adds	r0, #8
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	0719      	lsls	r1, r3, #28
 80059c6:	bf04      	itt	eq
 80059c8:	091b      	lsreq	r3, r3, #4
 80059ca:	3004      	addeq	r0, #4
 80059cc:	0799      	lsls	r1, r3, #30
 80059ce:	bf04      	itt	eq
 80059d0:	089b      	lsreq	r3, r3, #2
 80059d2:	3002      	addeq	r0, #2
 80059d4:	07d9      	lsls	r1, r3, #31
 80059d6:	d403      	bmi.n	80059e0 <__lo0bits+0x4e>
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	f100 0001 	add.w	r0, r0, #1
 80059de:	d003      	beq.n	80059e8 <__lo0bits+0x56>
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4770      	bx	lr
 80059e4:	2000      	movs	r0, #0
 80059e6:	4770      	bx	lr
 80059e8:	2020      	movs	r0, #32
 80059ea:	4770      	bx	lr

080059ec <__i2b>:
 80059ec:	b510      	push	{r4, lr}
 80059ee:	460c      	mov	r4, r1
 80059f0:	2101      	movs	r1, #1
 80059f2:	f7ff ff07 	bl	8005804 <_Balloc>
 80059f6:	4602      	mov	r2, r0
 80059f8:	b928      	cbnz	r0, 8005a06 <__i2b+0x1a>
 80059fa:	f240 1145 	movw	r1, #325	@ 0x145
 80059fe:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <__i2b+0x24>)
 8005a00:	4804      	ldr	r0, [pc, #16]	@ (8005a14 <__i2b+0x28>)
 8005a02:	f000 fcfb 	bl	80063fc <__assert_func>
 8005a06:	2301      	movs	r3, #1
 8005a08:	6144      	str	r4, [r0, #20]
 8005a0a:	6103      	str	r3, [r0, #16]
 8005a0c:	bd10      	pop	{r4, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800671e 	.word	0x0800671e
 8005a14:	0800672f 	.word	0x0800672f

08005a18 <__multiply>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	690a      	ldr	r2, [r1, #16]
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	460f      	mov	r7, r1
 8005a24:	429a      	cmp	r2, r3
 8005a26:	bfa2      	ittt	ge
 8005a28:	4623      	movge	r3, r4
 8005a2a:	460c      	movge	r4, r1
 8005a2c:	461f      	movge	r7, r3
 8005a2e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005a32:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005a36:	68a3      	ldr	r3, [r4, #8]
 8005a38:	6861      	ldr	r1, [r4, #4]
 8005a3a:	eb0a 0609 	add.w	r6, sl, r9
 8005a3e:	42b3      	cmp	r3, r6
 8005a40:	b085      	sub	sp, #20
 8005a42:	bfb8      	it	lt
 8005a44:	3101      	addlt	r1, #1
 8005a46:	f7ff fedd 	bl	8005804 <_Balloc>
 8005a4a:	b930      	cbnz	r0, 8005a5a <__multiply+0x42>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a52:	4b43      	ldr	r3, [pc, #268]	@ (8005b60 <__multiply+0x148>)
 8005a54:	4843      	ldr	r0, [pc, #268]	@ (8005b64 <__multiply+0x14c>)
 8005a56:	f000 fcd1 	bl	80063fc <__assert_func>
 8005a5a:	f100 0514 	add.w	r5, r0, #20
 8005a5e:	462b      	mov	r3, r5
 8005a60:	2200      	movs	r2, #0
 8005a62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a66:	4543      	cmp	r3, r8
 8005a68:	d321      	bcc.n	8005aae <__multiply+0x96>
 8005a6a:	f107 0114 	add.w	r1, r7, #20
 8005a6e:	f104 0214 	add.w	r2, r4, #20
 8005a72:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005a76:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	1b13      	subs	r3, r2, r4
 8005a7e:	3b15      	subs	r3, #21
 8005a80:	f023 0303 	bic.w	r3, r3, #3
 8005a84:	3304      	adds	r3, #4
 8005a86:	f104 0715 	add.w	r7, r4, #21
 8005a8a:	42ba      	cmp	r2, r7
 8005a8c:	bf38      	it	cc
 8005a8e:	2304      	movcc	r3, #4
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	9b02      	ldr	r3, [sp, #8]
 8005a94:	9103      	str	r1, [sp, #12]
 8005a96:	428b      	cmp	r3, r1
 8005a98:	d80c      	bhi.n	8005ab4 <__multiply+0x9c>
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	dd03      	ble.n	8005aa6 <__multiply+0x8e>
 8005a9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d05a      	beq.n	8005b5c <__multiply+0x144>
 8005aa6:	6106      	str	r6, [r0, #16]
 8005aa8:	b005      	add	sp, #20
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	f843 2b04 	str.w	r2, [r3], #4
 8005ab2:	e7d8      	b.n	8005a66 <__multiply+0x4e>
 8005ab4:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ab8:	f1ba 0f00 	cmp.w	sl, #0
 8005abc:	d023      	beq.n	8005b06 <__multiply+0xee>
 8005abe:	46a9      	mov	r9, r5
 8005ac0:	f04f 0c00 	mov.w	ip, #0
 8005ac4:	f104 0e14 	add.w	lr, r4, #20
 8005ac8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005acc:	f8d9 3000 	ldr.w	r3, [r9]
 8005ad0:	fa1f fb87 	uxth.w	fp, r7
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ada:	4463      	add	r3, ip
 8005adc:	f8d9 c000 	ldr.w	ip, [r9]
 8005ae0:	0c3f      	lsrs	r7, r7, #16
 8005ae2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ae6:	fb0a c707 	mla	r7, sl, r7, ip
 8005aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005af4:	4572      	cmp	r2, lr
 8005af6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005afa:	f849 3b04 	str.w	r3, [r9], #4
 8005afe:	d8e3      	bhi.n	8005ac8 <__multiply+0xb0>
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	f845 c003 	str.w	ip, [r5, r3]
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	3104      	adds	r1, #4
 8005b0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b0e:	f1b9 0f00 	cmp.w	r9, #0
 8005b12:	d021      	beq.n	8005b58 <__multiply+0x140>
 8005b14:	46ae      	mov	lr, r5
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	f104 0c14 	add.w	ip, r4, #20
 8005b20:	f8bc b000 	ldrh.w	fp, [ip]
 8005b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	fb09 770b 	mla	r7, r9, fp, r7
 8005b2e:	4457      	add	r7, sl
 8005b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b34:	f84e 3b04 	str.w	r3, [lr], #4
 8005b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b40:	f8be 3000 	ldrh.w	r3, [lr]
 8005b44:	4562      	cmp	r2, ip
 8005b46:	fb09 330a 	mla	r3, r9, sl, r3
 8005b4a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b52:	d8e5      	bhi.n	8005b20 <__multiply+0x108>
 8005b54:	9f01      	ldr	r7, [sp, #4]
 8005b56:	51eb      	str	r3, [r5, r7]
 8005b58:	3504      	adds	r5, #4
 8005b5a:	e79a      	b.n	8005a92 <__multiply+0x7a>
 8005b5c:	3e01      	subs	r6, #1
 8005b5e:	e79c      	b.n	8005a9a <__multiply+0x82>
 8005b60:	0800671e 	.word	0x0800671e
 8005b64:	0800672f 	.word	0x0800672f

08005b68 <__pow5mult>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4615      	mov	r5, r2
 8005b6e:	f012 0203 	ands.w	r2, r2, #3
 8005b72:	4607      	mov	r7, r0
 8005b74:	460e      	mov	r6, r1
 8005b76:	d007      	beq.n	8005b88 <__pow5mult+0x20>
 8005b78:	4c25      	ldr	r4, [pc, #148]	@ (8005c10 <__pow5mult+0xa8>)
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b82:	f7ff fea1 	bl	80058c8 <__multadd>
 8005b86:	4606      	mov	r6, r0
 8005b88:	10ad      	asrs	r5, r5, #2
 8005b8a:	d03d      	beq.n	8005c08 <__pow5mult+0xa0>
 8005b8c:	69fc      	ldr	r4, [r7, #28]
 8005b8e:	b97c      	cbnz	r4, 8005bb0 <__pow5mult+0x48>
 8005b90:	2010      	movs	r0, #16
 8005b92:	f7ff fd81 	bl	8005698 <malloc>
 8005b96:	4602      	mov	r2, r0
 8005b98:	61f8      	str	r0, [r7, #28]
 8005b9a:	b928      	cbnz	r0, 8005ba8 <__pow5mult+0x40>
 8005b9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c14 <__pow5mult+0xac>)
 8005ba2:	481d      	ldr	r0, [pc, #116]	@ (8005c18 <__pow5mult+0xb0>)
 8005ba4:	f000 fc2a 	bl	80063fc <__assert_func>
 8005ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bac:	6004      	str	r4, [r0, #0]
 8005bae:	60c4      	str	r4, [r0, #12]
 8005bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bb8:	b94c      	cbnz	r4, 8005bce <__pow5mult+0x66>
 8005bba:	f240 2171 	movw	r1, #625	@ 0x271
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	f7ff ff14 	bl	80059ec <__i2b>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bcc:	6003      	str	r3, [r0, #0]
 8005bce:	f04f 0900 	mov.w	r9, #0
 8005bd2:	07eb      	lsls	r3, r5, #31
 8005bd4:	d50a      	bpl.n	8005bec <__pow5mult+0x84>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f7ff ff1c 	bl	8005a18 <__multiply>
 8005be0:	4680      	mov	r8, r0
 8005be2:	4631      	mov	r1, r6
 8005be4:	4638      	mov	r0, r7
 8005be6:	f7ff fe4d 	bl	8005884 <_Bfree>
 8005bea:	4646      	mov	r6, r8
 8005bec:	106d      	asrs	r5, r5, #1
 8005bee:	d00b      	beq.n	8005c08 <__pow5mult+0xa0>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	b938      	cbnz	r0, 8005c04 <__pow5mult+0x9c>
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	f7ff ff0d 	bl	8005a18 <__multiply>
 8005bfe:	6020      	str	r0, [r4, #0]
 8005c00:	f8c0 9000 	str.w	r9, [r0]
 8005c04:	4604      	mov	r4, r0
 8005c06:	e7e4      	b.n	8005bd2 <__pow5mult+0x6a>
 8005c08:	4630      	mov	r0, r6
 8005c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0e:	bf00      	nop
 8005c10:	08006788 	.word	0x08006788
 8005c14:	080066af 	.word	0x080066af
 8005c18:	0800672f 	.word	0x0800672f

08005c1c <__lshift>:
 8005c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	460c      	mov	r4, r1
 8005c22:	4607      	mov	r7, r0
 8005c24:	4691      	mov	r9, r2
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	6849      	ldr	r1, [r1, #4]
 8005c2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c34:	f108 0601 	add.w	r6, r8, #1
 8005c38:	42b3      	cmp	r3, r6
 8005c3a:	db0b      	blt.n	8005c54 <__lshift+0x38>
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	f7ff fde1 	bl	8005804 <_Balloc>
 8005c42:	4605      	mov	r5, r0
 8005c44:	b948      	cbnz	r0, 8005c5a <__lshift+0x3e>
 8005c46:	4602      	mov	r2, r0
 8005c48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c4c:	4b27      	ldr	r3, [pc, #156]	@ (8005cec <__lshift+0xd0>)
 8005c4e:	4828      	ldr	r0, [pc, #160]	@ (8005cf0 <__lshift+0xd4>)
 8005c50:	f000 fbd4 	bl	80063fc <__assert_func>
 8005c54:	3101      	adds	r1, #1
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	e7ee      	b.n	8005c38 <__lshift+0x1c>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f100 0114 	add.w	r1, r0, #20
 8005c60:	f100 0210 	add.w	r2, r0, #16
 8005c64:	4618      	mov	r0, r3
 8005c66:	4553      	cmp	r3, sl
 8005c68:	db33      	blt.n	8005cd2 <__lshift+0xb6>
 8005c6a:	6920      	ldr	r0, [r4, #16]
 8005c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c70:	f104 0314 	add.w	r3, r4, #20
 8005c74:	f019 091f 	ands.w	r9, r9, #31
 8005c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c80:	d02b      	beq.n	8005cda <__lshift+0xbe>
 8005c82:	468a      	mov	sl, r1
 8005c84:	2200      	movs	r2, #0
 8005c86:	f1c9 0e20 	rsb	lr, r9, #32
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8005c90:	4310      	orrs	r0, r2
 8005c92:	f84a 0b04 	str.w	r0, [sl], #4
 8005c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9a:	459c      	cmp	ip, r3
 8005c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ca0:	d8f3      	bhi.n	8005c8a <__lshift+0x6e>
 8005ca2:	ebac 0304 	sub.w	r3, ip, r4
 8005ca6:	3b15      	subs	r3, #21
 8005ca8:	f023 0303 	bic.w	r3, r3, #3
 8005cac:	3304      	adds	r3, #4
 8005cae:	f104 0015 	add.w	r0, r4, #21
 8005cb2:	4584      	cmp	ip, r0
 8005cb4:	bf38      	it	cc
 8005cb6:	2304      	movcc	r3, #4
 8005cb8:	50ca      	str	r2, [r1, r3]
 8005cba:	b10a      	cbz	r2, 8005cc0 <__lshift+0xa4>
 8005cbc:	f108 0602 	add.w	r6, r8, #2
 8005cc0:	3e01      	subs	r6, #1
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	612e      	str	r6, [r5, #16]
 8005cc8:	f7ff fddc 	bl	8005884 <_Bfree>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	e7c5      	b.n	8005c66 <__lshift+0x4a>
 8005cda:	3904      	subs	r1, #4
 8005cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce0:	459c      	cmp	ip, r3
 8005ce2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ce6:	d8f9      	bhi.n	8005cdc <__lshift+0xc0>
 8005ce8:	e7ea      	b.n	8005cc0 <__lshift+0xa4>
 8005cea:	bf00      	nop
 8005cec:	0800671e 	.word	0x0800671e
 8005cf0:	0800672f 	.word	0x0800672f

08005cf4 <__mcmp>:
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	690a      	ldr	r2, [r1, #16]
 8005cf8:	6900      	ldr	r0, [r0, #16]
 8005cfa:	b530      	push	{r4, r5, lr}
 8005cfc:	1a80      	subs	r0, r0, r2
 8005cfe:	d10e      	bne.n	8005d1e <__mcmp+0x2a>
 8005d00:	3314      	adds	r3, #20
 8005d02:	3114      	adds	r1, #20
 8005d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d14:	4295      	cmp	r5, r2
 8005d16:	d003      	beq.n	8005d20 <__mcmp+0x2c>
 8005d18:	d205      	bcs.n	8005d26 <__mcmp+0x32>
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d3f3      	bcc.n	8005d0c <__mcmp+0x18>
 8005d24:	e7fb      	b.n	8005d1e <__mcmp+0x2a>
 8005d26:	2001      	movs	r0, #1
 8005d28:	e7f9      	b.n	8005d1e <__mcmp+0x2a>
	...

08005d2c <__mdiff>:
 8005d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	4689      	mov	r9, r1
 8005d32:	4606      	mov	r6, r0
 8005d34:	4611      	mov	r1, r2
 8005d36:	4648      	mov	r0, r9
 8005d38:	4614      	mov	r4, r2
 8005d3a:	f7ff ffdb 	bl	8005cf4 <__mcmp>
 8005d3e:	1e05      	subs	r5, r0, #0
 8005d40:	d112      	bne.n	8005d68 <__mdiff+0x3c>
 8005d42:	4629      	mov	r1, r5
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff fd5d 	bl	8005804 <_Balloc>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	b928      	cbnz	r0, 8005d5a <__mdiff+0x2e>
 8005d4e:	f240 2137 	movw	r1, #567	@ 0x237
 8005d52:	4b3e      	ldr	r3, [pc, #248]	@ (8005e4c <__mdiff+0x120>)
 8005d54:	483e      	ldr	r0, [pc, #248]	@ (8005e50 <__mdiff+0x124>)
 8005d56:	f000 fb51 	bl	80063fc <__assert_func>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d60:	4610      	mov	r0, r2
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	bfbc      	itt	lt
 8005d6a:	464b      	movlt	r3, r9
 8005d6c:	46a1      	movlt	r9, r4
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d74:	bfba      	itte	lt
 8005d76:	461c      	movlt	r4, r3
 8005d78:	2501      	movlt	r5, #1
 8005d7a:	2500      	movge	r5, #0
 8005d7c:	f7ff fd42 	bl	8005804 <_Balloc>
 8005d80:	4602      	mov	r2, r0
 8005d82:	b918      	cbnz	r0, 8005d8c <__mdiff+0x60>
 8005d84:	f240 2145 	movw	r1, #581	@ 0x245
 8005d88:	4b30      	ldr	r3, [pc, #192]	@ (8005e4c <__mdiff+0x120>)
 8005d8a:	e7e3      	b.n	8005d54 <__mdiff+0x28>
 8005d8c:	f100 0b14 	add.w	fp, r0, #20
 8005d90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d94:	f109 0310 	add.w	r3, r9, #16
 8005d98:	60c5      	str	r5, [r0, #12]
 8005d9a:	f04f 0c00 	mov.w	ip, #0
 8005d9e:	f109 0514 	add.w	r5, r9, #20
 8005da2:	46d9      	mov	r9, fp
 8005da4:	6926      	ldr	r6, [r4, #16]
 8005da6:	f104 0e14 	add.w	lr, r4, #20
 8005daa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005dae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	9b01      	ldr	r3, [sp, #4]
 8005db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005dbe:	b281      	uxth	r1, r0
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	fa1f f38a 	uxth.w	r3, sl
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	0c00      	lsrs	r0, r0, #16
 8005dca:	4463      	add	r3, ip
 8005dcc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005dd0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005dda:	4576      	cmp	r6, lr
 8005ddc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005de0:	f849 3b04 	str.w	r3, [r9], #4
 8005de4:	d8e6      	bhi.n	8005db4 <__mdiff+0x88>
 8005de6:	1b33      	subs	r3, r6, r4
 8005de8:	3b15      	subs	r3, #21
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	3415      	adds	r4, #21
 8005df0:	3304      	adds	r3, #4
 8005df2:	42a6      	cmp	r6, r4
 8005df4:	bf38      	it	cc
 8005df6:	2304      	movcc	r3, #4
 8005df8:	441d      	add	r5, r3
 8005dfa:	445b      	add	r3, fp
 8005dfc:	461e      	mov	r6, r3
 8005dfe:	462c      	mov	r4, r5
 8005e00:	4544      	cmp	r4, r8
 8005e02:	d30e      	bcc.n	8005e22 <__mdiff+0xf6>
 8005e04:	f108 0103 	add.w	r1, r8, #3
 8005e08:	1b49      	subs	r1, r1, r5
 8005e0a:	f021 0103 	bic.w	r1, r1, #3
 8005e0e:	3d03      	subs	r5, #3
 8005e10:	45a8      	cmp	r8, r5
 8005e12:	bf38      	it	cc
 8005e14:	2100      	movcc	r1, #0
 8005e16:	440b      	add	r3, r1
 8005e18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e1c:	b199      	cbz	r1, 8005e46 <__mdiff+0x11a>
 8005e1e:	6117      	str	r7, [r2, #16]
 8005e20:	e79e      	b.n	8005d60 <__mdiff+0x34>
 8005e22:	46e6      	mov	lr, ip
 8005e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e28:	fa1f fc81 	uxth.w	ip, r1
 8005e2c:	44f4      	add	ip, lr
 8005e2e:	0c08      	lsrs	r0, r1, #16
 8005e30:	4471      	add	r1, lr
 8005e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e36:	b289      	uxth	r1, r1
 8005e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e40:	f846 1b04 	str.w	r1, [r6], #4
 8005e44:	e7dc      	b.n	8005e00 <__mdiff+0xd4>
 8005e46:	3f01      	subs	r7, #1
 8005e48:	e7e6      	b.n	8005e18 <__mdiff+0xec>
 8005e4a:	bf00      	nop
 8005e4c:	0800671e 	.word	0x0800671e
 8005e50:	0800672f 	.word	0x0800672f

08005e54 <__d2b>:
 8005e54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005e58:	2101      	movs	r1, #1
 8005e5a:	4690      	mov	r8, r2
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	9e08      	ldr	r6, [sp, #32]
 8005e60:	f7ff fcd0 	bl	8005804 <_Balloc>
 8005e64:	4604      	mov	r4, r0
 8005e66:	b930      	cbnz	r0, 8005e76 <__d2b+0x22>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e6e:	4b23      	ldr	r3, [pc, #140]	@ (8005efc <__d2b+0xa8>)
 8005e70:	4823      	ldr	r0, [pc, #140]	@ (8005f00 <__d2b+0xac>)
 8005e72:	f000 fac3 	bl	80063fc <__assert_func>
 8005e76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e7e:	b10d      	cbz	r5, 8005e84 <__d2b+0x30>
 8005e80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	f1b8 0300 	subs.w	r3, r8, #0
 8005e8a:	d024      	beq.n	8005ed6 <__d2b+0x82>
 8005e8c:	4668      	mov	r0, sp
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	f7ff fd7f 	bl	8005992 <__lo0bits>
 8005e94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e98:	b1d8      	cbz	r0, 8005ed2 <__d2b+0x7e>
 8005e9a:	f1c0 0320 	rsb	r3, r0, #32
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	40c2      	lsrs	r2, r0
 8005ea6:	6163      	str	r3, [r4, #20]
 8005ea8:	9201      	str	r2, [sp, #4]
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf0c      	ite	eq
 8005eb0:	2201      	moveq	r2, #1
 8005eb2:	2202      	movne	r2, #2
 8005eb4:	61a3      	str	r3, [r4, #24]
 8005eb6:	6122      	str	r2, [r4, #16]
 8005eb8:	b1ad      	cbz	r5, 8005ee6 <__d2b+0x92>
 8005eba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ebe:	4405      	add	r5, r0
 8005ec0:	6035      	str	r5, [r6, #0]
 8005ec2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec8:	6018      	str	r0, [r3, #0]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	b002      	add	sp, #8
 8005ece:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005ed2:	6161      	str	r1, [r4, #20]
 8005ed4:	e7e9      	b.n	8005eaa <__d2b+0x56>
 8005ed6:	a801      	add	r0, sp, #4
 8005ed8:	f7ff fd5b 	bl	8005992 <__lo0bits>
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	6163      	str	r3, [r4, #20]
 8005ee2:	3020      	adds	r0, #32
 8005ee4:	e7e7      	b.n	8005eb6 <__d2b+0x62>
 8005ee6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005eea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005eee:	6030      	str	r0, [r6, #0]
 8005ef0:	6918      	ldr	r0, [r3, #16]
 8005ef2:	f7ff fd2f 	bl	8005954 <__hi0bits>
 8005ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005efa:	e7e4      	b.n	8005ec6 <__d2b+0x72>
 8005efc:	0800671e 	.word	0x0800671e
 8005f00:	0800672f 	.word	0x0800672f

08005f04 <__sfputc_r>:
 8005f04:	6893      	ldr	r3, [r2, #8]
 8005f06:	b410      	push	{r4}
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	6093      	str	r3, [r2, #8]
 8005f0e:	da07      	bge.n	8005f20 <__sfputc_r+0x1c>
 8005f10:	6994      	ldr	r4, [r2, #24]
 8005f12:	42a3      	cmp	r3, r4
 8005f14:	db01      	blt.n	8005f1a <__sfputc_r+0x16>
 8005f16:	290a      	cmp	r1, #10
 8005f18:	d102      	bne.n	8005f20 <__sfputc_r+0x1c>
 8005f1a:	bc10      	pop	{r4}
 8005f1c:	f7fe bbf3 	b.w	8004706 <__swbuf_r>
 8005f20:	6813      	ldr	r3, [r2, #0]
 8005f22:	1c58      	adds	r0, r3, #1
 8005f24:	6010      	str	r0, [r2, #0]
 8005f26:	7019      	strb	r1, [r3, #0]
 8005f28:	4608      	mov	r0, r1
 8005f2a:	bc10      	pop	{r4}
 8005f2c:	4770      	bx	lr

08005f2e <__sfputs_r>:
 8005f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	4614      	mov	r4, r2
 8005f36:	18d5      	adds	r5, r2, r3
 8005f38:	42ac      	cmp	r4, r5
 8005f3a:	d101      	bne.n	8005f40 <__sfputs_r+0x12>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	e007      	b.n	8005f50 <__sfputs_r+0x22>
 8005f40:	463a      	mov	r2, r7
 8005f42:	4630      	mov	r0, r6
 8005f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f48:	f7ff ffdc 	bl	8005f04 <__sfputc_r>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d1f3      	bne.n	8005f38 <__sfputs_r+0xa>
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f54 <_vfiprintf_r>:
 8005f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f58:	460d      	mov	r5, r1
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	4698      	mov	r8, r3
 8005f5e:	4606      	mov	r6, r0
 8005f60:	b09d      	sub	sp, #116	@ 0x74
 8005f62:	b118      	cbz	r0, 8005f6c <_vfiprintf_r+0x18>
 8005f64:	6a03      	ldr	r3, [r0, #32]
 8005f66:	b90b      	cbnz	r3, 8005f6c <_vfiprintf_r+0x18>
 8005f68:	f7fe fae4 	bl	8004534 <__sinit>
 8005f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f6e:	07d9      	lsls	r1, r3, #31
 8005f70:	d405      	bmi.n	8005f7e <_vfiprintf_r+0x2a>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	059a      	lsls	r2, r3, #22
 8005f76:	d402      	bmi.n	8005f7e <_vfiprintf_r+0x2a>
 8005f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f7a:	f7fe fcd6 	bl	800492a <__retarget_lock_acquire_recursive>
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	071b      	lsls	r3, r3, #28
 8005f82:	d501      	bpl.n	8005f88 <_vfiprintf_r+0x34>
 8005f84:	692b      	ldr	r3, [r5, #16]
 8005f86:	b99b      	cbnz	r3, 8005fb0 <_vfiprintf_r+0x5c>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7fe fbfa 	bl	8004784 <__swsetup_r>
 8005f90:	b170      	cbz	r0, 8005fb0 <_vfiprintf_r+0x5c>
 8005f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f94:	07dc      	lsls	r4, r3, #31
 8005f96:	d504      	bpl.n	8005fa2 <_vfiprintf_r+0x4e>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	b01d      	add	sp, #116	@ 0x74
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	89ab      	ldrh	r3, [r5, #12]
 8005fa4:	0598      	lsls	r0, r3, #22
 8005fa6:	d4f7      	bmi.n	8005f98 <_vfiprintf_r+0x44>
 8005fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005faa:	f7fe fcbf 	bl	800492c <__retarget_lock_release_recursive>
 8005fae:	e7f3      	b.n	8005f98 <_vfiprintf_r+0x44>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fba:	2330      	movs	r3, #48	@ 0x30
 8005fbc:	f04f 0901 	mov.w	r9, #1
 8005fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fc4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006170 <_vfiprintf_r+0x21c>
 8005fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fcc:	4623      	mov	r3, r4
 8005fce:	469a      	mov	sl, r3
 8005fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd4:	b10a      	cbz	r2, 8005fda <_vfiprintf_r+0x86>
 8005fd6:	2a25      	cmp	r2, #37	@ 0x25
 8005fd8:	d1f9      	bne.n	8005fce <_vfiprintf_r+0x7a>
 8005fda:	ebba 0b04 	subs.w	fp, sl, r4
 8005fde:	d00b      	beq.n	8005ff8 <_vfiprintf_r+0xa4>
 8005fe0:	465b      	mov	r3, fp
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ffa1 	bl	8005f2e <__sfputs_r>
 8005fec:	3001      	adds	r0, #1
 8005fee:	f000 80a7 	beq.w	8006140 <_vfiprintf_r+0x1ec>
 8005ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff4:	445a      	add	r2, fp
 8005ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 809f 	beq.w	8006140 <_vfiprintf_r+0x1ec>
 8006002:	2300      	movs	r3, #0
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800600c:	f10a 0a01 	add.w	sl, sl, #1
 8006010:	9304      	str	r3, [sp, #16]
 8006012:	9307      	str	r3, [sp, #28]
 8006014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006018:	931a      	str	r3, [sp, #104]	@ 0x68
 800601a:	4654      	mov	r4, sl
 800601c:	2205      	movs	r2, #5
 800601e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006022:	4853      	ldr	r0, [pc, #332]	@ (8006170 <_vfiprintf_r+0x21c>)
 8006024:	f7fe fc83 	bl	800492e <memchr>
 8006028:	9a04      	ldr	r2, [sp, #16]
 800602a:	b9d8      	cbnz	r0, 8006064 <_vfiprintf_r+0x110>
 800602c:	06d1      	lsls	r1, r2, #27
 800602e:	bf44      	itt	mi
 8006030:	2320      	movmi	r3, #32
 8006032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006036:	0713      	lsls	r3, r2, #28
 8006038:	bf44      	itt	mi
 800603a:	232b      	movmi	r3, #43	@ 0x2b
 800603c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006040:	f89a 3000 	ldrb.w	r3, [sl]
 8006044:	2b2a      	cmp	r3, #42	@ 0x2a
 8006046:	d015      	beq.n	8006074 <_vfiprintf_r+0x120>
 8006048:	4654      	mov	r4, sl
 800604a:	2000      	movs	r0, #0
 800604c:	f04f 0c0a 	mov.w	ip, #10
 8006050:	9a07      	ldr	r2, [sp, #28]
 8006052:	4621      	mov	r1, r4
 8006054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006058:	3b30      	subs	r3, #48	@ 0x30
 800605a:	2b09      	cmp	r3, #9
 800605c:	d94b      	bls.n	80060f6 <_vfiprintf_r+0x1a2>
 800605e:	b1b0      	cbz	r0, 800608e <_vfiprintf_r+0x13a>
 8006060:	9207      	str	r2, [sp, #28]
 8006062:	e014      	b.n	800608e <_vfiprintf_r+0x13a>
 8006064:	eba0 0308 	sub.w	r3, r0, r8
 8006068:	fa09 f303 	lsl.w	r3, r9, r3
 800606c:	4313      	orrs	r3, r2
 800606e:	46a2      	mov	sl, r4
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	e7d2      	b.n	800601a <_vfiprintf_r+0xc6>
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	1d19      	adds	r1, r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	9103      	str	r1, [sp, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	bfbb      	ittet	lt
 8006080:	425b      	neglt	r3, r3
 8006082:	f042 0202 	orrlt.w	r2, r2, #2
 8006086:	9307      	strge	r3, [sp, #28]
 8006088:	9307      	strlt	r3, [sp, #28]
 800608a:	bfb8      	it	lt
 800608c:	9204      	strlt	r2, [sp, #16]
 800608e:	7823      	ldrb	r3, [r4, #0]
 8006090:	2b2e      	cmp	r3, #46	@ 0x2e
 8006092:	d10a      	bne.n	80060aa <_vfiprintf_r+0x156>
 8006094:	7863      	ldrb	r3, [r4, #1]
 8006096:	2b2a      	cmp	r3, #42	@ 0x2a
 8006098:	d132      	bne.n	8006100 <_vfiprintf_r+0x1ac>
 800609a:	9b03      	ldr	r3, [sp, #12]
 800609c:	3402      	adds	r4, #2
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	9203      	str	r2, [sp, #12]
 80060a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006174 <_vfiprintf_r+0x220>
 80060ae:	2203      	movs	r2, #3
 80060b0:	4650      	mov	r0, sl
 80060b2:	7821      	ldrb	r1, [r4, #0]
 80060b4:	f7fe fc3b 	bl	800492e <memchr>
 80060b8:	b138      	cbz	r0, 80060ca <_vfiprintf_r+0x176>
 80060ba:	2240      	movs	r2, #64	@ 0x40
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	eba0 000a 	sub.w	r0, r0, sl
 80060c2:	4082      	lsls	r2, r0
 80060c4:	4313      	orrs	r3, r2
 80060c6:	3401      	adds	r4, #1
 80060c8:	9304      	str	r3, [sp, #16]
 80060ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ce:	2206      	movs	r2, #6
 80060d0:	4829      	ldr	r0, [pc, #164]	@ (8006178 <_vfiprintf_r+0x224>)
 80060d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060d6:	f7fe fc2a 	bl	800492e <memchr>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d03f      	beq.n	800615e <_vfiprintf_r+0x20a>
 80060de:	4b27      	ldr	r3, [pc, #156]	@ (800617c <_vfiprintf_r+0x228>)
 80060e0:	bb1b      	cbnz	r3, 800612a <_vfiprintf_r+0x1d6>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	3307      	adds	r3, #7
 80060e6:	f023 0307 	bic.w	r3, r3, #7
 80060ea:	3308      	adds	r3, #8
 80060ec:	9303      	str	r3, [sp, #12]
 80060ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f0:	443b      	add	r3, r7
 80060f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f4:	e76a      	b.n	8005fcc <_vfiprintf_r+0x78>
 80060f6:	460c      	mov	r4, r1
 80060f8:	2001      	movs	r0, #1
 80060fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80060fe:	e7a8      	b.n	8006052 <_vfiprintf_r+0xfe>
 8006100:	2300      	movs	r3, #0
 8006102:	f04f 0c0a 	mov.w	ip, #10
 8006106:	4619      	mov	r1, r3
 8006108:	3401      	adds	r4, #1
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	4620      	mov	r0, r4
 800610e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006112:	3a30      	subs	r2, #48	@ 0x30
 8006114:	2a09      	cmp	r2, #9
 8006116:	d903      	bls.n	8006120 <_vfiprintf_r+0x1cc>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0c6      	beq.n	80060aa <_vfiprintf_r+0x156>
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	e7c4      	b.n	80060aa <_vfiprintf_r+0x156>
 8006120:	4604      	mov	r4, r0
 8006122:	2301      	movs	r3, #1
 8006124:	fb0c 2101 	mla	r1, ip, r1, r2
 8006128:	e7f0      	b.n	800610c <_vfiprintf_r+0x1b8>
 800612a:	ab03      	add	r3, sp, #12
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	462a      	mov	r2, r5
 8006130:	4630      	mov	r0, r6
 8006132:	4b13      	ldr	r3, [pc, #76]	@ (8006180 <_vfiprintf_r+0x22c>)
 8006134:	a904      	add	r1, sp, #16
 8006136:	f7fd fdb3 	bl	8003ca0 <_printf_float>
 800613a:	4607      	mov	r7, r0
 800613c:	1c78      	adds	r0, r7, #1
 800613e:	d1d6      	bne.n	80060ee <_vfiprintf_r+0x19a>
 8006140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x1fe>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x1fe>
 800614c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800614e:	f7fe fbed 	bl	800492c <__retarget_lock_release_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	065b      	lsls	r3, r3, #25
 8006156:	f53f af1f 	bmi.w	8005f98 <_vfiprintf_r+0x44>
 800615a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800615c:	e71e      	b.n	8005f9c <_vfiprintf_r+0x48>
 800615e:	ab03      	add	r3, sp, #12
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	462a      	mov	r2, r5
 8006164:	4630      	mov	r0, r6
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <_vfiprintf_r+0x22c>)
 8006168:	a904      	add	r1, sp, #16
 800616a:	f7fe f837 	bl	80041dc <_printf_i>
 800616e:	e7e4      	b.n	800613a <_vfiprintf_r+0x1e6>
 8006170:	08006888 	.word	0x08006888
 8006174:	0800688e 	.word	0x0800688e
 8006178:	08006892 	.word	0x08006892
 800617c:	08003ca1 	.word	0x08003ca1
 8006180:	08005f2f 	.word	0x08005f2f

08006184 <__sflush_r>:
 8006184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	0716      	lsls	r6, r2, #28
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	d454      	bmi.n	800623c <__sflush_r+0xb8>
 8006192:	684b      	ldr	r3, [r1, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	dc02      	bgt.n	800619e <__sflush_r+0x1a>
 8006198:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	dd48      	ble.n	8006230 <__sflush_r+0xac>
 800619e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d045      	beq.n	8006230 <__sflush_r+0xac>
 80061a4:	2300      	movs	r3, #0
 80061a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061aa:	682f      	ldr	r7, [r5, #0]
 80061ac:	6a21      	ldr	r1, [r4, #32]
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	d030      	beq.n	8006214 <__sflush_r+0x90>
 80061b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	0759      	lsls	r1, r3, #29
 80061b8:	d505      	bpl.n	80061c6 <__sflush_r+0x42>
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	1ad2      	subs	r2, r2, r3
 80061be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061c0:	b10b      	cbz	r3, 80061c6 <__sflush_r+0x42>
 80061c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	4628      	mov	r0, r5
 80061ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061cc:	6a21      	ldr	r1, [r4, #32]
 80061ce:	47b0      	blx	r6
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	d106      	bne.n	80061e4 <__sflush_r+0x60>
 80061d6:	6829      	ldr	r1, [r5, #0]
 80061d8:	291d      	cmp	r1, #29
 80061da:	d82b      	bhi.n	8006234 <__sflush_r+0xb0>
 80061dc:	4a28      	ldr	r2, [pc, #160]	@ (8006280 <__sflush_r+0xfc>)
 80061de:	410a      	asrs	r2, r1
 80061e0:	07d6      	lsls	r6, r2, #31
 80061e2:	d427      	bmi.n	8006234 <__sflush_r+0xb0>
 80061e4:	2200      	movs	r2, #0
 80061e6:	6062      	str	r2, [r4, #4]
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	04d9      	lsls	r1, r3, #19
 80061ec:	6022      	str	r2, [r4, #0]
 80061ee:	d504      	bpl.n	80061fa <__sflush_r+0x76>
 80061f0:	1c42      	adds	r2, r0, #1
 80061f2:	d101      	bne.n	80061f8 <__sflush_r+0x74>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b903      	cbnz	r3, 80061fa <__sflush_r+0x76>
 80061f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80061fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061fc:	602f      	str	r7, [r5, #0]
 80061fe:	b1b9      	cbz	r1, 8006230 <__sflush_r+0xac>
 8006200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006204:	4299      	cmp	r1, r3
 8006206:	d002      	beq.n	800620e <__sflush_r+0x8a>
 8006208:	4628      	mov	r0, r5
 800620a:	f7ff f9fd 	bl	8005608 <_free_r>
 800620e:	2300      	movs	r3, #0
 8006210:	6363      	str	r3, [r4, #52]	@ 0x34
 8006212:	e00d      	b.n	8006230 <__sflush_r+0xac>
 8006214:	2301      	movs	r3, #1
 8006216:	4628      	mov	r0, r5
 8006218:	47b0      	blx	r6
 800621a:	4602      	mov	r2, r0
 800621c:	1c50      	adds	r0, r2, #1
 800621e:	d1c9      	bne.n	80061b4 <__sflush_r+0x30>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c6      	beq.n	80061b4 <__sflush_r+0x30>
 8006226:	2b1d      	cmp	r3, #29
 8006228:	d001      	beq.n	800622e <__sflush_r+0xaa>
 800622a:	2b16      	cmp	r3, #22
 800622c:	d11d      	bne.n	800626a <__sflush_r+0xe6>
 800622e:	602f      	str	r7, [r5, #0]
 8006230:	2000      	movs	r0, #0
 8006232:	e021      	b.n	8006278 <__sflush_r+0xf4>
 8006234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006238:	b21b      	sxth	r3, r3
 800623a:	e01a      	b.n	8006272 <__sflush_r+0xee>
 800623c:	690f      	ldr	r7, [r1, #16]
 800623e:	2f00      	cmp	r7, #0
 8006240:	d0f6      	beq.n	8006230 <__sflush_r+0xac>
 8006242:	0793      	lsls	r3, r2, #30
 8006244:	bf18      	it	ne
 8006246:	2300      	movne	r3, #0
 8006248:	680e      	ldr	r6, [r1, #0]
 800624a:	bf08      	it	eq
 800624c:	694b      	ldreq	r3, [r1, #20]
 800624e:	1bf6      	subs	r6, r6, r7
 8006250:	600f      	str	r7, [r1, #0]
 8006252:	608b      	str	r3, [r1, #8]
 8006254:	2e00      	cmp	r6, #0
 8006256:	ddeb      	ble.n	8006230 <__sflush_r+0xac>
 8006258:	4633      	mov	r3, r6
 800625a:	463a      	mov	r2, r7
 800625c:	4628      	mov	r0, r5
 800625e:	6a21      	ldr	r1, [r4, #32]
 8006260:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006264:	47e0      	blx	ip
 8006266:	2800      	cmp	r0, #0
 8006268:	dc07      	bgt.n	800627a <__sflush_r+0xf6>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800627a:	4407      	add	r7, r0
 800627c:	1a36      	subs	r6, r6, r0
 800627e:	e7e9      	b.n	8006254 <__sflush_r+0xd0>
 8006280:	dfbffffe 	.word	0xdfbffffe

08006284 <_fflush_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	690b      	ldr	r3, [r1, #16]
 8006288:	4605      	mov	r5, r0
 800628a:	460c      	mov	r4, r1
 800628c:	b913      	cbnz	r3, 8006294 <_fflush_r+0x10>
 800628e:	2500      	movs	r5, #0
 8006290:	4628      	mov	r0, r5
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	b118      	cbz	r0, 800629e <_fflush_r+0x1a>
 8006296:	6a03      	ldr	r3, [r0, #32]
 8006298:	b90b      	cbnz	r3, 800629e <_fflush_r+0x1a>
 800629a:	f7fe f94b 	bl	8004534 <__sinit>
 800629e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f3      	beq.n	800628e <_fflush_r+0xa>
 80062a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062a8:	07d0      	lsls	r0, r2, #31
 80062aa:	d404      	bmi.n	80062b6 <_fflush_r+0x32>
 80062ac:	0599      	lsls	r1, r3, #22
 80062ae:	d402      	bmi.n	80062b6 <_fflush_r+0x32>
 80062b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062b2:	f7fe fb3a 	bl	800492a <__retarget_lock_acquire_recursive>
 80062b6:	4628      	mov	r0, r5
 80062b8:	4621      	mov	r1, r4
 80062ba:	f7ff ff63 	bl	8006184 <__sflush_r>
 80062be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062c0:	4605      	mov	r5, r0
 80062c2:	07da      	lsls	r2, r3, #31
 80062c4:	d4e4      	bmi.n	8006290 <_fflush_r+0xc>
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	059b      	lsls	r3, r3, #22
 80062ca:	d4e1      	bmi.n	8006290 <_fflush_r+0xc>
 80062cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ce:	f7fe fb2d 	bl	800492c <__retarget_lock_release_recursive>
 80062d2:	e7dd      	b.n	8006290 <_fflush_r+0xc>

080062d4 <__swhatbuf_r>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	460c      	mov	r4, r1
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	4615      	mov	r5, r2
 80062de:	2900      	cmp	r1, #0
 80062e0:	461e      	mov	r6, r3
 80062e2:	b096      	sub	sp, #88	@ 0x58
 80062e4:	da0c      	bge.n	8006300 <__swhatbuf_r+0x2c>
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	2100      	movs	r1, #0
 80062ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062ee:	bf14      	ite	ne
 80062f0:	2340      	movne	r3, #64	@ 0x40
 80062f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062f6:	2000      	movs	r0, #0
 80062f8:	6031      	str	r1, [r6, #0]
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	b016      	add	sp, #88	@ 0x58
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	466a      	mov	r2, sp
 8006302:	f000 f849 	bl	8006398 <_fstat_r>
 8006306:	2800      	cmp	r0, #0
 8006308:	dbed      	blt.n	80062e6 <__swhatbuf_r+0x12>
 800630a:	9901      	ldr	r1, [sp, #4]
 800630c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006310:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006314:	4259      	negs	r1, r3
 8006316:	4159      	adcs	r1, r3
 8006318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800631c:	e7eb      	b.n	80062f6 <__swhatbuf_r+0x22>

0800631e <__smakebuf_r>:
 800631e:	898b      	ldrh	r3, [r1, #12]
 8006320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006322:	079d      	lsls	r5, r3, #30
 8006324:	4606      	mov	r6, r0
 8006326:	460c      	mov	r4, r1
 8006328:	d507      	bpl.n	800633a <__smakebuf_r+0x1c>
 800632a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	2301      	movs	r3, #1
 8006334:	6163      	str	r3, [r4, #20]
 8006336:	b003      	add	sp, #12
 8006338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800633a:	466a      	mov	r2, sp
 800633c:	ab01      	add	r3, sp, #4
 800633e:	f7ff ffc9 	bl	80062d4 <__swhatbuf_r>
 8006342:	9f00      	ldr	r7, [sp, #0]
 8006344:	4605      	mov	r5, r0
 8006346:	4639      	mov	r1, r7
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff f9cf 	bl	80056ec <_malloc_r>
 800634e:	b948      	cbnz	r0, 8006364 <__smakebuf_r+0x46>
 8006350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006354:	059a      	lsls	r2, r3, #22
 8006356:	d4ee      	bmi.n	8006336 <__smakebuf_r+0x18>
 8006358:	f023 0303 	bic.w	r3, r3, #3
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	e7e2      	b.n	800632a <__smakebuf_r+0xc>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800636a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	6020      	str	r0, [r4, #0]
 8006374:	b15b      	cbz	r3, 800638e <__smakebuf_r+0x70>
 8006376:	4630      	mov	r0, r6
 8006378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637c:	f000 f81e 	bl	80063bc <_isatty_r>
 8006380:	b128      	cbz	r0, 800638e <__smakebuf_r+0x70>
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	f023 0303 	bic.w	r3, r3, #3
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	431d      	orrs	r5, r3
 8006392:	81a5      	strh	r5, [r4, #12]
 8006394:	e7cf      	b.n	8006336 <__smakebuf_r+0x18>
	...

08006398 <_fstat_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	2300      	movs	r3, #0
 800639c:	4d06      	ldr	r5, [pc, #24]	@ (80063b8 <_fstat_r+0x20>)
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	f7fb f8d9 	bl	800155c <_fstat>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d102      	bne.n	80063b4 <_fstat_r+0x1c>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	b103      	cbz	r3, 80063b4 <_fstat_r+0x1c>
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	bd38      	pop	{r3, r4, r5, pc}
 80063b6:	bf00      	nop
 80063b8:	2000062c 	.word	0x2000062c

080063bc <_isatty_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2300      	movs	r3, #0
 80063c0:	4d05      	ldr	r5, [pc, #20]	@ (80063d8 <_isatty_r+0x1c>)
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fb f8d7 	bl	800157a <_isatty>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_isatty_r+0x1a>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_isatty_r+0x1a>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	2000062c 	.word	0x2000062c

080063dc <_sbrk_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	2300      	movs	r3, #0
 80063e0:	4d05      	ldr	r5, [pc, #20]	@ (80063f8 <_sbrk_r+0x1c>)
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fb f8de 	bl	80015a8 <_sbrk>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_sbrk_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_sbrk_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	2000062c 	.word	0x2000062c

080063fc <__assert_func>:
 80063fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063fe:	4614      	mov	r4, r2
 8006400:	461a      	mov	r2, r3
 8006402:	4b09      	ldr	r3, [pc, #36]	@ (8006428 <__assert_func+0x2c>)
 8006404:	4605      	mov	r5, r0
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68d8      	ldr	r0, [r3, #12]
 800640a:	b954      	cbnz	r4, 8006422 <__assert_func+0x26>
 800640c:	4b07      	ldr	r3, [pc, #28]	@ (800642c <__assert_func+0x30>)
 800640e:	461c      	mov	r4, r3
 8006410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006414:	9100      	str	r1, [sp, #0]
 8006416:	462b      	mov	r3, r5
 8006418:	4905      	ldr	r1, [pc, #20]	@ (8006430 <__assert_func+0x34>)
 800641a:	f000 f841 	bl	80064a0 <fiprintf>
 800641e:	f000 f851 	bl	80064c4 <abort>
 8006422:	4b04      	ldr	r3, [pc, #16]	@ (8006434 <__assert_func+0x38>)
 8006424:	e7f4      	b.n	8006410 <__assert_func+0x14>
 8006426:	bf00      	nop
 8006428:	20000018 	.word	0x20000018
 800642c:	080068de 	.word	0x080068de
 8006430:	080068b0 	.word	0x080068b0
 8006434:	080068a3 	.word	0x080068a3

08006438 <_calloc_r>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	fba1 5402 	umull	r5, r4, r1, r2
 800643e:	b93c      	cbnz	r4, 8006450 <_calloc_r+0x18>
 8006440:	4629      	mov	r1, r5
 8006442:	f7ff f953 	bl	80056ec <_malloc_r>
 8006446:	4606      	mov	r6, r0
 8006448:	b928      	cbnz	r0, 8006456 <_calloc_r+0x1e>
 800644a:	2600      	movs	r6, #0
 800644c:	4630      	mov	r0, r6
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	220c      	movs	r2, #12
 8006452:	6002      	str	r2, [r0, #0]
 8006454:	e7f9      	b.n	800644a <_calloc_r+0x12>
 8006456:	462a      	mov	r2, r5
 8006458:	4621      	mov	r1, r4
 800645a:	f7fe f9e9 	bl	8004830 <memset>
 800645e:	e7f5      	b.n	800644c <_calloc_r+0x14>

08006460 <__ascii_mbtowc>:
 8006460:	b082      	sub	sp, #8
 8006462:	b901      	cbnz	r1, 8006466 <__ascii_mbtowc+0x6>
 8006464:	a901      	add	r1, sp, #4
 8006466:	b142      	cbz	r2, 800647a <__ascii_mbtowc+0x1a>
 8006468:	b14b      	cbz	r3, 800647e <__ascii_mbtowc+0x1e>
 800646a:	7813      	ldrb	r3, [r2, #0]
 800646c:	600b      	str	r3, [r1, #0]
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	1e10      	subs	r0, r2, #0
 8006472:	bf18      	it	ne
 8006474:	2001      	movne	r0, #1
 8006476:	b002      	add	sp, #8
 8006478:	4770      	bx	lr
 800647a:	4610      	mov	r0, r2
 800647c:	e7fb      	b.n	8006476 <__ascii_mbtowc+0x16>
 800647e:	f06f 0001 	mvn.w	r0, #1
 8006482:	e7f8      	b.n	8006476 <__ascii_mbtowc+0x16>

08006484 <__ascii_wctomb>:
 8006484:	4603      	mov	r3, r0
 8006486:	4608      	mov	r0, r1
 8006488:	b141      	cbz	r1, 800649c <__ascii_wctomb+0x18>
 800648a:	2aff      	cmp	r2, #255	@ 0xff
 800648c:	d904      	bls.n	8006498 <__ascii_wctomb+0x14>
 800648e:	228a      	movs	r2, #138	@ 0x8a
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	4770      	bx	lr
 8006498:	2001      	movs	r0, #1
 800649a:	700a      	strb	r2, [r1, #0]
 800649c:	4770      	bx	lr
	...

080064a0 <fiprintf>:
 80064a0:	b40e      	push	{r1, r2, r3}
 80064a2:	b503      	push	{r0, r1, lr}
 80064a4:	4601      	mov	r1, r0
 80064a6:	ab03      	add	r3, sp, #12
 80064a8:	4805      	ldr	r0, [pc, #20]	@ (80064c0 <fiprintf+0x20>)
 80064aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ae:	6800      	ldr	r0, [r0, #0]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	f7ff fd4f 	bl	8005f54 <_vfiprintf_r>
 80064b6:	b002      	add	sp, #8
 80064b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064bc:	b003      	add	sp, #12
 80064be:	4770      	bx	lr
 80064c0:	20000018 	.word	0x20000018

080064c4 <abort>:
 80064c4:	2006      	movs	r0, #6
 80064c6:	b508      	push	{r3, lr}
 80064c8:	f000 f82c 	bl	8006524 <raise>
 80064cc:	2001      	movs	r0, #1
 80064ce:	f7fa fff6 	bl	80014be <_exit>

080064d2 <_raise_r>:
 80064d2:	291f      	cmp	r1, #31
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	460c      	mov	r4, r1
 80064da:	d904      	bls.n	80064e6 <_raise_r+0x14>
 80064dc:	2316      	movs	r3, #22
 80064de:	6003      	str	r3, [r0, #0]
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	bd38      	pop	{r3, r4, r5, pc}
 80064e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80064e8:	b112      	cbz	r2, 80064f0 <_raise_r+0x1e>
 80064ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064ee:	b94b      	cbnz	r3, 8006504 <_raise_r+0x32>
 80064f0:	4628      	mov	r0, r5
 80064f2:	f000 f831 	bl	8006558 <_getpid_r>
 80064f6:	4622      	mov	r2, r4
 80064f8:	4601      	mov	r1, r0
 80064fa:	4628      	mov	r0, r5
 80064fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006500:	f000 b818 	b.w	8006534 <_kill_r>
 8006504:	2b01      	cmp	r3, #1
 8006506:	d00a      	beq.n	800651e <_raise_r+0x4c>
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	d103      	bne.n	8006514 <_raise_r+0x42>
 800650c:	2316      	movs	r3, #22
 800650e:	6003      	str	r3, [r0, #0]
 8006510:	2001      	movs	r0, #1
 8006512:	e7e7      	b.n	80064e4 <_raise_r+0x12>
 8006514:	2100      	movs	r1, #0
 8006516:	4620      	mov	r0, r4
 8006518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800651c:	4798      	blx	r3
 800651e:	2000      	movs	r0, #0
 8006520:	e7e0      	b.n	80064e4 <_raise_r+0x12>
	...

08006524 <raise>:
 8006524:	4b02      	ldr	r3, [pc, #8]	@ (8006530 <raise+0xc>)
 8006526:	4601      	mov	r1, r0
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	f7ff bfd2 	b.w	80064d2 <_raise_r>
 800652e:	bf00      	nop
 8006530:	20000018 	.word	0x20000018

08006534 <_kill_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	2300      	movs	r3, #0
 8006538:	4d06      	ldr	r5, [pc, #24]	@ (8006554 <_kill_r+0x20>)
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f7fa ffac 	bl	800149e <_kill>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <_kill_r+0x1c>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b103      	cbz	r3, 8006550 <_kill_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	2000062c 	.word	0x2000062c

08006558 <_getpid_r>:
 8006558:	f7fa bf9a 	b.w	8001490 <_getpid>

0800655c <_init>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr

08006568 <_fini>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr
