
stm32_sx1278_never_give_up_send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08006388  08006388  00016388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800685c  0800685c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006864  08006864  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800686c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e0  08006a48  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08006a48  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a92a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e09  00000000  00000000  0002ab2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018859  00000000  00000000  0002dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc74  00000000  00000000  00046499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861d8  00000000  00000000  0005210d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d82e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  000d8338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006370 	.word	0x08006370

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006370 	.word	0x08006370

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b976 	b.w	8000d8c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14d      	bne.n	8000b64 <__udivmoddi4+0xac>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d968      	bls.n	8000ba0 <__udivmoddi4+0xe8>
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	b152      	cbz	r2, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad8:	f1c2 0120 	rsb	r1, r2, #32
 8000adc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	ea41 0803 	orr.w	r8, r1, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000aee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	fb01 8817 	mls	r8, r1, r7, r8
 8000afa:	fb07 f00e 	mul.w	r0, r7, lr
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b10:	f080 811e 	bcs.w	8000d50 <__udivmoddi4+0x298>
 8000b14:	4298      	cmp	r0, r3
 8000b16:	f240 811b 	bls.w	8000d50 <__udivmoddi4+0x298>
 8000b1a:	3f02      	subs	r7, #2
 8000b1c:	4463      	add	r3, ip
 8000b1e:	1a1b      	subs	r3, r3, r0
 8000b20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b24:	fb01 3310 	mls	r3, r1, r0, r3
 8000b28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 8109 	bcs.w	8000d54 <__udivmoddi4+0x29c>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f240 8106 	bls.w	8000d54 <__udivmoddi4+0x29c>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b56:	b11e      	cbz	r6, 8000b60 <__udivmoddi4+0xa8>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	40d4      	lsrs	r4, r2
 8000b5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0xc2>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	f000 80ee 	beq.w	8000d4a <__udivmoddi4+0x292>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e9c6 0500 	strd	r0, r5, [r6]
 8000b74:	4608      	mov	r0, r1
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d14a      	bne.n	8000c18 <__udivmoddi4+0x160>
 8000b82:	42ab      	cmp	r3, r5
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd4>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fc 	bhi.w	8000d84 <__udivmoddi4+0x2cc>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e2      	beq.n	8000b60 <__udivmoddi4+0xa8>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7df      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xec>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 8091 	bne.w	8000cd0 <__udivmoddi4+0x218>
 8000bae:	eba1 000c 	sub.w	r0, r1, ip
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb8:	fa1f fe8c 	uxth.w	lr, ip
 8000bbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000bc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000bc4:	0c25      	lsrs	r5, r4, #16
 8000bc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bca:	fb0e f003 	mul.w	r0, lr, r3
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x12c>
 8000bd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000bd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x12a>
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	f200 80ce 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000be2:	4643      	mov	r3, r8
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000bea:	fb07 5510 	mls	r5, r7, r0, r5
 8000bee:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x156>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c04:	d202      	bcs.n	8000c0c <__udivmoddi4+0x154>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f200 80b6 	bhi.w	8000d78 <__udivmoddi4+0x2c0>
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c16:	e79e      	b.n	8000b56 <__udivmoddi4+0x9e>
 8000c18:	f1c1 0720 	rsb	r7, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2e:	fbba f8f9 	udiv	r8, sl, r9
 8000c32:	fa20 f307 	lsr.w	r3, r0, r7
 8000c36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c3a:	408d      	lsls	r5, r1
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	431d      	orrs	r5, r3
 8000c42:	fa00 f301 	lsl.w	r3, r0, r1
 8000c46:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4a:	0c2c      	lsrs	r4, r5, #16
 8000c4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90b      	bls.n	8000c70 <__udivmoddi4+0x1b8>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c60:	f080 8088 	bcs.w	8000d74 <__udivmoddi4+0x2bc>
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	f240 8085 	bls.w	8000d74 <__udivmoddi4+0x2bc>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	4464      	add	r4, ip
 8000c70:	1a24      	subs	r4, r4, r0
 8000c72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c76:	fb09 4410 	mls	r4, r9, r0, r4
 8000c7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x1e2>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d26c      	bcs.n	8000d6c <__udivmoddi4+0x2b4>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	d96a      	bls.n	8000d6c <__udivmoddi4+0x2b4>
 8000c96:	3802      	subs	r0, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	42ac      	cmp	r4, r5
 8000ca8:	46c8      	mov	r8, r9
 8000caa:	46ae      	mov	lr, r5
 8000cac:	d356      	bcc.n	8000d5c <__udivmoddi4+0x2a4>
 8000cae:	d053      	beq.n	8000d58 <__udivmoddi4+0x2a0>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d069      	beq.n	8000d88 <__udivmoddi4+0x2d0>
 8000cb4:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb8:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000cc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e747      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	f1c2 0120 	rsb	r1, r2, #32
 8000cd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000cdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	430d      	orrs	r5, r1
 8000ce8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000cec:	fb07 3311 	mls	r3, r7, r1, r3
 8000cf0:	fa1f fe8c 	uxth.w	lr, ip
 8000cf4:	0c28      	lsrs	r0, r5, #16
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	fa04 f402 	lsl.w	r4, r4, r2
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x260>
 8000d06:	eb1c 0000 	adds.w	r0, ip, r0
 8000d0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d0e:	d22f      	bcs.n	8000d70 <__udivmoddi4+0x2b8>
 8000d10:	4283      	cmp	r3, r0
 8000d12:	d92d      	bls.n	8000d70 <__udivmoddi4+0x2b8>
 8000d14:	3902      	subs	r1, #2
 8000d16:	4460      	add	r0, ip
 8000d18:	1ac0      	subs	r0, r0, r3
 8000d1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d28:	fb03 f00e 	mul.w	r0, r3, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x28a>
 8000d30:	eb1c 0505 	adds.w	r5, ip, r5
 8000d34:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d38:	d216      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d914      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	4465      	add	r5, ip
 8000d42:	1a28      	subs	r0, r5, r0
 8000d44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d48:	e738      	b.n	8000bbc <__udivmoddi4+0x104>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e707      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000d50:	462f      	mov	r7, r5
 8000d52:	e6e4      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6f9      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d58:	454b      	cmp	r3, r9
 8000d5a:	d2a9      	bcs.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d64:	3801      	subs	r0, #1
 8000d66:	e7a3      	b.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	e7ea      	b.n	8000d42 <__udivmoddi4+0x28a>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e794      	b.n	8000c9a <__udivmoddi4+0x1e2>
 8000d70:	4641      	mov	r1, r8
 8000d72:	e7d1      	b.n	8000d18 <__udivmoddi4+0x260>
 8000d74:	46d0      	mov	r8, sl
 8000d76:	e77b      	b.n	8000c70 <__udivmoddi4+0x1b8>
 8000d78:	4464      	add	r4, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	e747      	b.n	8000c0e <__udivmoddi4+0x156>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4465      	add	r5, ip
 8000d82:	e72f      	b.n	8000be4 <__udivmoddi4+0x12c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e706      	b.n	8000b96 <__udivmoddi4+0xde>
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e6e9      	b.n	8000b60 <__udivmoddi4+0xa8>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <init_gpio>:
 */

#include "gpio.h"

void init_gpio()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <init_gpio+0xc8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <init_gpio+0xc8>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <init_gpio+0xc8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0310 	and.w	r3, r3, #16
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <init_gpio+0xc8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <init_gpio+0xc8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <init_gpio+0xc8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <init_gpio+0xc8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <init_gpio+0xc8>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <init_gpio+0xc8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	481a      	ldr	r0, [pc, #104]	; (8000e5c <init_gpio+0xcc>)
 8000df2:	f000 febe 	bl	8001b72 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4819      	ldr	r0, [pc, #100]	; (8000e60 <init_gpio+0xd0>)
 8000dfc:	f000 feb9 	bl	8001b72 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = NSS_Pin;
 8000e00:	2310      	movs	r3, #16
 8000e02:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <init_gpio+0xcc>)
 8000e18:	f000 fd10 	bl	800183c <HAL_GPIO_Init>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <init_gpio+0xd0>)
 8000e30:	f000 fd04 	bl	800183c <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8000e34:	2302      	movs	r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <init_gpio+0xd0>)
 8000e4c:	f000 fcf6 	bl	800183c <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	00000000 	.word	0x00000000

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f000 fb7b 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f897 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f000 f93b 	bl	80010f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e7a:	f000 f8d9 	bl	8001030 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e7e:	f000 f90d 	bl	800109c <MX_USART1_UART_Init>
  init_gpio();
 8000e82:	f7ff ff85 	bl	8000d90 <init_gpio>
  init_spi1();
 8000e86:	f000 f96d 	bl	8001164 <init_spi1>
#if MODE_MASTER
  printf("Mode: Master\r\n");
#elif MODE_SLAVE
  printf("Mode: Slave\r\n");
 8000e8a:	4837      	ldr	r0, [pc, #220]	; (8000f68 <main+0x100>)
 8000e8c:	f003 f9ca 	bl	8004224 <puts>
#endif

  //initialize LoRa module
  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <main+0x104>)
 8000e92:	4a37      	ldr	r2, [pc, #220]	; (8000f70 <main+0x108>)
 8000e94:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <main+0x104>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <main+0x104>)
 8000e9e:	4a35      	ldr	r2, [pc, #212]	; (8000f74 <main+0x10c>)
 8000ea0:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <main+0x104>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <main+0x104>)
 8000eaa:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <main+0x108>)
 8000eac:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <main+0x104>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <main+0x104>)
 8000eb6:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <main+0x110>)
 8000eb8:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <main+0x114>)
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	; (8000f6c <main+0x104>)
 8000ebe:	601a      	str	r2, [r3, #0]

  printf("Configuring LoRa module\r\n");
 8000ec0:	482f      	ldr	r0, [pc, #188]	; (8000f80 <main+0x118>)
 8000ec2:	f003 f9af 	bl	8004224 <puts>
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	9305      	str	r3, [sp, #20]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9304      	str	r3, [sp, #16]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	a320      	add	r3, pc, #128	; (adr r3, 8000f60 <main+0xf8>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	4825      	ldr	r0, [pc, #148]	; (8000f7c <main+0x114>)
 8000ee6:	f002 fb6c 	bl	80035c2 <SX1278_init>
		  	  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
  printf("Done configuring LoRaModule\r\n");
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <main+0x11c>)
 8000eec:	f003 f99a 	bl	8004224 <puts>

#if MODE_MASTER
  ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
#elif MODE_SLAVE
  ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000ef0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <main+0x114>)
 8000ef8:	f002 faba 	bl	8003470 <SX1278_LoRaEntryRx>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <main+0x120>)
 8000f00:	6013      	str	r3, [r2, #0]
	  message += 1;

	  printf("Transmission: %d\r\n", ret);
	  printf("Package sent...\r\n");
#elif MODE_SLAVE
	  printf("Slave ...\r\n");
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <main+0x124>)
 8000f04:	f003 f98e 	bl	8004224 <puts>
	  HAL_Delay(800);
 8000f08:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f0c:	f000 fb8e 	bl	800162c <HAL_Delay>
	  printf("Receiving package...\r\n");
 8000f10:	481f      	ldr	r0, [pc, #124]	; (8000f90 <main+0x128>)
 8000f12:	f003 f987 	bl	8004224 <puts>

	  ret = SX1278_LoRaRxPacket(&SX1278);
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <main+0x114>)
 8000f18:	f002 fb0f 	bl	800353a <SX1278_LoRaRxPacket>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <main+0x120>)
 8000f22:	601a      	str	r2, [r3, #0]
	  printf("Received: %d\r\n", ret);
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <main+0x120>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <main+0x12c>)
 8000f2c:	f003 f8f4 	bl	8004118 <iprintf>
	  if (ret > 0) {
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <main+0x120>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd0e      	ble.n	8000f56 <main+0xee>
	  	SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <main+0x120>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4915      	ldr	r1, [pc, #84]	; (8000f98 <main+0x130>)
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <main+0x114>)
 8000f44:	f002 fb6a 	bl	800361c <SX1278_read>
	  	printf("Content (%d): %s\r\n", ret, buffer);
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <main+0x120>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <main+0x130>)
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4812      	ldr	r0, [pc, #72]	; (8000f9c <main+0x134>)
 8000f52:	f003 f8e1 	bl	8004118 <iprintf>
	  }
	  printf("Package received ...\r\n");
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <main+0x138>)
 8000f58:	f003 f964 	bl	8004224 <puts>
	  printf("Slave ...\r\n");
 8000f5c:	e7d1      	b.n	8000f02 <main+0x9a>
 8000f5e:	bf00      	nop
 8000f60:	19de5080 	.word	0x19de5080
 8000f64:	00000000 	.word	0x00000000
 8000f68:	08006388 	.word	0x08006388
 8000f6c:	2000029c 	.word	0x2000029c
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40010800 	.word	0x40010800
 8000f78:	200001fc 	.word	0x200001fc
 8000f7c:	200002b8 	.word	0x200002b8
 8000f80:	08006398 	.word	0x08006398
 8000f84:	080063b4 	.word	0x080063b4
 8000f88:	200003d0 	.word	0x200003d0
 8000f8c:	080063d4 	.word	0x080063d4
 8000f90:	080063e0 	.word	0x080063e0
 8000f94:	080063f8 	.word	0x080063f8
 8000f98:	200003d4 	.word	0x200003d4
 8000f9c:	08006408 	.word	0x08006408
 8000fa0:	0800641c 	.word	0x0800641c

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	2228      	movs	r2, #40	; 0x28
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fc48 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fe2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fdd9 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ff8:	f000 f8ae 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f001 f846 	bl	80020a8 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001022:	f000 f899 	bl	8001158 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3740      	adds	r7, #64	; 0x40
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_SPI1_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_SPI1_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SPI1_Init+0x64>)
 800103c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_SPI1_Init+0x64>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SPI1_Init+0x64>)
 8001064:	2218      	movs	r2, #24
 8001066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SPI1_Init+0x64>)
 800107c:	220a      	movs	r2, #10
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_SPI1_Init+0x64>)
 8001082:	f001 f99f 	bl	80023c4 <HAL_SPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 f864 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001fc 	.word	0x200001fc
 8001098:	40013000 	.word	0x40013000

0800109c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART1_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010d4:	f001 fdad 	bl	8002c32 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 f83b 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000254 	.word	0x20000254
 80010ec:	40013800 	.word	0x40013800

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_GPIO_Init+0x40>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <MX_GPIO_Init+0x40>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_GPIO_Init+0x40>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_GPIO_Init+0x40>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <MX_GPIO_Init+0x40>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <MX_GPIO_Init+0x40>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000

08001134 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800113c:	1d39      	adds	r1, r7, #4
 800113e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001142:	2201      	movs	r2, #1
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <__io_putchar+0x20>)
 8001146:	f001 fdc4 	bl	8002cd2 <HAL_UART_Transmit>

  return ch;
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000254 	.word	0x20000254

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <init_spi1>:


#include "spi.h"

void init_spi1(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <init_spi1+0x64>)
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <init_spi1+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <init_spi1+0x64>)
 8001170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001174:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <init_spi1+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <init_spi1+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <init_spi1+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <init_spi1+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <init_spi1+0x64>)
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <init_spi1+0x64>)
 8001198:	2218      	movs	r2, #24
 800119a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <init_spi1+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <init_spi1+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <init_spi1+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <init_spi1+0x64>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
//	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <init_spi1+0x64>)
 80011b6:	f001 f905 	bl	80023c4 <HAL_SPI_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <init_spi1+0x60>
	{
	  Error_Handler();
 80011c0:	f7ff ffca 	bl	8001158 <Error_Handler>
	}
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001fc 	.word	0x200001fc
 80011cc:	40013000 	.word	0x40013000

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_MspInit+0x40>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_MspInit+0x40>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_MspInit+0x40>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_MspInit+0x40>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_MspInit+0x40>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_MspInit+0x40>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <HAL_SPI_MspInit+0x88>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d12f      	bne.n	8001294 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 800123a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_SPI_MspInit+0x8c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001264:	23a0      	movs	r3, #160	; 0xa0
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_SPI_MspInit+0x90>)
 8001278:	f000 fae0 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_SPI_MspInit+0x90>)
 8001290:	f000 fad4 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40013000 	.word	0x40013000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x8c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d131      	bne.n	800132c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_UART_MspInit+0x90>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_UART_MspInit+0x90>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_UART_MspInit+0x90>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0x90>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_UART_MspInit+0x90>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_UART_MspInit+0x90>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_UART_MspInit+0x94>)
 800130e:	f000 fa95 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_MspInit+0x94>)
 8001328:	f000 fa88 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40013800 	.word	0x40013800
 8001338:	40021000 	.word	0x40021000
 800133c:	40010800 	.word	0x40010800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f935 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}

0800138e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
	return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <_kill>:

int _kill(int pid, int sig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013a6:	f002 fa17 	bl	80037d8 <__errno>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2216      	movs	r2, #22
 80013ae:	601a      	str	r2, [r3, #0]
	return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_exit>:

void _exit (int status)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffe7 	bl	800139c <_kill>
	while (1) {}		/* Make sure we hang here */
 80013ce:	e7fe      	b.n	80013ce <_exit+0x12>

080013d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
	}

return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e009      	b.n	8001430 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe85 	bl	8001134 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf1      	blt.n	800141c <_write+0x12>
	}
	return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_close>:

int _close(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return -1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001468:	605a      	str	r2, [r3, #4]
	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f002 f980 	bl	80037d8 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20005000 	.word	0x20005000
 8001504:	00000400 	.word	0x00000400
 8001508:	200005d4 	.word	0x200005d4
 800150c:	200005f0 	.word	0x200005f0

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800151c:	f7ff fff8 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001522:	490c      	ldr	r1, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001538:	4c09      	ldr	r4, [pc, #36]	; (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f002 f94d 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7ff fc8d 	bl	8000e68 <main>
  bx lr
 800154e:	4770      	bx	lr
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001558:	0800686c 	.word	0x0800686c
  ldr r2, =_sbss
 800155c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001560:	200005ec 	.word	0x200005ec

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x28>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f92b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fe24 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f935 	bl	8001822 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f90b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_IncTick+0x1c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x20>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_IncTick+0x20>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000008 	.word	0x20000008
 8001614:	200005d8 	.word	0x200005d8

08001618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_GetTick+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	200005d8 	.word	0x200005d8

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff fff0 	bl	8001618 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffe0 	bl	8001618 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff49 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff5e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffb0 	bl	8001790 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e169      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001850:	2201      	movs	r2, #1
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8158 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a9a      	ldr	r2, [pc, #616]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001878:	4a98      	ldr	r2, [pc, #608]	; (8001adc <HAL_GPIO_Init+0x2a0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d875      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800187e:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d058      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001884:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d86f      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 800188a:	4a96      	ldr	r2, [pc, #600]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d052      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 8001890:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <HAL_GPIO_Init+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d869      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 8001896:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04c      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 800189c:	4a92      	ldr	r2, [pc, #584]	; (8001ae8 <HAL_GPIO_Init+0x2ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d863      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018a2:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d046      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
 80018a8:	4a90      	ldr	r2, [pc, #576]	; (8001aec <HAL_GPIO_Init+0x2b0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d85d      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d82a      	bhi.n	8001908 <HAL_GPIO_Init+0xcc>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d859      	bhi.n	800196a <HAL_GPIO_Init+0x12e>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_GPIO_Init+0x80>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001911 	.word	0x08001911
 80018c4:	08001923 	.word	0x08001923
 80018c8:	08001965 	.word	0x08001965
 80018cc:	0800196b 	.word	0x0800196b
 80018d0:	0800196b 	.word	0x0800196b
 80018d4:	0800196b 	.word	0x0800196b
 80018d8:	0800196b 	.word	0x0800196b
 80018dc:	0800196b 	.word	0x0800196b
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	0800196b 	.word	0x0800196b
 80018e8:	0800196b 	.word	0x0800196b
 80018ec:	0800196b 	.word	0x0800196b
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	0800196b 	.word	0x0800196b
 80018f8:	0800196b 	.word	0x0800196b
 80018fc:	0800196b 	.word	0x0800196b
 8001900:	08001919 	.word	0x08001919
 8001904:	0800192d 	.word	0x0800192d
 8001908:	4a79      	ldr	r2, [pc, #484]	; (8001af0 <HAL_GPIO_Init+0x2b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190e:	e02c      	b.n	800196a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e029      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	3304      	adds	r3, #4
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e024      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	3308      	adds	r3, #8
 8001928:	623b      	str	r3, [r7, #32]
          break;
 800192a:	e01f      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	330c      	adds	r3, #12
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e01a      	b.n	800196c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193e:	2304      	movs	r3, #4
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e013      	b.n	800196c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800194c:	2308      	movs	r3, #8
 800194e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	611a      	str	r2, [r3, #16]
          break;
 8001956:	e009      	b.n	800196c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	615a      	str	r2, [r3, #20]
          break;
 8001962:	e003      	b.n	800196c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x130>
          break;
 800196a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2bff      	cmp	r3, #255	; 0xff
 8001970:	d801      	bhi.n	8001976 <HAL_GPIO_Init+0x13a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	e001      	b.n	800197a <HAL_GPIO_Init+0x13e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d802      	bhi.n	8001988 <HAL_GPIO_Init+0x14c>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x152>
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3b08      	subs	r3, #8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	210f      	movs	r1, #15
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	6a39      	ldr	r1, [r7, #32]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 80b1 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b4d      	ldr	r3, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a4c      	ldr	r2, [pc, #304]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x2b8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <HAL_GPIO_Init+0x2c0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3e      	ldr	r2, [pc, #248]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e0>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1ee>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	492c      	ldr	r1, [pc, #176]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4928      	ldr	r1, [pc, #160]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4922      	ldr	r1, [pc, #136]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491e      	ldr	r1, [pc, #120]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4914      	ldr	r1, [pc, #80]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d021      	beq.n	8001b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e021      	b.n	8001b1e <HAL_GPIO_Init+0x2e2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae8e 	bne.w	8001850 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e272      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd0:	4b8f      	ldr	r3, [pc, #572]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
 8001bdc:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e24c      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x76>
 8001c0c:	4b80      	ldr	r3, [pc, #512]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7f      	ldr	r2, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x98>
 8001c22:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b78      	ldr	r3, [pc, #480]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a77      	ldr	r2, [pc, #476]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xbc>
 8001c46:	4b72      	ldr	r3, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a71      	ldr	r2, [pc, #452]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c60:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6a      	ldr	r2, [pc, #424]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fcca 	bl	8001618 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fcc6 	bl	8001618 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e200      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe4>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcb6 	bl	8001618 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fcb2 	bl	8001618 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1ec      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x10c>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1c0      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4939      	ldr	r1, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fc6b 	bl	8001618 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fc67 	bl	8001618 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1a1      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4927      	ldr	r1, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc4a 	bl	8001618 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fc46 	bl	8001618 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e180      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d019      	beq.n	8001dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fc2a 	bl	8001618 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc26 	bl	8001618 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e160      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 face 	bl	8002388 <RCC_Delay>
 8001dec:	e01c      	b.n	8001e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fc10 	bl	8001618 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfa:	e00f      	b.n	8001e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fc0c 	bl	8001618 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d908      	bls.n	8001e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e146      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	42420000 	.word	0x42420000
 8001e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e9      	bne.n	8001dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a6 	beq.w	8001f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a87      	ldr	r2, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b85      	ldr	r3, [pc, #532]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b82      	ldr	r3, [pc, #520]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fbcd 	bl	8001618 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fbc9 	bl	8001618 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b64      	cmp	r3, #100	; 0x64
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e103      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x312>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x334>
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x356>
 8001ee0:	4b61      	ldr	r3, [pc, #388]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a60      	ldr	r2, [pc, #384]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a5a      	ldr	r2, [pc, #360]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b58      	ldr	r3, [pc, #352]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a57      	ldr	r2, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fb7d 	bl	8001618 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fb79 	bl	8001618 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0b1      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x37e>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb67 	bl	8001618 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fb63 	bl	8001618 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e09b      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d061      	beq.n	800205c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d146      	bne.n	800202e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fb37 	bl	8001618 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fb33 	bl	8001618 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e06d      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4921      	ldr	r1, [pc, #132]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a19      	ldr	r1, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	491b      	ldr	r1, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fb07 	bl	8001618 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fb03 	bl	8001618 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e03d      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x46a>
 800202c:	e035      	b.n	800209a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff faf0 	bl	8001618 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff faec 	bl	8001618 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e026      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x498>
 800205a:	e01e      	b.n	800209a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e019      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x500>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d0      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4965      	ldr	r1, [pc, #404]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800210e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d040      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e073      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4936      	ldr	r1, [pc, #216]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7ff fa3e 	bl	8001618 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7ff fa3a 	bl	8001618 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e053      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d210      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	4922      	ldr	r1, [pc, #136]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1cc>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f99c 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08006434 	.word	0x08006434
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCC_GetSysClockFreq+0x94>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x30>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x36>
 80022aa:	e027      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	e027      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d010      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_GetSysClockFreq+0x94>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0c5b      	lsrs	r3, r3, #17
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <HAL_RCC_GetSysClockFreq+0x98>)
 80022de:	fb03 f202 	mul.w	r2, r3, r2
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e004      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	613b      	str	r3, [r7, #16]
      break;
 80022fa:	e002      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fe:	613b      	str	r3, [r7, #16]
      break;
 8002300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002302:	693b      	ldr	r3, [r7, #16]
}
 8002304:	4618      	mov	r0, r3
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	007a1200 	.word	0x007a1200
 8002318:	0800644c 	.word	0x0800644c
 800231c:	0800645c 	.word	0x0800645c
 8002320:	003d0900 	.word	0x003d0900

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_RCC_GetHCLKFreq+0x10>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000000 	.word	0x20000000

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800233c:	f7ff fff2 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4903      	ldr	r1, [pc, #12]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	08006444 	.word	0x08006444

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002364:	f7ff ffde 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0adb      	lsrs	r3, r3, #11
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08006444 	.word	0x08006444

08002388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCC_Delay+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <RCC_Delay+0x38>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a4:	bf00      	nop
  }
  while (Delay --);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <RCC_Delay+0x1c>
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000000 	.word	0x20000000
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e076      	b.n	80024c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e6:	d009      	beq.n	80023fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
 80023ee:	e005      	b.n	80023fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fefc 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002432:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	ea42 0103 	orr.w	r1, r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	0c1a      	lsrs	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f002 0204 	and.w	r2, r2, #4
 80024a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024dc:	f7ff f89c 	bl	8001618 <HAL_GetTick>
 80024e0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	e12a      	b.n	800274c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_SPI_Transmit+0x36>
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e122      	b.n	800274c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_SPI_Transmit+0x48>
 8002510:	2302      	movs	r3, #2
 8002512:	e11b      	b.n	800274c <HAL_SPI_Transmit+0x280>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2203      	movs	r2, #3
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002562:	d10f      	bne.n	8002584 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002582:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d007      	beq.n	80025a2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025aa:	d152      	bne.n	8002652 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_Transmit+0xee>
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d145      	bne.n	8002646 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025de:	e032      	b.n	8002646 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d112      	bne.n	8002614 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	86da      	strh	r2, [r3, #54]	; 0x36
 8002612:	e018      	b.n	8002646 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002614:	f7ff f800 	bl	8001618 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_Transmit+0x160>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_Transmit+0x166>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e082      	b.n	800274c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1c7      	bne.n	80025e0 <HAL_SPI_Transmit+0x114>
 8002650:	e053      	b.n	80026fa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_Transmit+0x194>
 800265a:	8b7b      	ldrh	r3, [r7, #26]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d147      	bne.n	80026f0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002686:	e033      	b.n	80026f0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d113      	bne.n	80026be <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80026bc:	e018      	b.n	80026f0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026be:	f7fe ffab 	bl	8001618 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d803      	bhi.n	80026d6 <HAL_SPI_Transmit+0x20a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d102      	bne.n	80026dc <HAL_SPI_Transmit+0x210>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e02d      	b.n	800274c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1c6      	bne.n	8002688 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa66 	bl	8002bd0 <SPI_EndRxTxTransaction>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800274a:	2300      	movs	r3, #0
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002762:	2301      	movs	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002766:	f7fe ff57 	bl	8001618 <HAL_GetTick>
 800276a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002772:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800277e:	7ffb      	ldrb	r3, [r7, #31]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d00c      	beq.n	800279e <HAL_SPI_TransmitReceive+0x4a>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278a:	d106      	bne.n	800279a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_TransmitReceive+0x46>
 8002794:	7ffb      	ldrb	r3, [r7, #31]
 8002796:	2b04      	cmp	r3, #4
 8002798:	d001      	beq.n	800279e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	e17f      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x5c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x5c>
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e174      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x6e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e16d      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d003      	beq.n	80027de <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	887a      	ldrh	r2, [r7, #2]
 80027ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	887a      	ldrh	r2, [r7, #2]
 8002806:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d007      	beq.n	8002832 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283a:	d17e      	bne.n	800293a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_SPI_TransmitReceive+0xf6>
 8002844:	8afb      	ldrh	r3, [r7, #22]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d16c      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800286e:	e059      	b.n	8002924 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d11b      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x162>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d016      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x162>
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	2b01      	cmp	r3, #1
 800288c:	d113      	bne.n	80028b6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d119      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x1a4>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d014      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	b292      	uxth	r2, r2
 80028da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	1c9a      	adds	r2, r3, #2
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028f8:	f7fe fe8e 	bl	8001618 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002904:	429a      	cmp	r2, r3
 8002906:	d80d      	bhi.n	8002924 <HAL_SPI_TransmitReceive+0x1d0>
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d009      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0bc      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1a0      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x11c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d19b      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x11c>
 8002938:	e082      	b.n	8002a40 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x1f4>
 8002942:	8afb      	ldrh	r3, [r7, #22]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d171      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296e:	e05d      	b.n	8002a2c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d11c      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x264>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x264>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2b01      	cmp	r3, #1
 800298c:	d114      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d119      	bne.n	80029fa <HAL_SPI_TransmitReceive+0x2a6>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d014      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029fa:	f7fe fe0d 	bl	8001618 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d803      	bhi.n	8002a12 <HAL_SPI_TransmitReceive+0x2be>
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d102      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x2c4>
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e038      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d19c      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x21c>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d197      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a40:	6a3a      	ldr	r2, [r7, #32]
 8002a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f8c3 	bl	8002bd0 <SPI_EndRxTxTransaction>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e01d      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3728      	adds	r7, #40	; 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab4:	b2db      	uxtb	r3, r3
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ad0:	f7fe fda2 	bl	8001618 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ae0:	f7fe fd9a 	bl	8001618 <HAL_GetTick>
 8002ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	0d1b      	lsrs	r3, r3, #20
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af6:	e054      	b.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d050      	beq.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b00:	f7fe fd8a 	bl	8001618 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d902      	bls.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d13d      	bne.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d111      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	d004      	beq.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d107      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d10f      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e017      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d19b      	bne.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2201      	movs	r2, #1
 8002be4:	2102      	movs	r1, #2
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ff6a 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e013      	b.n	8002c2a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ff57 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e000      	b.n	8002c2a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e042      	b.n	8002cca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe fb25 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2224      	movs	r2, #36	; 0x24
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c74:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f972 	bl	8002f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c8a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c9a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002caa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b08a      	sub	sp, #40	; 0x28
 8002cd6:	af02      	add	r7, sp, #8
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d175      	bne.n	8002dde <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_UART_Transmit+0x2c>
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06e      	b.n	8002de0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2221      	movs	r2, #33	; 0x21
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fc82 	bl	8001618 <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d108      	bne.n	8002d3e <HAL_UART_Transmit+0x6c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e003      	b.n	8002d46 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d46:	e02e      	b.n	8002da6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2180      	movs	r1, #128	; 0x80
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f848 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e03a      	b.n	8002de0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d7e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	3302      	adds	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e007      	b.n	8002d98 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1cb      	bne.n	8002d48 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f814 	bl	8002de8 <UART_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e006      	b.n	8002de0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df8:	e03b      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d037      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fe fc09 	bl	8001618 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e03a      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d023      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d020      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d01d      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d116      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f81d 	bl	8002e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2208      	movs	r2, #8
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0b4      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b095      	sub	sp, #84	; 0x54
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ec2:	643a      	str	r2, [r7, #64]	; 0x40
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eca:	e841 2300 	strex	r3, r2, [r1]
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e5      	bne.n	8002ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3314      	adds	r3, #20
 8002edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e5      	bne.n	8002ed6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d119      	bne.n	8002f46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 0310 	bic.w	r3, r3, #16
 8002f28:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f32:	61ba      	str	r2, [r7, #24]
 8002f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6979      	ldr	r1, [r7, #20]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f54:	bf00      	nop
 8002f56:	3754      	adds	r7, #84	; 0x54
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
	...

08002f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f9a:	f023 030c 	bic.w	r3, r3, #12
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <UART_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d103      	bne.n	8002fd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fc8:	f7ff f9ca 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	e002      	b.n	8002fd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f7ff f9b2 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <UART_SetConfig+0x118>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	0119      	lsls	r1, r3, #4
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <UART_SetConfig+0x118>)
 800300e:	fba3 0302 	umull	r0, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	fb00 f303 	mul.w	r3, r0, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <UART_SetConfig+0x118>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	4419      	add	r1, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	009a      	lsls	r2, r3, #2
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fbb2 f2f3 	udiv	r2, r2, r3
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <UART_SetConfig+0x118>)
 8003046:	fba3 0302 	umull	r0, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2064      	movs	r0, #100	; 0x64
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	3332      	adds	r3, #50	; 0x32
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <UART_SetConfig+0x118>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	440a      	add	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40013800 	.word	0x40013800
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <SX1278_SPIRead>:
 *  Created on: Oct 6, 2024
 *      Author: Phat
 */

#include "sx1278.hpp"
uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fb39 	bl	8003708 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb54 	bl	8003748 <SX1278_hw_SPIReadByte>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 faf1 	bl	8003692 <SX1278_hw_SetNSS>
	return tmp;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
 80030c6:	4613      	mov	r3, r2
 80030c8:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fade 	bl	8003692 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4619      	mov	r1, r3
 80030e4:	4610      	mov	r0, r2
 80030e6:	f000 fb0f 	bl	8003708 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	78ba      	ldrb	r2, [r7, #2]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb08 	bl	8003708 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fac7 	bl	8003692 <SX1278_hw_SetNSS>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	72fb      	strb	r3, [r7, #11]
 800311c:	4613      	mov	r3, r2
 800311e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8003120:	7abb      	ldrb	r3, [r7, #10]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d927      	bls.n	8003176 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fab0 	bl	8003692 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	7afa      	ldrb	r2, [r7, #11]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fae4 	bl	8003708 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8003140:	2300      	movs	r3, #0
 8003142:	75fb      	strb	r3, [r7, #23]
 8003144:	e00c      	b.n	8003160 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	18d4      	adds	r4, r2, r3
 8003150:	4608      	mov	r0, r1
 8003152:	f000 faf9 	bl	8003748 <SX1278_hw_SPIReadByte>
 8003156:	4603      	mov	r3, r0
 8003158:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	3301      	adds	r3, #1
 800315e:	75fb      	strb	r3, [r7, #23]
 8003160:	7dfa      	ldrb	r2, [r7, #23]
 8003162:	7abb      	ldrb	r3, [r7, #10]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3ee      	bcc.n	8003146 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fa8f 	bl	8003692 <SX1278_hw_SetNSS>
 8003174:	e000      	b.n	8003178 <SX1278_SPIBurstRead+0x6c>
		return;
 8003176:	bf00      	nop
	}
}
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}

0800317e <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	461a      	mov	r2, r3
 800318a:	460b      	mov	r3, r1
 800318c:	72fb      	strb	r3, [r7, #11]
 800318e:	4613      	mov	r3, r2
 8003190:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8003192:	7abb      	ldrb	r3, [r7, #10]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d929      	bls.n	80031ec <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa77 	bl	8003692 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	7afb      	ldrb	r3, [r7, #11]
 80031aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f000 faa8 	bl	8003708 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
 80031bc:	e00b      	b.n	80031d6 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	f000 fa9c 	bl	8003708 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	3301      	adds	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	7dfa      	ldrb	r2, [r7, #23]
 80031d8:	7abb      	ldrb	r3, [r7, #10]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3ef      	bcc.n	80031be <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fa54 	bl	8003692 <SX1278_hw_SetNSS>
 80031ea:	e000      	b.n	80031ee <SX1278_SPIBurstWrite+0x70>
		return;
 80031ec:	bf00      	nop
	}
}
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f90d 	bl	800341c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8003202:	200f      	movs	r0, #15
 8003204:	f000 fac6 	bl	8003794 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f917 	bl	800343c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	04d9      	lsls	r1, r3, #19
 800321e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8003222:	04d0      	lsls	r0, r2, #19
 8003224:	4a6f      	ldr	r2, [pc, #444]	; (80033e4 <SX1278_config+0x1f0>)
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	f7fd fc2d 	bl	8000a88 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8003236:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	0c02      	lsrs	r2, r0, #16
 8003244:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003248:	0c0b      	lsrs	r3, r1, #16
 800324a:	b2d3      	uxtb	r3, r2
 800324c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800324e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	0a02      	lsrs	r2, r0, #8
 800325c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003260:	0a0b      	lsrs	r3, r1, #8
 8003262:	b2d3      	uxtb	r3, r2
 8003264:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8003266:	7c3b      	ldrb	r3, [r7, #16]
 8003268:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800326a:	f107 020c 	add.w	r2, r7, #12
 800326e:	2303      	movs	r3, #3
 8003270:	2106      	movs	r1, #6
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff83 	bl	800317e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8003278:	2234      	movs	r2, #52	; 0x34
 800327a:	2139      	movs	r1, #57	; 0x39
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff1c 	bl	80030ba <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7c1b      	ldrb	r3, [r3, #16]
 8003286:	461a      	mov	r2, r3
 8003288:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <SX1278_config+0x1f4>)
 800328a:	5c9b      	ldrb	r3, [r3, r2]
 800328c:	461a      	mov	r2, r3
 800328e:	2109      	movs	r1, #9
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff12 	bl	80030ba <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8003296:	220b      	movs	r2, #11
 8003298:	210b      	movs	r1, #11
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff0d 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80032a0:	2223      	movs	r2, #35	; 0x23
 80032a2:	210c      	movs	r1, #12
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff08 	bl	80030ba <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c5b      	ldrb	r3, [r3, #17]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <SX1278_config+0x1f8>)
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	2b06      	cmp	r3, #6
 80032b6:	d147      	bne.n	8003348 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7c9b      	ldrb	r3, [r3, #18]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <SX1278_config+0x1fc>)
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7cdb      	ldrb	r3, [r3, #19]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <SX1278_config+0x200>)
 80032ce:	5c5b      	ldrb	r3, [r3, r1]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80032d8:	3301      	adds	r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	211d      	movs	r1, #29
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff feea 	bl	80030ba <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7c5b      	ldrb	r3, [r3, #17]
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <SX1278_config+0x1f8>)
 80032ee:	5c9b      	ldrb	r3, [r3, r2]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7d1b      	ldrb	r3, [r3, #20]
 80032f8:	4619      	mov	r1, r3
 80032fa:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <SX1278_config+0x204>)
 80032fc:	5c5b      	ldrb	r3, [r3, r1]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4413      	add	r3, r2
 8003304:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003306:	3303      	adds	r3, #3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	211e      	movs	r1, #30
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fed3 	bl	80030ba <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8003314:	2131      	movs	r1, #49	; 0x31
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff feb0 	bl	800307c <SX1278_SPIRead>
 800331c:	4603      	mov	r3, r0
 800331e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	f023 0307 	bic.w	r3, r3, #7
 8003326:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	f043 0305 	orr.w	r3, r3, #5
 800332e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	461a      	mov	r2, r3
 8003334:	2131      	movs	r1, #49	; 0x31
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff febf 	bl	80030ba <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800333c:	220c      	movs	r2, #12
 800333e:	2137      	movs	r1, #55	; 0x37
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff feba 	bl	80030ba <SX1278_SPIWrite>
 8003346:	e029      	b.n	800339c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7c9b      	ldrb	r3, [r3, #18]
 800334c:	461a      	mov	r2, r3
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <SX1278_config+0x1fc>)
 8003350:	5c9b      	ldrb	r3, [r3, r2]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7cdb      	ldrb	r3, [r3, #19]
 800335a:	4619      	mov	r1, r3
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <SX1278_config+0x200>)
 800335e:	5c5b      	ldrb	r3, [r3, r1]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003364:	4413      	add	r3, r2
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	211d      	movs	r1, #29
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fea4 	bl	80030ba <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7c5b      	ldrb	r3, [r3, #17]
 8003376:	461a      	mov	r2, r3
 8003378:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <SX1278_config+0x1f8>)
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7d1b      	ldrb	r3, [r3, #20]
 8003384:	4619      	mov	r1, r3
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <SX1278_config+0x204>)
 8003388:	5c5b      	ldrb	r3, [r3, r1]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800338e:	4413      	add	r3, r2
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	211e      	movs	r1, #30
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fe8f 	bl	80030ba <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800339c:	2204      	movs	r2, #4
 800339e:	2126      	movs	r1, #38	; 0x26
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fe8a 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80033a6:	2208      	movs	r2, #8
 80033a8:	211f      	movs	r1, #31
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fe85 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80033b0:	2200      	movs	r2, #0
 80033b2:	2120      	movs	r1, #32
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fe80 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80033ba:	2208      	movs	r2, #8
 80033bc:	2121      	movs	r1, #33	; 0x21
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fe7b 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80033c4:	2201      	movs	r2, #1
 80033c6:	2141      	movs	r1, #65	; 0x41
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fe76 	bl	80030ba <SX1278_SPIWrite>
	module->readBytes = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f810 	bl	80033fc <SX1278_standby>
}
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	01e84800 	.word	0x01e84800
 80033e8:	08006460 	.word	0x08006460
 80033ec:	08006464 	.word	0x08006464
 80033f0:	0800646c 	.word	0x0800646c
 80033f4:	08006478 	.word	0x08006478
 80033f8:	0800647c 	.word	0x0800647c

080033fc <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8003404:	2209      	movs	r2, #9
 8003406:	2101      	movs	r1, #1
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fe56 	bl	80030ba <SX1278_SPIWrite>
	module->status = STANDBY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	759a      	strb	r2, [r3, #22]
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8003424:	2208      	movs	r2, #8
 8003426:	2101      	movs	r1, #1
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fe46 	bl	80030ba <SX1278_SPIWrite>
	module->status = SLEEP;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	759a      	strb	r2, [r3, #22]
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8003444:	2288      	movs	r2, #136	; 0x88
 8003446:	2101      	movs	r1, #1
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fe36 	bl	80030ba <SX1278_SPIWrite>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	2112      	movs	r1, #18
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fe29 	bl	80030ba <SX1278_SPIWrite>
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	460b      	mov	r3, r1
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	7afa      	ldrb	r2, [r7, #11]
 8003482:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff feb5 	bl	80031f4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800348a:	2284      	movs	r2, #132	; 0x84
 800348c:	214d      	movs	r1, #77	; 0x4d
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff fe13 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	2124      	movs	r1, #36	; 0x24
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff fe0e 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800349e:	2201      	movs	r2, #1
 80034a0:	2140      	movs	r1, #64	; 0x40
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff fe09 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80034a8:	223f      	movs	r2, #63	; 0x3f
 80034aa:	2111      	movs	r1, #17
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fe04 	bl	80030ba <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff ffcf 	bl	8003456 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	461a      	mov	r2, r3
 80034bc:	2122      	movs	r1, #34	; 0x22
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fdfb 	bl	80030ba <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80034c4:	210f      	movs	r1, #15
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fdd8 	bl	800307c <SX1278_SPIRead>
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	461a      	mov	r2, r3
 80034d4:	210d      	movs	r1, #13
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fdef 	bl	80030ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80034dc:	228d      	movs	r2, #141	; 0x8d
 80034de:	2101      	movs	r1, #1
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fdea 	bl	80030ba <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80034ee:	2118      	movs	r1, #24
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff fdc3 	bl	800307c <SX1278_SPIRead>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d104      	bne.n	800350a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2203      	movs	r2, #3
 8003504:	759a      	strb	r2, [r3, #22]
			return 1;
 8003506:	2301      	movs	r3, #1
 8003508:	e013      	b.n	8003532 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3b01      	subs	r3, #1
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f8d0 	bl	80036c0 <SX1278_hw_Reset>
			SX1278_config(module);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fe67 	bl	80031f4 <SX1278_config>
			return 0;
 8003526:	2300      	movs	r3, #0
 8003528:	e003      	b.n	8003532 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800352a:	2001      	movs	r0, #1
 800352c:	f000 f932 	bl	8003794 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8003530:	e7dd      	b.n	80034ee <SX1278_LoRaEntryRx+0x7e>
	}
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f92f 	bl	80037aa <SX1278_hw_GetDIO0>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d030      	beq.n	80035b4 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3317      	adds	r3, #23
 8003556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f973 	bl	8003848 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8003562:	2110      	movs	r1, #16
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fd89 	bl	800307c <SX1278_SPIRead>
 800356a:	4603      	mov	r3, r0
 800356c:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	461a      	mov	r2, r3
 8003572:	210d      	movs	r1, #13
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fda0 	bl	80030ba <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7c5b      	ldrb	r3, [r3, #17]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7d5b      	ldrb	r3, [r3, #21]
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e005      	b.n	8003596 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800358a:	2113      	movs	r1, #19
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fd75 	bl	800307c <SX1278_SPIRead>
 8003592:	4603      	mov	r3, r0
 8003594:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 0217 	add.w	r2, r3, #23
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2100      	movs	r1, #0
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fdb3 	bl	800310c <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ff51 	bl	8003456 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f848 	bl	8003668 <SX1278_hw_init>
	module->frequency = frequency;
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035de:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	7e3a      	ldrb	r2, [r7, #24]
 80035e6:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	7f3a      	ldrb	r2, [r7, #28]
 80035ec:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80035f4:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80035fc:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003604:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800360c:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff fdf0 	bl	80031f4 <SX1278_config>
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	d003      	beq.n	800363e <SX1278_read+0x22>
		length = module->readBytes;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800363c:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3317      	adds	r3, #23
 8003642:	79fa      	ldrb	r2, [r7, #7]
 8003644:	4619      	mov	r1, r3
 8003646:	68b8      	ldr	r0, [r7, #8]
 8003648:	f000 f8f0 	bl	800382c <memcpy>
	rxBuf[length] = '\0';
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4413      	add	r3, r2
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 800365e:	79fb      	ldrb	r3, [r7, #7]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <SX1278_hw_init>:
 */

#include "sx1278_hw.hpp"
#include <string.h>

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003670:	2101      	movs	r1, #1
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f80d 	bl	8003692 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6858      	ldr	r0, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	2201      	movs	r2, #1
 8003684:	4619      	mov	r1, r3
 8003686:	f7fe fa74 	bl	8001b72 <HAL_GPIO_WritePin>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6958      	ldr	r0, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	b299      	uxth	r1, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	f7fe fa5d 	bl	8001b72 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80036c8:	2101      	movs	r1, #1
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffe1 	bl	8003692 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6858      	ldr	r0, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fe fa48 	bl	8001b72 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f000 f856 	bl	8003794 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6858      	ldr	r0, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2201      	movs	r2, #1
 80036f4:	4619      	mov	r1, r3
 80036f6:	f7fe fa3c 	bl	8001b72 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80036fa:	2064      	movs	r0, #100	; 0x64
 80036fc:	f000 f84a 	bl	8003794 <SX1278_hw_DelayMs>
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8003714:	2100      	movs	r1, #0
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffbb 	bl	8003692 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6998      	ldr	r0, [r3, #24]
 8003720:	1cf9      	adds	r1, r7, #3
 8003722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003726:	2201      	movs	r2, #1
 8003728:	f7fe fed0 	bl	80024cc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800372c:	bf00      	nop
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f9b7 	bl	8002aa6 <HAL_SPI_GetState>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d1f7      	bne.n	800372e <SX1278_hw_SPICommand+0x26>
		;
}
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8003754:	2300      	movs	r3, #0
 8003756:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff99 	bl	8003692 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6998      	ldr	r0, [r3, #24]
 8003764:	f107 020e 	add.w	r2, r7, #14
 8003768:	f107 010f 	add.w	r1, r7, #15
 800376c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2301      	movs	r3, #1
 8003774:	f7fe ffee 	bl	8002754 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003778:	bf00      	nop
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f991 	bl	8002aa6 <HAL_SPI_GetState>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d1f7      	bne.n	800377a <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800378a:	7bbb      	ldrb	r3, [r7, #14]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fd ff45 	bl	800162c <HAL_Delay>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f7fe f9c0 	bl	8001b44 <HAL_GPIO_ReadPin>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <__errno>:
 80037d8:	4b01      	ldr	r3, [pc, #4]	; (80037e0 <__errno+0x8>)
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2000000c 	.word	0x2000000c

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	2600      	movs	r6, #0
 80037e8:	4d0c      	ldr	r5, [pc, #48]	; (800381c <__libc_init_array+0x38>)
 80037ea:	4c0d      	ldr	r4, [pc, #52]	; (8003820 <__libc_init_array+0x3c>)
 80037ec:	1b64      	subs	r4, r4, r5
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	f002 fdbc 	bl	8006370 <_init>
 80037f8:	2600      	movs	r6, #0
 80037fa:	4d0a      	ldr	r5, [pc, #40]	; (8003824 <__libc_init_array+0x40>)
 80037fc:	4c0a      	ldr	r4, [pc, #40]	; (8003828 <__libc_init_array+0x44>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	42a6      	cmp	r6, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f855 3b04 	ldr.w	r3, [r5], #4
 800380c:	4798      	blx	r3
 800380e:	3601      	adds	r6, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f855 3b04 	ldr.w	r3, [r5], #4
 8003816:	4798      	blx	r3
 8003818:	3601      	adds	r6, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	08006864 	.word	0x08006864
 8003820:	08006864 	.word	0x08006864
 8003824:	08006864 	.word	0x08006864
 8003828:	08006868 	.word	0x08006868

0800382c <memcpy>:
 800382c:	440a      	add	r2, r1
 800382e:	4291      	cmp	r1, r2
 8003830:	f100 33ff 	add.w	r3, r0, #4294967295
 8003834:	d100      	bne.n	8003838 <memcpy+0xc>
 8003836:	4770      	bx	lr
 8003838:	b510      	push	{r4, lr}
 800383a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800383e:	4291      	cmp	r1, r2
 8003840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003844:	d1f9      	bne.n	800383a <memcpy+0xe>
 8003846:	bd10      	pop	{r4, pc}

08003848 <memset>:
 8003848:	4603      	mov	r3, r0
 800384a:	4402      	add	r2, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <__cvt>:
 8003858:	2b00      	cmp	r3, #0
 800385a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385e:	461f      	mov	r7, r3
 8003860:	bfbb      	ittet	lt
 8003862:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003866:	461f      	movlt	r7, r3
 8003868:	2300      	movge	r3, #0
 800386a:	232d      	movlt	r3, #45	; 0x2d
 800386c:	b088      	sub	sp, #32
 800386e:	4614      	mov	r4, r2
 8003870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003872:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003874:	7013      	strb	r3, [r2, #0]
 8003876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003878:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800387c:	f023 0820 	bic.w	r8, r3, #32
 8003880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003884:	d005      	beq.n	8003892 <__cvt+0x3a>
 8003886:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800388a:	d100      	bne.n	800388e <__cvt+0x36>
 800388c:	3501      	adds	r5, #1
 800388e:	2302      	movs	r3, #2
 8003890:	e000      	b.n	8003894 <__cvt+0x3c>
 8003892:	2303      	movs	r3, #3
 8003894:	aa07      	add	r2, sp, #28
 8003896:	9204      	str	r2, [sp, #16]
 8003898:	aa06      	add	r2, sp, #24
 800389a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800389e:	e9cd 3500 	strd	r3, r5, [sp]
 80038a2:	4622      	mov	r2, r4
 80038a4:	463b      	mov	r3, r7
 80038a6:	f000 fe13 	bl	80044d0 <_dtoa_r>
 80038aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038ae:	4606      	mov	r6, r0
 80038b0:	d102      	bne.n	80038b8 <__cvt+0x60>
 80038b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038b4:	07db      	lsls	r3, r3, #31
 80038b6:	d522      	bpl.n	80038fe <__cvt+0xa6>
 80038b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038bc:	eb06 0905 	add.w	r9, r6, r5
 80038c0:	d110      	bne.n	80038e4 <__cvt+0x8c>
 80038c2:	7833      	ldrb	r3, [r6, #0]
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d10a      	bne.n	80038de <__cvt+0x86>
 80038c8:	2200      	movs	r2, #0
 80038ca:	2300      	movs	r3, #0
 80038cc:	4620      	mov	r0, r4
 80038ce:	4639      	mov	r1, r7
 80038d0:	f7fd f86a 	bl	80009a8 <__aeabi_dcmpeq>
 80038d4:	b918      	cbnz	r0, 80038de <__cvt+0x86>
 80038d6:	f1c5 0501 	rsb	r5, r5, #1
 80038da:	f8ca 5000 	str.w	r5, [sl]
 80038de:	f8da 3000 	ldr.w	r3, [sl]
 80038e2:	4499      	add	r9, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	2300      	movs	r3, #0
 80038e8:	4620      	mov	r0, r4
 80038ea:	4639      	mov	r1, r7
 80038ec:	f7fd f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80038f0:	b108      	cbz	r0, 80038f6 <__cvt+0x9e>
 80038f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80038f6:	2230      	movs	r2, #48	; 0x30
 80038f8:	9b07      	ldr	r3, [sp, #28]
 80038fa:	454b      	cmp	r3, r9
 80038fc:	d307      	bcc.n	800390e <__cvt+0xb6>
 80038fe:	4630      	mov	r0, r6
 8003900:	9b07      	ldr	r3, [sp, #28]
 8003902:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	b008      	add	sp, #32
 800390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	9107      	str	r1, [sp, #28]
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e7f0      	b.n	80038f8 <__cvt+0xa0>

08003916 <__exponent>:
 8003916:	4603      	mov	r3, r0
 8003918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800391a:	2900      	cmp	r1, #0
 800391c:	f803 2b02 	strb.w	r2, [r3], #2
 8003920:	bfb6      	itet	lt
 8003922:	222d      	movlt	r2, #45	; 0x2d
 8003924:	222b      	movge	r2, #43	; 0x2b
 8003926:	4249      	neglt	r1, r1
 8003928:	2909      	cmp	r1, #9
 800392a:	7042      	strb	r2, [r0, #1]
 800392c:	dd2b      	ble.n	8003986 <__exponent+0x70>
 800392e:	f10d 0407 	add.w	r4, sp, #7
 8003932:	46a4      	mov	ip, r4
 8003934:	270a      	movs	r7, #10
 8003936:	fb91 f6f7 	sdiv	r6, r1, r7
 800393a:	460a      	mov	r2, r1
 800393c:	46a6      	mov	lr, r4
 800393e:	fb07 1516 	mls	r5, r7, r6, r1
 8003942:	2a63      	cmp	r2, #99	; 0x63
 8003944:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003948:	4631      	mov	r1, r6
 800394a:	f104 34ff 	add.w	r4, r4, #4294967295
 800394e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003952:	dcf0      	bgt.n	8003936 <__exponent+0x20>
 8003954:	3130      	adds	r1, #48	; 0x30
 8003956:	f1ae 0502 	sub.w	r5, lr, #2
 800395a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800395e:	4629      	mov	r1, r5
 8003960:	1c44      	adds	r4, r0, #1
 8003962:	4561      	cmp	r1, ip
 8003964:	d30a      	bcc.n	800397c <__exponent+0x66>
 8003966:	f10d 0209 	add.w	r2, sp, #9
 800396a:	eba2 020e 	sub.w	r2, r2, lr
 800396e:	4565      	cmp	r5, ip
 8003970:	bf88      	it	hi
 8003972:	2200      	movhi	r2, #0
 8003974:	4413      	add	r3, r2
 8003976:	1a18      	subs	r0, r3, r0
 8003978:	b003      	add	sp, #12
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800397c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003980:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003984:	e7ed      	b.n	8003962 <__exponent+0x4c>
 8003986:	2330      	movs	r3, #48	; 0x30
 8003988:	3130      	adds	r1, #48	; 0x30
 800398a:	7083      	strb	r3, [r0, #2]
 800398c:	70c1      	strb	r1, [r0, #3]
 800398e:	1d03      	adds	r3, r0, #4
 8003990:	e7f1      	b.n	8003976 <__exponent+0x60>
	...

08003994 <_printf_float>:
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b091      	sub	sp, #68	; 0x44
 800399a:	460c      	mov	r4, r1
 800399c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80039a0:	4616      	mov	r6, r2
 80039a2:	461f      	mov	r7, r3
 80039a4:	4605      	mov	r5, r0
 80039a6:	f001 fd35 	bl	8005414 <_localeconv_r>
 80039aa:	6803      	ldr	r3, [r0, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	f7fc fbce 	bl	8000150 <strlen>
 80039b4:	2300      	movs	r3, #0
 80039b6:	930e      	str	r3, [sp, #56]	; 0x38
 80039b8:	f8d8 3000 	ldr.w	r3, [r8]
 80039bc:	900a      	str	r0, [sp, #40]	; 0x28
 80039be:	3307      	adds	r3, #7
 80039c0:	f023 0307 	bic.w	r3, r3, #7
 80039c4:	f103 0208 	add.w	r2, r3, #8
 80039c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80039cc:	f8d4 b000 	ldr.w	fp, [r4]
 80039d0:	f8c8 2000 	str.w	r2, [r8]
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80039e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80039e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ea:	4640      	mov	r0, r8
 80039ec:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <_printf_float+0x2cc>)
 80039ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039f0:	f7fd f80c 	bl	8000a0c <__aeabi_dcmpun>
 80039f4:	bb70      	cbnz	r0, 8003a54 <_printf_float+0xc0>
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	4640      	mov	r0, r8
 80039fc:	4b98      	ldr	r3, [pc, #608]	; (8003c60 <_printf_float+0x2cc>)
 80039fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a00:	f7fc ffe6 	bl	80009d0 <__aeabi_dcmple>
 8003a04:	bb30      	cbnz	r0, 8003a54 <_printf_float+0xc0>
 8003a06:	2200      	movs	r2, #0
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	f7fc ffd5 	bl	80009bc <__aeabi_dcmplt>
 8003a12:	b110      	cbz	r0, 8003a1a <_printf_float+0x86>
 8003a14:	232d      	movs	r3, #45	; 0x2d
 8003a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1a:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <_printf_float+0x2d0>)
 8003a1c:	4892      	ldr	r0, [pc, #584]	; (8003c68 <_printf_float+0x2d4>)
 8003a1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a22:	bf94      	ite	ls
 8003a24:	4698      	movls	r8, r3
 8003a26:	4680      	movhi	r8, r0
 8003a28:	2303      	movs	r3, #3
 8003a2a:	f04f 0a00 	mov.w	sl, #0
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	f02b 0304 	bic.w	r3, fp, #4
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	4633      	mov	r3, r6
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	9700      	str	r7, [sp, #0]
 8003a3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a40:	f000 f9d4 	bl	8003dec <_printf_common>
 8003a44:	3001      	adds	r0, #1
 8003a46:	f040 8090 	bne.w	8003b6a <_printf_float+0x1d6>
 8003a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4e:	b011      	add	sp, #68	; 0x44
 8003a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a54:	4642      	mov	r2, r8
 8003a56:	4653      	mov	r3, sl
 8003a58:	4640      	mov	r0, r8
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	f7fc ffd6 	bl	8000a0c <__aeabi_dcmpun>
 8003a60:	b148      	cbz	r0, 8003a76 <_printf_float+0xe2>
 8003a62:	f1ba 0f00 	cmp.w	sl, #0
 8003a66:	bfb8      	it	lt
 8003a68:	232d      	movlt	r3, #45	; 0x2d
 8003a6a:	4880      	ldr	r0, [pc, #512]	; (8003c6c <_printf_float+0x2d8>)
 8003a6c:	bfb8      	it	lt
 8003a6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a72:	4b7f      	ldr	r3, [pc, #508]	; (8003c70 <_printf_float+0x2dc>)
 8003a74:	e7d3      	b.n	8003a1e <_printf_float+0x8a>
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	d142      	bne.n	8003b06 <_printf_float+0x172>
 8003a80:	2306      	movs	r3, #6
 8003a82:	6063      	str	r3, [r4, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	9206      	str	r2, [sp, #24]
 8003a88:	aa0e      	add	r2, sp, #56	; 0x38
 8003a8a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a8e:	aa0d      	add	r2, sp, #52	; 0x34
 8003a90:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	4642      	mov	r2, r8
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	4653      	mov	r3, sl
 8003aaa:	910b      	str	r1, [sp, #44]	; 0x2c
 8003aac:	f7ff fed4 	bl	8003858 <__cvt>
 8003ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ab2:	4680      	mov	r8, r0
 8003ab4:	2947      	cmp	r1, #71	; 0x47
 8003ab6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ab8:	d108      	bne.n	8003acc <_printf_float+0x138>
 8003aba:	1cc8      	adds	r0, r1, #3
 8003abc:	db02      	blt.n	8003ac4 <_printf_float+0x130>
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	dd40      	ble.n	8003b46 <_printf_float+0x1b2>
 8003ac4:	f1a9 0902 	sub.w	r9, r9, #2
 8003ac8:	fa5f f989 	uxtb.w	r9, r9
 8003acc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ad0:	d81f      	bhi.n	8003b12 <_printf_float+0x17e>
 8003ad2:	464a      	mov	r2, r9
 8003ad4:	3901      	subs	r1, #1
 8003ad6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ada:	910d      	str	r1, [sp, #52]	; 0x34
 8003adc:	f7ff ff1b 	bl	8003916 <__exponent>
 8003ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ae2:	4682      	mov	sl, r0
 8003ae4:	1813      	adds	r3, r2, r0
 8003ae6:	2a01      	cmp	r2, #1
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	dc02      	bgt.n	8003af2 <_printf_float+0x15e>
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	07d2      	lsls	r2, r2, #31
 8003af0:	d501      	bpl.n	8003af6 <_printf_float+0x162>
 8003af2:	3301      	adds	r3, #1
 8003af4:	6123      	str	r3, [r4, #16]
 8003af6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d09b      	beq.n	8003a36 <_printf_float+0xa2>
 8003afe:	232d      	movs	r3, #45	; 0x2d
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	e797      	b.n	8003a36 <_printf_float+0xa2>
 8003b06:	2947      	cmp	r1, #71	; 0x47
 8003b08:	d1bc      	bne.n	8003a84 <_printf_float+0xf0>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ba      	bne.n	8003a84 <_printf_float+0xf0>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e7b7      	b.n	8003a82 <_printf_float+0xee>
 8003b12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b16:	d118      	bne.n	8003b4a <_printf_float+0x1b6>
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	dd0b      	ble.n	8003b36 <_printf_float+0x1a2>
 8003b1e:	6121      	str	r1, [r4, #16]
 8003b20:	b913      	cbnz	r3, 8003b28 <_printf_float+0x194>
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	07d0      	lsls	r0, r2, #31
 8003b26:	d502      	bpl.n	8003b2e <_printf_float+0x19a>
 8003b28:	3301      	adds	r3, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	6123      	str	r3, [r4, #16]
 8003b2e:	f04f 0a00 	mov.w	sl, #0
 8003b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b34:	e7df      	b.n	8003af6 <_printf_float+0x162>
 8003b36:	b913      	cbnz	r3, 8003b3e <_printf_float+0x1aa>
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	07d2      	lsls	r2, r2, #31
 8003b3c:	d501      	bpl.n	8003b42 <_printf_float+0x1ae>
 8003b3e:	3302      	adds	r3, #2
 8003b40:	e7f4      	b.n	8003b2c <_printf_float+0x198>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e7f2      	b.n	8003b2c <_printf_float+0x198>
 8003b46:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4c:	4299      	cmp	r1, r3
 8003b4e:	db05      	blt.n	8003b5c <_printf_float+0x1c8>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	6121      	str	r1, [r4, #16]
 8003b54:	07d8      	lsls	r0, r3, #31
 8003b56:	d5ea      	bpl.n	8003b2e <_printf_float+0x19a>
 8003b58:	1c4b      	adds	r3, r1, #1
 8003b5a:	e7e7      	b.n	8003b2c <_printf_float+0x198>
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	bfcc      	ite	gt
 8003b60:	2201      	movgt	r2, #1
 8003b62:	f1c1 0202 	rsble	r2, r1, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	e7e0      	b.n	8003b2c <_printf_float+0x198>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	055a      	lsls	r2, r3, #21
 8003b6e:	d407      	bmi.n	8003b80 <_printf_float+0x1ec>
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	4642      	mov	r2, r8
 8003b74:	4631      	mov	r1, r6
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b8      	blx	r7
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d12b      	bne.n	8003bd6 <_printf_float+0x242>
 8003b7e:	e764      	b.n	8003a4a <_printf_float+0xb6>
 8003b80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b84:	f240 80dd 	bls.w	8003d42 <_printf_float+0x3ae>
 8003b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f7fc ff0a 	bl	80009a8 <__aeabi_dcmpeq>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d033      	beq.n	8003c00 <_printf_float+0x26c>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	4a35      	ldr	r2, [pc, #212]	; (8003c74 <_printf_float+0x2e0>)
 8003ba0:	47b8      	blx	r7
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f43f af51 	beq.w	8003a4a <_printf_float+0xb6>
 8003ba8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bac:	429a      	cmp	r2, r3
 8003bae:	db02      	blt.n	8003bb6 <_printf_float+0x222>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	07d8      	lsls	r0, r3, #31
 8003bb4:	d50f      	bpl.n	8003bd6 <_printf_float+0x242>
 8003bb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	47b8      	blx	r7
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	f43f af42 	beq.w	8003a4a <_printf_float+0xb6>
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	f104 091a 	add.w	r9, r4, #26
 8003bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	4543      	cmp	r3, r8
 8003bd4:	dc09      	bgt.n	8003bea <_printf_float+0x256>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	079b      	lsls	r3, r3, #30
 8003bda:	f100 8102 	bmi.w	8003de2 <_printf_float+0x44e>
 8003bde:	68e0      	ldr	r0, [r4, #12]
 8003be0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003be2:	4298      	cmp	r0, r3
 8003be4:	bfb8      	it	lt
 8003be6:	4618      	movlt	r0, r3
 8003be8:	e731      	b.n	8003a4e <_printf_float+0xba>
 8003bea:	2301      	movs	r3, #1
 8003bec:	464a      	mov	r2, r9
 8003bee:	4631      	mov	r1, r6
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	47b8      	blx	r7
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	f43f af28 	beq.w	8003a4a <_printf_float+0xb6>
 8003bfa:	f108 0801 	add.w	r8, r8, #1
 8003bfe:	e7e6      	b.n	8003bce <_printf_float+0x23a>
 8003c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	dc38      	bgt.n	8003c78 <_printf_float+0x2e4>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4631      	mov	r1, r6
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <_printf_float+0x2e0>)
 8003c0e:	47b8      	blx	r7
 8003c10:	3001      	adds	r0, #1
 8003c12:	f43f af1a 	beq.w	8003a4a <_printf_float+0xb6>
 8003c16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d102      	bne.n	8003c24 <_printf_float+0x290>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	07d9      	lsls	r1, r3, #31
 8003c22:	d5d8      	bpl.n	8003bd6 <_printf_float+0x242>
 8003c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b8      	blx	r7
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f43f af0b 	beq.w	8003a4a <_printf_float+0xb6>
 8003c34:	f04f 0900 	mov.w	r9, #0
 8003c38:	f104 0a1a 	add.w	sl, r4, #26
 8003c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c3e:	425b      	negs	r3, r3
 8003c40:	454b      	cmp	r3, r9
 8003c42:	dc01      	bgt.n	8003c48 <_printf_float+0x2b4>
 8003c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c46:	e794      	b.n	8003b72 <_printf_float+0x1de>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4652      	mov	r2, sl
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47b8      	blx	r7
 8003c52:	3001      	adds	r0, #1
 8003c54:	f43f aef9 	beq.w	8003a4a <_printf_float+0xb6>
 8003c58:	f109 0901 	add.w	r9, r9, #1
 8003c5c:	e7ee      	b.n	8003c3c <_printf_float+0x2a8>
 8003c5e:	bf00      	nop
 8003c60:	7fefffff 	.word	0x7fefffff
 8003c64:	08006484 	.word	0x08006484
 8003c68:	08006488 	.word	0x08006488
 8003c6c:	08006490 	.word	0x08006490
 8003c70:	0800648c 	.word	0x0800648c
 8003c74:	08006494 	.word	0x08006494
 8003c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	bfa8      	it	ge
 8003c80:	461a      	movge	r2, r3
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	4691      	mov	r9, r2
 8003c86:	dc37      	bgt.n	8003cf8 <_printf_float+0x364>
 8003c88:	f04f 0b00 	mov.w	fp, #0
 8003c8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c90:	f104 021a 	add.w	r2, r4, #26
 8003c94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c98:	ebaa 0309 	sub.w	r3, sl, r9
 8003c9c:	455b      	cmp	r3, fp
 8003c9e:	dc33      	bgt.n	8003d08 <_printf_float+0x374>
 8003ca0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	db3b      	blt.n	8003d20 <_printf_float+0x38c>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	07da      	lsls	r2, r3, #31
 8003cac:	d438      	bmi.n	8003d20 <_printf_float+0x38c>
 8003cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003cb2:	eba3 020a 	sub.w	r2, r3, sl
 8003cb6:	eba3 0901 	sub.w	r9, r3, r1
 8003cba:	4591      	cmp	r9, r2
 8003cbc:	bfa8      	it	ge
 8003cbe:	4691      	movge	r9, r2
 8003cc0:	f1b9 0f00 	cmp.w	r9, #0
 8003cc4:	dc34      	bgt.n	8003d30 <_printf_float+0x39c>
 8003cc6:	f04f 0800 	mov.w	r8, #0
 8003cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cce:	f104 0a1a 	add.w	sl, r4, #26
 8003cd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	eba3 0309 	sub.w	r3, r3, r9
 8003cdc:	4543      	cmp	r3, r8
 8003cde:	f77f af7a 	ble.w	8003bd6 <_printf_float+0x242>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4628      	mov	r0, r5
 8003cea:	47b8      	blx	r7
 8003cec:	3001      	adds	r0, #1
 8003cee:	f43f aeac 	beq.w	8003a4a <_printf_float+0xb6>
 8003cf2:	f108 0801 	add.w	r8, r8, #1
 8003cf6:	e7ec      	b.n	8003cd2 <_printf_float+0x33e>
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b8      	blx	r7
 8003d02:	3001      	adds	r0, #1
 8003d04:	d1c0      	bne.n	8003c88 <_printf_float+0x2f4>
 8003d06:	e6a0      	b.n	8003a4a <_printf_float+0xb6>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d10:	47b8      	blx	r7
 8003d12:	3001      	adds	r0, #1
 8003d14:	f43f ae99 	beq.w	8003a4a <_printf_float+0xb6>
 8003d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d1a:	f10b 0b01 	add.w	fp, fp, #1
 8003d1e:	e7b9      	b.n	8003c94 <_printf_float+0x300>
 8003d20:	4631      	mov	r1, r6
 8003d22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d26:	4628      	mov	r0, r5
 8003d28:	47b8      	blx	r7
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d1bf      	bne.n	8003cae <_printf_float+0x31a>
 8003d2e:	e68c      	b.n	8003a4a <_printf_float+0xb6>
 8003d30:	464b      	mov	r3, r9
 8003d32:	4631      	mov	r1, r6
 8003d34:	4628      	mov	r0, r5
 8003d36:	eb08 020a 	add.w	r2, r8, sl
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d1c2      	bne.n	8003cc6 <_printf_float+0x332>
 8003d40:	e683      	b.n	8003a4a <_printf_float+0xb6>
 8003d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d44:	2a01      	cmp	r2, #1
 8003d46:	dc01      	bgt.n	8003d4c <_printf_float+0x3b8>
 8003d48:	07db      	lsls	r3, r3, #31
 8003d4a:	d537      	bpl.n	8003dbc <_printf_float+0x428>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4642      	mov	r2, r8
 8003d50:	4631      	mov	r1, r6
 8003d52:	4628      	mov	r0, r5
 8003d54:	47b8      	blx	r7
 8003d56:	3001      	adds	r0, #1
 8003d58:	f43f ae77 	beq.w	8003a4a <_printf_float+0xb6>
 8003d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d60:	4631      	mov	r1, r6
 8003d62:	4628      	mov	r0, r5
 8003d64:	47b8      	blx	r7
 8003d66:	3001      	adds	r0, #1
 8003d68:	f43f ae6f 	beq.w	8003a4a <_printf_float+0xb6>
 8003d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d70:	2200      	movs	r2, #0
 8003d72:	2300      	movs	r3, #0
 8003d74:	f7fc fe18 	bl	80009a8 <__aeabi_dcmpeq>
 8003d78:	b9d8      	cbnz	r0, 8003db2 <_printf_float+0x41e>
 8003d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d7c:	f108 0201 	add.w	r2, r8, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b8      	blx	r7
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d10e      	bne.n	8003daa <_printf_float+0x416>
 8003d8c:	e65d      	b.n	8003a4a <_printf_float+0xb6>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	464a      	mov	r2, r9
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f43f ae56 	beq.w	8003a4a <_printf_float+0xb6>
 8003d9e:	f108 0801 	add.w	r8, r8, #1
 8003da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4543      	cmp	r3, r8
 8003da8:	dcf1      	bgt.n	8003d8e <_printf_float+0x3fa>
 8003daa:	4653      	mov	r3, sl
 8003dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003db0:	e6e0      	b.n	8003b74 <_printf_float+0x1e0>
 8003db2:	f04f 0800 	mov.w	r8, #0
 8003db6:	f104 091a 	add.w	r9, r4, #26
 8003dba:	e7f2      	b.n	8003da2 <_printf_float+0x40e>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	e7df      	b.n	8003d82 <_printf_float+0x3ee>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f ae3c 	beq.w	8003a4a <_printf_float+0xb6>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003dda:	1a5b      	subs	r3, r3, r1
 8003ddc:	4543      	cmp	r3, r8
 8003dde:	dcf0      	bgt.n	8003dc2 <_printf_float+0x42e>
 8003de0:	e6fd      	b.n	8003bde <_printf_float+0x24a>
 8003de2:	f04f 0800 	mov.w	r8, #0
 8003de6:	f104 0919 	add.w	r9, r4, #25
 8003dea:	e7f4      	b.n	8003dd6 <_printf_float+0x442>

08003dec <_printf_common>:
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	4616      	mov	r6, r2
 8003df2:	4699      	mov	r9, r3
 8003df4:	688a      	ldr	r2, [r1, #8]
 8003df6:	690b      	ldr	r3, [r1, #16]
 8003df8:	4607      	mov	r7, r0
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	bfb8      	it	lt
 8003dfe:	4613      	movlt	r3, r2
 8003e00:	6033      	str	r3, [r6, #0]
 8003e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e06:	460c      	mov	r4, r1
 8003e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e0c:	b10a      	cbz	r2, 8003e12 <_printf_common+0x26>
 8003e0e:	3301      	adds	r3, #1
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	0699      	lsls	r1, r3, #26
 8003e16:	bf42      	ittt	mi
 8003e18:	6833      	ldrmi	r3, [r6, #0]
 8003e1a:	3302      	addmi	r3, #2
 8003e1c:	6033      	strmi	r3, [r6, #0]
 8003e1e:	6825      	ldr	r5, [r4, #0]
 8003e20:	f015 0506 	ands.w	r5, r5, #6
 8003e24:	d106      	bne.n	8003e34 <_printf_common+0x48>
 8003e26:	f104 0a19 	add.w	sl, r4, #25
 8003e2a:	68e3      	ldr	r3, [r4, #12]
 8003e2c:	6832      	ldr	r2, [r6, #0]
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	42ab      	cmp	r3, r5
 8003e32:	dc28      	bgt.n	8003e86 <_printf_common+0x9a>
 8003e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e38:	1e13      	subs	r3, r2, #0
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	bf18      	it	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	0692      	lsls	r2, r2, #26
 8003e42:	d42d      	bmi.n	8003ea0 <_printf_common+0xb4>
 8003e44:	4649      	mov	r1, r9
 8003e46:	4638      	mov	r0, r7
 8003e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4c:	47c0      	blx	r8
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d020      	beq.n	8003e94 <_printf_common+0xa8>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	68e5      	ldr	r5, [r4, #12]
 8003e56:	f003 0306 	and.w	r3, r3, #6
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	bf18      	it	ne
 8003e5e:	2500      	movne	r5, #0
 8003e60:	6832      	ldr	r2, [r6, #0]
 8003e62:	f04f 0600 	mov.w	r6, #0
 8003e66:	68a3      	ldr	r3, [r4, #8]
 8003e68:	bf08      	it	eq
 8003e6a:	1aad      	subeq	r5, r5, r2
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	bf08      	it	eq
 8003e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e74:	4293      	cmp	r3, r2
 8003e76:	bfc4      	itt	gt
 8003e78:	1a9b      	subgt	r3, r3, r2
 8003e7a:	18ed      	addgt	r5, r5, r3
 8003e7c:	341a      	adds	r4, #26
 8003e7e:	42b5      	cmp	r5, r6
 8003e80:	d11a      	bne.n	8003eb8 <_printf_common+0xcc>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e008      	b.n	8003e98 <_printf_common+0xac>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4652      	mov	r2, sl
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	47c0      	blx	r8
 8003e90:	3001      	adds	r0, #1
 8003e92:	d103      	bne.n	8003e9c <_printf_common+0xb0>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	e7c4      	b.n	8003e2a <_printf_common+0x3e>
 8003ea0:	2030      	movs	r0, #48	; 0x30
 8003ea2:	18e1      	adds	r1, r4, r3
 8003ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eae:	4422      	add	r2, r4
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eb6:	e7c5      	b.n	8003e44 <_printf_common+0x58>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4622      	mov	r2, r4
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c0      	blx	r8
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d0e6      	beq.n	8003e94 <_printf_common+0xa8>
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7d9      	b.n	8003e7e <_printf_common+0x92>
	...

08003ecc <_printf_i>:
 8003ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	7e0f      	ldrb	r7, [r1, #24]
 8003ed2:	4691      	mov	r9, r2
 8003ed4:	2f78      	cmp	r7, #120	; 0x78
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	460c      	mov	r4, r1
 8003eda:	469a      	mov	sl, r3
 8003edc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ee2:	d807      	bhi.n	8003ef4 <_printf_i+0x28>
 8003ee4:	2f62      	cmp	r7, #98	; 0x62
 8003ee6:	d80a      	bhi.n	8003efe <_printf_i+0x32>
 8003ee8:	2f00      	cmp	r7, #0
 8003eea:	f000 80d9 	beq.w	80040a0 <_printf_i+0x1d4>
 8003eee:	2f58      	cmp	r7, #88	; 0x58
 8003ef0:	f000 80a4 	beq.w	800403c <_printf_i+0x170>
 8003ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003efc:	e03a      	b.n	8003f74 <_printf_i+0xa8>
 8003efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f02:	2b15      	cmp	r3, #21
 8003f04:	d8f6      	bhi.n	8003ef4 <_printf_i+0x28>
 8003f06:	a101      	add	r1, pc, #4	; (adr r1, 8003f0c <_printf_i+0x40>)
 8003f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f79 	.word	0x08003f79
 8003f14:	08003ef5 	.word	0x08003ef5
 8003f18:	08003ef5 	.word	0x08003ef5
 8003f1c:	08003ef5 	.word	0x08003ef5
 8003f20:	08003ef5 	.word	0x08003ef5
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003ef5 	.word	0x08003ef5
 8003f2c:	08003ef5 	.word	0x08003ef5
 8003f30:	08003ef5 	.word	0x08003ef5
 8003f34:	08003ef5 	.word	0x08003ef5
 8003f38:	08004087 	.word	0x08004087
 8003f3c:	08003fa9 	.word	0x08003fa9
 8003f40:	08004069 	.word	0x08004069
 8003f44:	08003ef5 	.word	0x08003ef5
 8003f48:	08003ef5 	.word	0x08003ef5
 8003f4c:	080040a9 	.word	0x080040a9
 8003f50:	08003ef5 	.word	0x08003ef5
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003ef5 	.word	0x08003ef5
 8003f5c:	08003ef5 	.word	0x08003ef5
 8003f60:	08004071 	.word	0x08004071
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	602a      	str	r2, [r5, #0]
 8003f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0a4      	b.n	80040c2 <_printf_i+0x1f6>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	6829      	ldr	r1, [r5, #0]
 8003f7c:	0606      	lsls	r6, r0, #24
 8003f7e:	f101 0304 	add.w	r3, r1, #4
 8003f82:	d50a      	bpl.n	8003f9a <_printf_i+0xce>
 8003f84:	680e      	ldr	r6, [r1, #0]
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	2e00      	cmp	r6, #0
 8003f8a:	da03      	bge.n	8003f94 <_printf_i+0xc8>
 8003f8c:	232d      	movs	r3, #45	; 0x2d
 8003f8e:	4276      	negs	r6, r6
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	230a      	movs	r3, #10
 8003f96:	485e      	ldr	r0, [pc, #376]	; (8004110 <_printf_i+0x244>)
 8003f98:	e019      	b.n	8003fce <_printf_i+0x102>
 8003f9a:	680e      	ldr	r6, [r1, #0]
 8003f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	bf18      	it	ne
 8003fa4:	b236      	sxthne	r6, r6
 8003fa6:	e7ef      	b.n	8003f88 <_printf_i+0xbc>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	1d19      	adds	r1, r3, #4
 8003fae:	6029      	str	r1, [r5, #0]
 8003fb0:	0601      	lsls	r1, r0, #24
 8003fb2:	d501      	bpl.n	8003fb8 <_printf_i+0xec>
 8003fb4:	681e      	ldr	r6, [r3, #0]
 8003fb6:	e002      	b.n	8003fbe <_printf_i+0xf2>
 8003fb8:	0646      	lsls	r6, r0, #25
 8003fba:	d5fb      	bpl.n	8003fb4 <_printf_i+0xe8>
 8003fbc:	881e      	ldrh	r6, [r3, #0]
 8003fbe:	2f6f      	cmp	r7, #111	; 0x6f
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2308      	moveq	r3, #8
 8003fc4:	230a      	movne	r3, #10
 8003fc6:	4852      	ldr	r0, [pc, #328]	; (8004110 <_printf_i+0x244>)
 8003fc8:	2100      	movs	r1, #0
 8003fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fce:	6865      	ldr	r5, [r4, #4]
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	bfa8      	it	ge
 8003fd4:	6821      	ldrge	r1, [r4, #0]
 8003fd6:	60a5      	str	r5, [r4, #8]
 8003fd8:	bfa4      	itt	ge
 8003fda:	f021 0104 	bicge.w	r1, r1, #4
 8003fde:	6021      	strge	r1, [r4, #0]
 8003fe0:	b90e      	cbnz	r6, 8003fe6 <_printf_i+0x11a>
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	d04d      	beq.n	8004082 <_printf_i+0x1b6>
 8003fe6:	4615      	mov	r5, r2
 8003fe8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fec:	fb03 6711 	mls	r7, r3, r1, r6
 8003ff0:	5dc7      	ldrb	r7, [r0, r7]
 8003ff2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ff6:	4637      	mov	r7, r6
 8003ff8:	42bb      	cmp	r3, r7
 8003ffa:	460e      	mov	r6, r1
 8003ffc:	d9f4      	bls.n	8003fe8 <_printf_i+0x11c>
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d10b      	bne.n	800401a <_printf_i+0x14e>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	07de      	lsls	r6, r3, #31
 8004006:	d508      	bpl.n	800401a <_printf_i+0x14e>
 8004008:	6923      	ldr	r3, [r4, #16]
 800400a:	6861      	ldr	r1, [r4, #4]
 800400c:	4299      	cmp	r1, r3
 800400e:	bfde      	ittt	le
 8004010:	2330      	movle	r3, #48	; 0x30
 8004012:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004016:	f105 35ff 	addle.w	r5, r5, #4294967295
 800401a:	1b52      	subs	r2, r2, r5
 800401c:	6122      	str	r2, [r4, #16]
 800401e:	464b      	mov	r3, r9
 8004020:	4621      	mov	r1, r4
 8004022:	4640      	mov	r0, r8
 8004024:	f8cd a000 	str.w	sl, [sp]
 8004028:	aa03      	add	r2, sp, #12
 800402a:	f7ff fedf 	bl	8003dec <_printf_common>
 800402e:	3001      	adds	r0, #1
 8004030:	d14c      	bne.n	80040cc <_printf_i+0x200>
 8004032:	f04f 30ff 	mov.w	r0, #4294967295
 8004036:	b004      	add	sp, #16
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	4834      	ldr	r0, [pc, #208]	; (8004110 <_printf_i+0x244>)
 800403e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004042:	6829      	ldr	r1, [r5, #0]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f851 6b04 	ldr.w	r6, [r1], #4
 800404a:	6029      	str	r1, [r5, #0]
 800404c:	061d      	lsls	r5, r3, #24
 800404e:	d514      	bpl.n	800407a <_printf_i+0x1ae>
 8004050:	07df      	lsls	r7, r3, #31
 8004052:	bf44      	itt	mi
 8004054:	f043 0320 	orrmi.w	r3, r3, #32
 8004058:	6023      	strmi	r3, [r4, #0]
 800405a:	b91e      	cbnz	r6, 8004064 <_printf_i+0x198>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	f023 0320 	bic.w	r3, r3, #32
 8004062:	6023      	str	r3, [r4, #0]
 8004064:	2310      	movs	r3, #16
 8004066:	e7af      	b.n	8003fc8 <_printf_i+0xfc>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	2378      	movs	r3, #120	; 0x78
 8004072:	4828      	ldr	r0, [pc, #160]	; (8004114 <_printf_i+0x248>)
 8004074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004078:	e7e3      	b.n	8004042 <_printf_i+0x176>
 800407a:	0659      	lsls	r1, r3, #25
 800407c:	bf48      	it	mi
 800407e:	b2b6      	uxthmi	r6, r6
 8004080:	e7e6      	b.n	8004050 <_printf_i+0x184>
 8004082:	4615      	mov	r5, r2
 8004084:	e7bb      	b.n	8003ffe <_printf_i+0x132>
 8004086:	682b      	ldr	r3, [r5, #0]
 8004088:	6826      	ldr	r6, [r4, #0]
 800408a:	1d18      	adds	r0, r3, #4
 800408c:	6961      	ldr	r1, [r4, #20]
 800408e:	6028      	str	r0, [r5, #0]
 8004090:	0635      	lsls	r5, r6, #24
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	d501      	bpl.n	800409a <_printf_i+0x1ce>
 8004096:	6019      	str	r1, [r3, #0]
 8004098:	e002      	b.n	80040a0 <_printf_i+0x1d4>
 800409a:	0670      	lsls	r0, r6, #25
 800409c:	d5fb      	bpl.n	8004096 <_printf_i+0x1ca>
 800409e:	8019      	strh	r1, [r3, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	4615      	mov	r5, r2
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	e7ba      	b.n	800401e <_printf_i+0x152>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	2100      	movs	r1, #0
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	602a      	str	r2, [r5, #0]
 80040b0:	681d      	ldr	r5, [r3, #0]
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	4628      	mov	r0, r5
 80040b6:	f001 fa21 	bl	80054fc <memchr>
 80040ba:	b108      	cbz	r0, 80040c0 <_printf_i+0x1f4>
 80040bc:	1b40      	subs	r0, r0, r5
 80040be:	6060      	str	r0, [r4, #4]
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	2300      	movs	r3, #0
 80040c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ca:	e7a8      	b.n	800401e <_printf_i+0x152>
 80040cc:	462a      	mov	r2, r5
 80040ce:	4649      	mov	r1, r9
 80040d0:	4640      	mov	r0, r8
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	47d0      	blx	sl
 80040d6:	3001      	adds	r0, #1
 80040d8:	d0ab      	beq.n	8004032 <_printf_i+0x166>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	079b      	lsls	r3, r3, #30
 80040de:	d413      	bmi.n	8004108 <_printf_i+0x23c>
 80040e0:	68e0      	ldr	r0, [r4, #12]
 80040e2:	9b03      	ldr	r3, [sp, #12]
 80040e4:	4298      	cmp	r0, r3
 80040e6:	bfb8      	it	lt
 80040e8:	4618      	movlt	r0, r3
 80040ea:	e7a4      	b.n	8004036 <_printf_i+0x16a>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4632      	mov	r2, r6
 80040f0:	4649      	mov	r1, r9
 80040f2:	4640      	mov	r0, r8
 80040f4:	47d0      	blx	sl
 80040f6:	3001      	adds	r0, #1
 80040f8:	d09b      	beq.n	8004032 <_printf_i+0x166>
 80040fa:	3501      	adds	r5, #1
 80040fc:	68e3      	ldr	r3, [r4, #12]
 80040fe:	9903      	ldr	r1, [sp, #12]
 8004100:	1a5b      	subs	r3, r3, r1
 8004102:	42ab      	cmp	r3, r5
 8004104:	dcf2      	bgt.n	80040ec <_printf_i+0x220>
 8004106:	e7eb      	b.n	80040e0 <_printf_i+0x214>
 8004108:	2500      	movs	r5, #0
 800410a:	f104 0619 	add.w	r6, r4, #25
 800410e:	e7f5      	b.n	80040fc <_printf_i+0x230>
 8004110:	08006496 	.word	0x08006496
 8004114:	080064a7 	.word	0x080064a7

08004118 <iprintf>:
 8004118:	b40f      	push	{r0, r1, r2, r3}
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <iprintf+0x2c>)
 800411c:	b513      	push	{r0, r1, r4, lr}
 800411e:	681c      	ldr	r4, [r3, #0]
 8004120:	b124      	cbz	r4, 800412c <iprintf+0x14>
 8004122:	69a3      	ldr	r3, [r4, #24]
 8004124:	b913      	cbnz	r3, 800412c <iprintf+0x14>
 8004126:	4620      	mov	r0, r4
 8004128:	f001 f8d6 	bl	80052d8 <__sinit>
 800412c:	ab05      	add	r3, sp, #20
 800412e:	4620      	mov	r0, r4
 8004130:	9a04      	ldr	r2, [sp, #16]
 8004132:	68a1      	ldr	r1, [r4, #8]
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	f001 fe89 	bl	8005e4c <_vfiprintf_r>
 800413a:	b002      	add	sp, #8
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004140:	b004      	add	sp, #16
 8004142:	4770      	bx	lr
 8004144:	2000000c 	.word	0x2000000c

08004148 <_puts_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	460e      	mov	r6, r1
 800414c:	4605      	mov	r5, r0
 800414e:	b118      	cbz	r0, 8004158 <_puts_r+0x10>
 8004150:	6983      	ldr	r3, [r0, #24]
 8004152:	b90b      	cbnz	r3, 8004158 <_puts_r+0x10>
 8004154:	f001 f8c0 	bl	80052d8 <__sinit>
 8004158:	69ab      	ldr	r3, [r5, #24]
 800415a:	68ac      	ldr	r4, [r5, #8]
 800415c:	b913      	cbnz	r3, 8004164 <_puts_r+0x1c>
 800415e:	4628      	mov	r0, r5
 8004160:	f001 f8ba 	bl	80052d8 <__sinit>
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <_puts_r+0xd0>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d120      	bne.n	80041ac <_puts_r+0x64>
 800416a:	686c      	ldr	r4, [r5, #4]
 800416c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800416e:	07db      	lsls	r3, r3, #31
 8004170:	d405      	bmi.n	800417e <_puts_r+0x36>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	0598      	lsls	r0, r3, #22
 8004176:	d402      	bmi.n	800417e <_puts_r+0x36>
 8004178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800417a:	f001 f950 	bl	800541e <__retarget_lock_acquire_recursive>
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	0719      	lsls	r1, r3, #28
 8004182:	d51d      	bpl.n	80041c0 <_puts_r+0x78>
 8004184:	6923      	ldr	r3, [r4, #16]
 8004186:	b1db      	cbz	r3, 80041c0 <_puts_r+0x78>
 8004188:	3e01      	subs	r6, #1
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004190:	3b01      	subs	r3, #1
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	bb39      	cbnz	r1, 80041e6 <_puts_r+0x9e>
 8004196:	2b00      	cmp	r3, #0
 8004198:	da38      	bge.n	800420c <_puts_r+0xc4>
 800419a:	4622      	mov	r2, r4
 800419c:	210a      	movs	r1, #10
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f848 	bl	8004234 <__swbuf_r>
 80041a4:	3001      	adds	r0, #1
 80041a6:	d011      	beq.n	80041cc <_puts_r+0x84>
 80041a8:	250a      	movs	r5, #10
 80041aa:	e011      	b.n	80041d0 <_puts_r+0x88>
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <_puts_r+0xd4>)
 80041ae:	429c      	cmp	r4, r3
 80041b0:	d101      	bne.n	80041b6 <_puts_r+0x6e>
 80041b2:	68ac      	ldr	r4, [r5, #8]
 80041b4:	e7da      	b.n	800416c <_puts_r+0x24>
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <_puts_r+0xd8>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	bf08      	it	eq
 80041bc:	68ec      	ldreq	r4, [r5, #12]
 80041be:	e7d5      	b.n	800416c <_puts_r+0x24>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f888 	bl	80042d8 <__swsetup_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d0dd      	beq.n	8004188 <_puts_r+0x40>
 80041cc:	f04f 35ff 	mov.w	r5, #4294967295
 80041d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041d2:	07da      	lsls	r2, r3, #31
 80041d4:	d405      	bmi.n	80041e2 <_puts_r+0x9a>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	059b      	lsls	r3, r3, #22
 80041da:	d402      	bmi.n	80041e2 <_puts_r+0x9a>
 80041dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041de:	f001 f91f 	bl	8005420 <__retarget_lock_release_recursive>
 80041e2:	4628      	mov	r0, r5
 80041e4:	bd70      	pop	{r4, r5, r6, pc}
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da04      	bge.n	80041f4 <_puts_r+0xac>
 80041ea:	69a2      	ldr	r2, [r4, #24]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	dc06      	bgt.n	80041fe <_puts_r+0xb6>
 80041f0:	290a      	cmp	r1, #10
 80041f2:	d004      	beq.n	80041fe <_puts_r+0xb6>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	6022      	str	r2, [r4, #0]
 80041fa:	7019      	strb	r1, [r3, #0]
 80041fc:	e7c5      	b.n	800418a <_puts_r+0x42>
 80041fe:	4622      	mov	r2, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f817 	bl	8004234 <__swbuf_r>
 8004206:	3001      	adds	r0, #1
 8004208:	d1bf      	bne.n	800418a <_puts_r+0x42>
 800420a:	e7df      	b.n	80041cc <_puts_r+0x84>
 800420c:	250a      	movs	r5, #10
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	701d      	strb	r5, [r3, #0]
 8004216:	e7db      	b.n	80041d0 <_puts_r+0x88>
 8004218:	08006568 	.word	0x08006568
 800421c:	08006588 	.word	0x08006588
 8004220:	08006548 	.word	0x08006548

08004224 <puts>:
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <puts+0xc>)
 8004226:	4601      	mov	r1, r0
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f7ff bf8d 	b.w	8004148 <_puts_r>
 800422e:	bf00      	nop
 8004230:	2000000c 	.word	0x2000000c

08004234 <__swbuf_r>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4614      	mov	r4, r2
 800423a:	4605      	mov	r5, r0
 800423c:	b118      	cbz	r0, 8004246 <__swbuf_r+0x12>
 800423e:	6983      	ldr	r3, [r0, #24]
 8004240:	b90b      	cbnz	r3, 8004246 <__swbuf_r+0x12>
 8004242:	f001 f849 	bl	80052d8 <__sinit>
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <__swbuf_r+0x98>)
 8004248:	429c      	cmp	r4, r3
 800424a:	d12b      	bne.n	80042a4 <__swbuf_r+0x70>
 800424c:	686c      	ldr	r4, [r5, #4]
 800424e:	69a3      	ldr	r3, [r4, #24]
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	071a      	lsls	r2, r3, #28
 8004256:	d52f      	bpl.n	80042b8 <__swbuf_r+0x84>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	b36b      	cbz	r3, 80042b8 <__swbuf_r+0x84>
 800425c:	6923      	ldr	r3, [r4, #16]
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	b2f6      	uxtb	r6, r6
 8004262:	1ac0      	subs	r0, r0, r3
 8004264:	6963      	ldr	r3, [r4, #20]
 8004266:	4637      	mov	r7, r6
 8004268:	4283      	cmp	r3, r0
 800426a:	dc04      	bgt.n	8004276 <__swbuf_r+0x42>
 800426c:	4621      	mov	r1, r4
 800426e:	4628      	mov	r0, r5
 8004270:	f000 ff9e 	bl	80051b0 <_fflush_r>
 8004274:	bb30      	cbnz	r0, 80042c4 <__swbuf_r+0x90>
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	3001      	adds	r0, #1
 800427a:	3b01      	subs	r3, #1
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	6022      	str	r2, [r4, #0]
 8004284:	701e      	strb	r6, [r3, #0]
 8004286:	6963      	ldr	r3, [r4, #20]
 8004288:	4283      	cmp	r3, r0
 800428a:	d004      	beq.n	8004296 <__swbuf_r+0x62>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	07db      	lsls	r3, r3, #31
 8004290:	d506      	bpl.n	80042a0 <__swbuf_r+0x6c>
 8004292:	2e0a      	cmp	r6, #10
 8004294:	d104      	bne.n	80042a0 <__swbuf_r+0x6c>
 8004296:	4621      	mov	r1, r4
 8004298:	4628      	mov	r0, r5
 800429a:	f000 ff89 	bl	80051b0 <_fflush_r>
 800429e:	b988      	cbnz	r0, 80042c4 <__swbuf_r+0x90>
 80042a0:	4638      	mov	r0, r7
 80042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <__swbuf_r+0x9c>)
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d101      	bne.n	80042ae <__swbuf_r+0x7a>
 80042aa:	68ac      	ldr	r4, [r5, #8]
 80042ac:	e7cf      	b.n	800424e <__swbuf_r+0x1a>
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <__swbuf_r+0xa0>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	bf08      	it	eq
 80042b4:	68ec      	ldreq	r4, [r5, #12]
 80042b6:	e7ca      	b.n	800424e <__swbuf_r+0x1a>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 f80c 	bl	80042d8 <__swsetup_r>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d0cb      	beq.n	800425c <__swbuf_r+0x28>
 80042c4:	f04f 37ff 	mov.w	r7, #4294967295
 80042c8:	e7ea      	b.n	80042a0 <__swbuf_r+0x6c>
 80042ca:	bf00      	nop
 80042cc:	08006568 	.word	0x08006568
 80042d0:	08006588 	.word	0x08006588
 80042d4:	08006548 	.word	0x08006548

080042d8 <__swsetup_r>:
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <__swsetup_r+0xcc>)
 80042da:	b570      	push	{r4, r5, r6, lr}
 80042dc:	681d      	ldr	r5, [r3, #0]
 80042de:	4606      	mov	r6, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	b125      	cbz	r5, 80042ee <__swsetup_r+0x16>
 80042e4:	69ab      	ldr	r3, [r5, #24]
 80042e6:	b913      	cbnz	r3, 80042ee <__swsetup_r+0x16>
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 fff5 	bl	80052d8 <__sinit>
 80042ee:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <__swsetup_r+0xd0>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d10f      	bne.n	8004314 <__swsetup_r+0x3c>
 80042f4:	686c      	ldr	r4, [r5, #4]
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042fc:	0719      	lsls	r1, r3, #28
 80042fe:	d42c      	bmi.n	800435a <__swsetup_r+0x82>
 8004300:	06dd      	lsls	r5, r3, #27
 8004302:	d411      	bmi.n	8004328 <__swsetup_r+0x50>
 8004304:	2309      	movs	r3, #9
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	e03e      	b.n	8004392 <__swsetup_r+0xba>
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <__swsetup_r+0xd4>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d101      	bne.n	800431e <__swsetup_r+0x46>
 800431a:	68ac      	ldr	r4, [r5, #8]
 800431c:	e7eb      	b.n	80042f6 <__swsetup_r+0x1e>
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <__swsetup_r+0xd8>)
 8004320:	429c      	cmp	r4, r3
 8004322:	bf08      	it	eq
 8004324:	68ec      	ldreq	r4, [r5, #12]
 8004326:	e7e6      	b.n	80042f6 <__swsetup_r+0x1e>
 8004328:	0758      	lsls	r0, r3, #29
 800432a:	d512      	bpl.n	8004352 <__swsetup_r+0x7a>
 800432c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800432e:	b141      	cbz	r1, 8004342 <__swsetup_r+0x6a>
 8004330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004334:	4299      	cmp	r1, r3
 8004336:	d002      	beq.n	800433e <__swsetup_r+0x66>
 8004338:	4630      	mov	r0, r6
 800433a:	f001 fc83 	bl	8005c44 <_free_r>
 800433e:	2300      	movs	r3, #0
 8004340:	6363      	str	r3, [r4, #52]	; 0x34
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	2300      	movs	r3, #0
 800434c:	6063      	str	r3, [r4, #4]
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	b94b      	cbnz	r3, 8004372 <__swsetup_r+0x9a>
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d003      	beq.n	8004372 <__swsetup_r+0x9a>
 800436a:	4621      	mov	r1, r4
 800436c:	4630      	mov	r0, r6
 800436e:	f001 f87d 	bl	800546c <__smakebuf_r>
 8004372:	89a0      	ldrh	r0, [r4, #12]
 8004374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004378:	f010 0301 	ands.w	r3, r0, #1
 800437c:	d00a      	beq.n	8004394 <__swsetup_r+0xbc>
 800437e:	2300      	movs	r3, #0
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	6963      	ldr	r3, [r4, #20]
 8004384:	425b      	negs	r3, r3
 8004386:	61a3      	str	r3, [r4, #24]
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	b943      	cbnz	r3, 800439e <__swsetup_r+0xc6>
 800438c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004390:	d1ba      	bne.n	8004308 <__swsetup_r+0x30>
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	0781      	lsls	r1, r0, #30
 8004396:	bf58      	it	pl
 8004398:	6963      	ldrpl	r3, [r4, #20]
 800439a:	60a3      	str	r3, [r4, #8]
 800439c:	e7f4      	b.n	8004388 <__swsetup_r+0xb0>
 800439e:	2000      	movs	r0, #0
 80043a0:	e7f7      	b.n	8004392 <__swsetup_r+0xba>
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	08006568 	.word	0x08006568
 80043ac:	08006588 	.word	0x08006588
 80043b0:	08006548 	.word	0x08006548

080043b4 <quorem>:
 80043b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	6903      	ldr	r3, [r0, #16]
 80043ba:	690c      	ldr	r4, [r1, #16]
 80043bc:	4607      	mov	r7, r0
 80043be:	42a3      	cmp	r3, r4
 80043c0:	f2c0 8082 	blt.w	80044c8 <quorem+0x114>
 80043c4:	3c01      	subs	r4, #1
 80043c6:	f100 0514 	add.w	r5, r0, #20
 80043ca:	f101 0814 	add.w	r8, r1, #20
 80043ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043dc:	3301      	adds	r3, #1
 80043de:	429a      	cmp	r2, r3
 80043e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80043e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043ec:	d331      	bcc.n	8004452 <quorem+0x9e>
 80043ee:	f04f 0e00 	mov.w	lr, #0
 80043f2:	4640      	mov	r0, r8
 80043f4:	46ac      	mov	ip, r5
 80043f6:	46f2      	mov	sl, lr
 80043f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80043fc:	b293      	uxth	r3, r2
 80043fe:	fb06 e303 	mla	r3, r6, r3, lr
 8004402:	0c12      	lsrs	r2, r2, #16
 8004404:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004408:	b29b      	uxth	r3, r3
 800440a:	fb06 e202 	mla	r2, r6, r2, lr
 800440e:	ebaa 0303 	sub.w	r3, sl, r3
 8004412:	f8dc a000 	ldr.w	sl, [ip]
 8004416:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800441a:	fa1f fa8a 	uxth.w	sl, sl
 800441e:	4453      	add	r3, sl
 8004420:	f8dc a000 	ldr.w	sl, [ip]
 8004424:	b292      	uxth	r2, r2
 8004426:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800442a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800442e:	b29b      	uxth	r3, r3
 8004430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004434:	4581      	cmp	r9, r0
 8004436:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800443a:	f84c 3b04 	str.w	r3, [ip], #4
 800443e:	d2db      	bcs.n	80043f8 <quorem+0x44>
 8004440:	f855 300b 	ldr.w	r3, [r5, fp]
 8004444:	b92b      	cbnz	r3, 8004452 <quorem+0x9e>
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	3b04      	subs	r3, #4
 800444a:	429d      	cmp	r5, r3
 800444c:	461a      	mov	r2, r3
 800444e:	d32f      	bcc.n	80044b0 <quorem+0xfc>
 8004450:	613c      	str	r4, [r7, #16]
 8004452:	4638      	mov	r0, r7
 8004454:	f001 fade 	bl	8005a14 <__mcmp>
 8004458:	2800      	cmp	r0, #0
 800445a:	db25      	blt.n	80044a8 <quorem+0xf4>
 800445c:	4628      	mov	r0, r5
 800445e:	f04f 0c00 	mov.w	ip, #0
 8004462:	3601      	adds	r6, #1
 8004464:	f858 1b04 	ldr.w	r1, [r8], #4
 8004468:	f8d0 e000 	ldr.w	lr, [r0]
 800446c:	b28b      	uxth	r3, r1
 800446e:	ebac 0303 	sub.w	r3, ip, r3
 8004472:	fa1f f28e 	uxth.w	r2, lr
 8004476:	4413      	add	r3, r2
 8004478:	0c0a      	lsrs	r2, r1, #16
 800447a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800447e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004482:	b29b      	uxth	r3, r3
 8004484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004488:	45c1      	cmp	r9, r8
 800448a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800448e:	f840 3b04 	str.w	r3, [r0], #4
 8004492:	d2e7      	bcs.n	8004464 <quorem+0xb0>
 8004494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004498:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800449c:	b922      	cbnz	r2, 80044a8 <quorem+0xf4>
 800449e:	3b04      	subs	r3, #4
 80044a0:	429d      	cmp	r5, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	d30a      	bcc.n	80044bc <quorem+0x108>
 80044a6:	613c      	str	r4, [r7, #16]
 80044a8:	4630      	mov	r0, r6
 80044aa:	b003      	add	sp, #12
 80044ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d1cb      	bne.n	8004450 <quorem+0x9c>
 80044b8:	3c01      	subs	r4, #1
 80044ba:	e7c6      	b.n	800444a <quorem+0x96>
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	3b04      	subs	r3, #4
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	d1f0      	bne.n	80044a6 <quorem+0xf2>
 80044c4:	3c01      	subs	r4, #1
 80044c6:	e7eb      	b.n	80044a0 <quorem+0xec>
 80044c8:	2000      	movs	r0, #0
 80044ca:	e7ee      	b.n	80044aa <quorem+0xf6>
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <_dtoa_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	461f      	mov	r7, r3
 80044d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80044da:	b099      	sub	sp, #100	; 0x64
 80044dc:	4605      	mov	r5, r0
 80044de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80044e6:	b974      	cbnz	r4, 8004506 <_dtoa_r+0x36>
 80044e8:	2010      	movs	r0, #16
 80044ea:	f000 ffff 	bl	80054ec <malloc>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6268      	str	r0, [r5, #36]	; 0x24
 80044f2:	b920      	cbnz	r0, 80044fe <_dtoa_r+0x2e>
 80044f4:	21ea      	movs	r1, #234	; 0xea
 80044f6:	4ba8      	ldr	r3, [pc, #672]	; (8004798 <_dtoa_r+0x2c8>)
 80044f8:	48a8      	ldr	r0, [pc, #672]	; (800479c <_dtoa_r+0x2cc>)
 80044fa:	f001 fe3d 	bl	8006178 <__assert_func>
 80044fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004502:	6004      	str	r4, [r0, #0]
 8004504:	60c4      	str	r4, [r0, #12]
 8004506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	b151      	cbz	r1, 8004522 <_dtoa_r+0x52>
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	2301      	movs	r3, #1
 8004510:	4093      	lsls	r3, r2
 8004512:	604a      	str	r2, [r1, #4]
 8004514:	608b      	str	r3, [r1, #8]
 8004516:	4628      	mov	r0, r5
 8004518:	f001 f83e 	bl	8005598 <_Bfree>
 800451c:	2200      	movs	r2, #0
 800451e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	1e3b      	subs	r3, r7, #0
 8004524:	bfaf      	iteee	ge
 8004526:	2300      	movge	r3, #0
 8004528:	2201      	movlt	r2, #1
 800452a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800452e:	9305      	strlt	r3, [sp, #20]
 8004530:	bfa8      	it	ge
 8004532:	f8c8 3000 	strge.w	r3, [r8]
 8004536:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800453a:	4b99      	ldr	r3, [pc, #612]	; (80047a0 <_dtoa_r+0x2d0>)
 800453c:	bfb8      	it	lt
 800453e:	f8c8 2000 	strlt.w	r2, [r8]
 8004542:	ea33 0309 	bics.w	r3, r3, r9
 8004546:	d119      	bne.n	800457c <_dtoa_r+0xac>
 8004548:	f242 730f 	movw	r3, #9999	; 0x270f
 800454c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004554:	4333      	orrs	r3, r6
 8004556:	f000 857f 	beq.w	8005058 <_dtoa_r+0xb88>
 800455a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800455c:	b953      	cbnz	r3, 8004574 <_dtoa_r+0xa4>
 800455e:	4b91      	ldr	r3, [pc, #580]	; (80047a4 <_dtoa_r+0x2d4>)
 8004560:	e022      	b.n	80045a8 <_dtoa_r+0xd8>
 8004562:	4b91      	ldr	r3, [pc, #580]	; (80047a8 <_dtoa_r+0x2d8>)
 8004564:	9303      	str	r3, [sp, #12]
 8004566:	3308      	adds	r3, #8
 8004568:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	9803      	ldr	r0, [sp, #12]
 800456e:	b019      	add	sp, #100	; 0x64
 8004570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004574:	4b8b      	ldr	r3, [pc, #556]	; (80047a4 <_dtoa_r+0x2d4>)
 8004576:	9303      	str	r3, [sp, #12]
 8004578:	3303      	adds	r3, #3
 800457a:	e7f5      	b.n	8004568 <_dtoa_r+0x98>
 800457c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004580:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	f7fc fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004590:	4680      	mov	r8, r0
 8004592:	b158      	cbz	r0, 80045ac <_dtoa_r+0xdc>
 8004594:	2301      	movs	r3, #1
 8004596:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8558 	beq.w	8005052 <_dtoa_r+0xb82>
 80045a2:	4882      	ldr	r0, [pc, #520]	; (80047ac <_dtoa_r+0x2dc>)
 80045a4:	6018      	str	r0, [r3, #0]
 80045a6:	1e43      	subs	r3, r0, #1
 80045a8:	9303      	str	r3, [sp, #12]
 80045aa:	e7df      	b.n	800456c <_dtoa_r+0x9c>
 80045ac:	ab16      	add	r3, sp, #88	; 0x58
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	ab17      	add	r3, sp, #92	; 0x5c
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4628      	mov	r0, r5
 80045b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80045ba:	f001 fad3 	bl	8005b64 <__d2b>
 80045be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80045c2:	4683      	mov	fp, r0
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	d07f      	beq.n	80046c8 <_dtoa_r+0x1f8>
 80045c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80045d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80045da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80045de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80045e2:	2200      	movs	r2, #0
 80045e4:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <_dtoa_r+0x2e0>)
 80045e6:	f7fb fdbf 	bl	8000168 <__aeabi_dsub>
 80045ea:	a365      	add	r3, pc, #404	; (adr r3, 8004780 <_dtoa_r+0x2b0>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f7fb ff72 	bl	80004d8 <__aeabi_dmul>
 80045f4:	a364      	add	r3, pc, #400	; (adr r3, 8004788 <_dtoa_r+0x2b8>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f7fb fdb7 	bl	800016c <__adddf3>
 80045fe:	4606      	mov	r6, r0
 8004600:	4620      	mov	r0, r4
 8004602:	460f      	mov	r7, r1
 8004604:	f7fb fefe 	bl	8000404 <__aeabi_i2d>
 8004608:	a361      	add	r3, pc, #388	; (adr r3, 8004790 <_dtoa_r+0x2c0>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fb ff63 	bl	80004d8 <__aeabi_dmul>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4630      	mov	r0, r6
 8004618:	4639      	mov	r1, r7
 800461a:	f7fb fda7 	bl	800016c <__adddf3>
 800461e:	4606      	mov	r6, r0
 8004620:	460f      	mov	r7, r1
 8004622:	f7fc fa09 	bl	8000a38 <__aeabi_d2iz>
 8004626:	2200      	movs	r2, #0
 8004628:	4682      	mov	sl, r0
 800462a:	2300      	movs	r3, #0
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fc f9c4 	bl	80009bc <__aeabi_dcmplt>
 8004634:	b148      	cbz	r0, 800464a <_dtoa_r+0x17a>
 8004636:	4650      	mov	r0, sl
 8004638:	f7fb fee4 	bl	8000404 <__aeabi_i2d>
 800463c:	4632      	mov	r2, r6
 800463e:	463b      	mov	r3, r7
 8004640:	f7fc f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8004644:	b908      	cbnz	r0, 800464a <_dtoa_r+0x17a>
 8004646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800464a:	f1ba 0f16 	cmp.w	sl, #22
 800464e:	d858      	bhi.n	8004702 <_dtoa_r+0x232>
 8004650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004654:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <_dtoa_r+0x2e4>)
 8004656:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fc f9ad 	bl	80009bc <__aeabi_dcmplt>
 8004662:	2800      	cmp	r0, #0
 8004664:	d04f      	beq.n	8004706 <_dtoa_r+0x236>
 8004666:	2300      	movs	r3, #0
 8004668:	f10a 3aff 	add.w	sl, sl, #4294967295
 800466c:	930f      	str	r3, [sp, #60]	; 0x3c
 800466e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004670:	1b1c      	subs	r4, r3, r4
 8004672:	1e63      	subs	r3, r4, #1
 8004674:	9309      	str	r3, [sp, #36]	; 0x24
 8004676:	bf49      	itett	mi
 8004678:	f1c4 0301 	rsbmi	r3, r4, #1
 800467c:	2300      	movpl	r3, #0
 800467e:	9306      	strmi	r3, [sp, #24]
 8004680:	2300      	movmi	r3, #0
 8004682:	bf54      	ite	pl
 8004684:	9306      	strpl	r3, [sp, #24]
 8004686:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004688:	f1ba 0f00 	cmp.w	sl, #0
 800468c:	db3d      	blt.n	800470a <_dtoa_r+0x23a>
 800468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004690:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004694:	4453      	add	r3, sl
 8004696:	9309      	str	r3, [sp, #36]	; 0x24
 8004698:	2300      	movs	r3, #0
 800469a:	930a      	str	r3, [sp, #40]	; 0x28
 800469c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800469e:	2b09      	cmp	r3, #9
 80046a0:	f200 808c 	bhi.w	80047bc <_dtoa_r+0x2ec>
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	bfc4      	itt	gt
 80046a8:	3b04      	subgt	r3, #4
 80046aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80046ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ae:	bfc8      	it	gt
 80046b0:	2400      	movgt	r4, #0
 80046b2:	f1a3 0302 	sub.w	r3, r3, #2
 80046b6:	bfd8      	it	le
 80046b8:	2401      	movle	r4, #1
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	f200 808a 	bhi.w	80047d4 <_dtoa_r+0x304>
 80046c0:	e8df f003 	tbb	[pc, r3]
 80046c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80046c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80046cc:	441c      	add	r4, r3
 80046ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	bfc3      	ittte	gt
 80046d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80046de:	fa09 f303 	lslgt.w	r3, r9, r3
 80046e2:	f1c3 0320 	rsble	r3, r3, #32
 80046e6:	bfc6      	itte	gt
 80046e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046ec:	4318      	orrgt	r0, r3
 80046ee:	fa06 f003 	lslle.w	r0, r6, r3
 80046f2:	f7fb fe77 	bl	80003e4 <__aeabi_ui2d>
 80046f6:	2301      	movs	r3, #1
 80046f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80046fc:	3c01      	subs	r4, #1
 80046fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8004700:	e76f      	b.n	80045e2 <_dtoa_r+0x112>
 8004702:	2301      	movs	r3, #1
 8004704:	e7b2      	b.n	800466c <_dtoa_r+0x19c>
 8004706:	900f      	str	r0, [sp, #60]	; 0x3c
 8004708:	e7b1      	b.n	800466e <_dtoa_r+0x19e>
 800470a:	9b06      	ldr	r3, [sp, #24]
 800470c:	eba3 030a 	sub.w	r3, r3, sl
 8004710:	9306      	str	r3, [sp, #24]
 8004712:	f1ca 0300 	rsb	r3, sl, #0
 8004716:	930a      	str	r3, [sp, #40]	; 0x28
 8004718:	2300      	movs	r3, #0
 800471a:	930e      	str	r3, [sp, #56]	; 0x38
 800471c:	e7be      	b.n	800469c <_dtoa_r+0x1cc>
 800471e:	2300      	movs	r3, #0
 8004720:	930b      	str	r3, [sp, #44]	; 0x2c
 8004722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc58      	bgt.n	80047da <_dtoa_r+0x30a>
 8004728:	f04f 0901 	mov.w	r9, #1
 800472c:	464b      	mov	r3, r9
 800472e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004732:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004736:	2200      	movs	r2, #0
 8004738:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800473a:	6042      	str	r2, [r0, #4]
 800473c:	2204      	movs	r2, #4
 800473e:	f102 0614 	add.w	r6, r2, #20
 8004742:	429e      	cmp	r6, r3
 8004744:	6841      	ldr	r1, [r0, #4]
 8004746:	d94e      	bls.n	80047e6 <_dtoa_r+0x316>
 8004748:	4628      	mov	r0, r5
 800474a:	f000 fee5 	bl	8005518 <_Balloc>
 800474e:	9003      	str	r0, [sp, #12]
 8004750:	2800      	cmp	r0, #0
 8004752:	d14c      	bne.n	80047ee <_dtoa_r+0x31e>
 8004754:	4602      	mov	r2, r0
 8004756:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <_dtoa_r+0x2e8>)
 800475c:	e6cc      	b.n	80044f8 <_dtoa_r+0x28>
 800475e:	2301      	movs	r3, #1
 8004760:	e7de      	b.n	8004720 <_dtoa_r+0x250>
 8004762:	2300      	movs	r3, #0
 8004764:	930b      	str	r3, [sp, #44]	; 0x2c
 8004766:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004768:	eb0a 0903 	add.w	r9, sl, r3
 800476c:	f109 0301 	add.w	r3, r9, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	9308      	str	r3, [sp, #32]
 8004774:	bfb8      	it	lt
 8004776:	2301      	movlt	r3, #1
 8004778:	e7dd      	b.n	8004736 <_dtoa_r+0x266>
 800477a:	2301      	movs	r3, #1
 800477c:	e7f2      	b.n	8004764 <_dtoa_r+0x294>
 800477e:	bf00      	nop
 8004780:	636f4361 	.word	0x636f4361
 8004784:	3fd287a7 	.word	0x3fd287a7
 8004788:	8b60c8b3 	.word	0x8b60c8b3
 800478c:	3fc68a28 	.word	0x3fc68a28
 8004790:	509f79fb 	.word	0x509f79fb
 8004794:	3fd34413 	.word	0x3fd34413
 8004798:	080064c5 	.word	0x080064c5
 800479c:	080064dc 	.word	0x080064dc
 80047a0:	7ff00000 	.word	0x7ff00000
 80047a4:	080064c1 	.word	0x080064c1
 80047a8:	080064b8 	.word	0x080064b8
 80047ac:	08006495 	.word	0x08006495
 80047b0:	3ff80000 	.word	0x3ff80000
 80047b4:	08006630 	.word	0x08006630
 80047b8:	08006537 	.word	0x08006537
 80047bc:	2401      	movs	r4, #1
 80047be:	2300      	movs	r3, #0
 80047c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80047c2:	9322      	str	r3, [sp, #136]	; 0x88
 80047c4:	f04f 39ff 	mov.w	r9, #4294967295
 80047c8:	2200      	movs	r2, #0
 80047ca:	2312      	movs	r3, #18
 80047cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80047d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80047d2:	e7b0      	b.n	8004736 <_dtoa_r+0x266>
 80047d4:	2301      	movs	r3, #1
 80047d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047d8:	e7f4      	b.n	80047c4 <_dtoa_r+0x2f4>
 80047da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80047de:	464b      	mov	r3, r9
 80047e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80047e4:	e7a7      	b.n	8004736 <_dtoa_r+0x266>
 80047e6:	3101      	adds	r1, #1
 80047e8:	6041      	str	r1, [r0, #4]
 80047ea:	0052      	lsls	r2, r2, #1
 80047ec:	e7a7      	b.n	800473e <_dtoa_r+0x26e>
 80047ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047f0:	9a03      	ldr	r2, [sp, #12]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	9b08      	ldr	r3, [sp, #32]
 80047f6:	2b0e      	cmp	r3, #14
 80047f8:	f200 80a8 	bhi.w	800494c <_dtoa_r+0x47c>
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	f000 80a5 	beq.w	800494c <_dtoa_r+0x47c>
 8004802:	f1ba 0f00 	cmp.w	sl, #0
 8004806:	dd34      	ble.n	8004872 <_dtoa_r+0x3a2>
 8004808:	4a9a      	ldr	r2, [pc, #616]	; (8004a74 <_dtoa_r+0x5a4>)
 800480a:	f00a 030f 	and.w	r3, sl, #15
 800480e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004812:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004816:	e9d3 3400 	ldrd	r3, r4, [r3]
 800481a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800481e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004822:	d016      	beq.n	8004852 <_dtoa_r+0x382>
 8004824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004828:	4b93      	ldr	r3, [pc, #588]	; (8004a78 <_dtoa_r+0x5a8>)
 800482a:	2703      	movs	r7, #3
 800482c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004830:	f7fb ff7c 	bl	800072c <__aeabi_ddiv>
 8004834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004838:	f004 040f 	and.w	r4, r4, #15
 800483c:	4e8e      	ldr	r6, [pc, #568]	; (8004a78 <_dtoa_r+0x5a8>)
 800483e:	b954      	cbnz	r4, 8004856 <_dtoa_r+0x386>
 8004840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004848:	f7fb ff70 	bl	800072c <__aeabi_ddiv>
 800484c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004850:	e029      	b.n	80048a6 <_dtoa_r+0x3d6>
 8004852:	2702      	movs	r7, #2
 8004854:	e7f2      	b.n	800483c <_dtoa_r+0x36c>
 8004856:	07e1      	lsls	r1, r4, #31
 8004858:	d508      	bpl.n	800486c <_dtoa_r+0x39c>
 800485a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800485e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004862:	f7fb fe39 	bl	80004d8 <__aeabi_dmul>
 8004866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800486a:	3701      	adds	r7, #1
 800486c:	1064      	asrs	r4, r4, #1
 800486e:	3608      	adds	r6, #8
 8004870:	e7e5      	b.n	800483e <_dtoa_r+0x36e>
 8004872:	f000 80a5 	beq.w	80049c0 <_dtoa_r+0x4f0>
 8004876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800487a:	f1ca 0400 	rsb	r4, sl, #0
 800487e:	4b7d      	ldr	r3, [pc, #500]	; (8004a74 <_dtoa_r+0x5a4>)
 8004880:	f004 020f 	and.w	r2, r4, #15
 8004884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fe24 	bl	80004d8 <__aeabi_dmul>
 8004890:	2702      	movs	r7, #2
 8004892:	2300      	movs	r3, #0
 8004894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004898:	4e77      	ldr	r6, [pc, #476]	; (8004a78 <_dtoa_r+0x5a8>)
 800489a:	1124      	asrs	r4, r4, #4
 800489c:	2c00      	cmp	r4, #0
 800489e:	f040 8084 	bne.w	80049aa <_dtoa_r+0x4da>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1d2      	bne.n	800484c <_dtoa_r+0x37c>
 80048a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 808b 	beq.w	80049c4 <_dtoa_r+0x4f4>
 80048ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048ba:	2200      	movs	r2, #0
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <_dtoa_r+0x5ac>)
 80048be:	f7fc f87d 	bl	80009bc <__aeabi_dcmplt>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d07e      	beq.n	80049c4 <_dtoa_r+0x4f4>
 80048c6:	9b08      	ldr	r3, [sp, #32]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07b      	beq.n	80049c4 <_dtoa_r+0x4f4>
 80048cc:	f1b9 0f00 	cmp.w	r9, #0
 80048d0:	dd38      	ble.n	8004944 <_dtoa_r+0x474>
 80048d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048d6:	2200      	movs	r2, #0
 80048d8:	4b69      	ldr	r3, [pc, #420]	; (8004a80 <_dtoa_r+0x5b0>)
 80048da:	f7fb fdfd 	bl	80004d8 <__aeabi_dmul>
 80048de:	464c      	mov	r4, r9
 80048e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048e4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80048e8:	3701      	adds	r7, #1
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7fb fd8a 	bl	8000404 <__aeabi_i2d>
 80048f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048f4:	f7fb fdf0 	bl	80004d8 <__aeabi_dmul>
 80048f8:	2200      	movs	r2, #0
 80048fa:	4b62      	ldr	r3, [pc, #392]	; (8004a84 <_dtoa_r+0x5b4>)
 80048fc:	f7fb fc36 	bl	800016c <__adddf3>
 8004900:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004904:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004908:	9611      	str	r6, [sp, #68]	; 0x44
 800490a:	2c00      	cmp	r4, #0
 800490c:	d15d      	bne.n	80049ca <_dtoa_r+0x4fa>
 800490e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004912:	2200      	movs	r2, #0
 8004914:	4b5c      	ldr	r3, [pc, #368]	; (8004a88 <_dtoa_r+0x5b8>)
 8004916:	f7fb fc27 	bl	8000168 <__aeabi_dsub>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004922:	4633      	mov	r3, r6
 8004924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004926:	f7fc f867 	bl	80009f8 <__aeabi_dcmpgt>
 800492a:	2800      	cmp	r0, #0
 800492c:	f040 829c 	bne.w	8004e68 <_dtoa_r+0x998>
 8004930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004936:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800493a:	f7fc f83f 	bl	80009bc <__aeabi_dcmplt>
 800493e:	2800      	cmp	r0, #0
 8004940:	f040 8290 	bne.w	8004e64 <_dtoa_r+0x994>
 8004944:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004948:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800494c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800494e:	2b00      	cmp	r3, #0
 8004950:	f2c0 8152 	blt.w	8004bf8 <_dtoa_r+0x728>
 8004954:	f1ba 0f0e 	cmp.w	sl, #14
 8004958:	f300 814e 	bgt.w	8004bf8 <_dtoa_r+0x728>
 800495c:	4b45      	ldr	r3, [pc, #276]	; (8004a74 <_dtoa_r+0x5a4>)
 800495e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004966:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800496a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800496c:	2b00      	cmp	r3, #0
 800496e:	f280 80db 	bge.w	8004b28 <_dtoa_r+0x658>
 8004972:	9b08      	ldr	r3, [sp, #32]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f300 80d7 	bgt.w	8004b28 <_dtoa_r+0x658>
 800497a:	f040 8272 	bne.w	8004e62 <_dtoa_r+0x992>
 800497e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004982:	2200      	movs	r2, #0
 8004984:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <_dtoa_r+0x5b8>)
 8004986:	f7fb fda7 	bl	80004d8 <__aeabi_dmul>
 800498a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498e:	f7fc f829 	bl	80009e4 <__aeabi_dcmpge>
 8004992:	9c08      	ldr	r4, [sp, #32]
 8004994:	4626      	mov	r6, r4
 8004996:	2800      	cmp	r0, #0
 8004998:	f040 8248 	bne.w	8004e2c <_dtoa_r+0x95c>
 800499c:	2331      	movs	r3, #49	; 0x31
 800499e:	9f03      	ldr	r7, [sp, #12]
 80049a0:	f10a 0a01 	add.w	sl, sl, #1
 80049a4:	f807 3b01 	strb.w	r3, [r7], #1
 80049a8:	e244      	b.n	8004e34 <_dtoa_r+0x964>
 80049aa:	07e2      	lsls	r2, r4, #31
 80049ac:	d505      	bpl.n	80049ba <_dtoa_r+0x4ea>
 80049ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049b2:	f7fb fd91 	bl	80004d8 <__aeabi_dmul>
 80049b6:	2301      	movs	r3, #1
 80049b8:	3701      	adds	r7, #1
 80049ba:	1064      	asrs	r4, r4, #1
 80049bc:	3608      	adds	r6, #8
 80049be:	e76d      	b.n	800489c <_dtoa_r+0x3cc>
 80049c0:	2702      	movs	r7, #2
 80049c2:	e770      	b.n	80048a6 <_dtoa_r+0x3d6>
 80049c4:	46d0      	mov	r8, sl
 80049c6:	9c08      	ldr	r4, [sp, #32]
 80049c8:	e78f      	b.n	80048ea <_dtoa_r+0x41a>
 80049ca:	9903      	ldr	r1, [sp, #12]
 80049cc:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <_dtoa_r+0x5a4>)
 80049ce:	4421      	add	r1, r4
 80049d0:	9112      	str	r1, [sp, #72]	; 0x48
 80049d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80049dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d055      	beq.n	8004a90 <_dtoa_r+0x5c0>
 80049e4:	2000      	movs	r0, #0
 80049e6:	4929      	ldr	r1, [pc, #164]	; (8004a8c <_dtoa_r+0x5bc>)
 80049e8:	f7fb fea0 	bl	800072c <__aeabi_ddiv>
 80049ec:	463b      	mov	r3, r7
 80049ee:	4632      	mov	r2, r6
 80049f0:	f7fb fbba 	bl	8000168 <__aeabi_dsub>
 80049f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049f8:	9f03      	ldr	r7, [sp, #12]
 80049fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049fe:	f7fc f81b 	bl	8000a38 <__aeabi_d2iz>
 8004a02:	4604      	mov	r4, r0
 8004a04:	f7fb fcfe 	bl	8000404 <__aeabi_i2d>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a10:	f7fb fbaa 	bl	8000168 <__aeabi_dsub>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	3430      	adds	r4, #48	; 0x30
 8004a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a22:	f807 4b01 	strb.w	r4, [r7], #1
 8004a26:	f7fb ffc9 	bl	80009bc <__aeabi_dcmplt>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d174      	bne.n	8004b18 <_dtoa_r+0x648>
 8004a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a32:	2000      	movs	r0, #0
 8004a34:	4911      	ldr	r1, [pc, #68]	; (8004a7c <_dtoa_r+0x5ac>)
 8004a36:	f7fb fb97 	bl	8000168 <__aeabi_dsub>
 8004a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a3e:	f7fb ffbd 	bl	80009bc <__aeabi_dcmplt>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	f040 80b7 	bne.w	8004bb6 <_dtoa_r+0x6e6>
 8004a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a4a:	429f      	cmp	r7, r3
 8004a4c:	f43f af7a 	beq.w	8004944 <_dtoa_r+0x474>
 8004a50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a54:	2200      	movs	r2, #0
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <_dtoa_r+0x5b0>)
 8004a58:	f7fb fd3e 	bl	80004d8 <__aeabi_dmul>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <_dtoa_r+0x5b0>)
 8004a68:	f7fb fd36 	bl	80004d8 <__aeabi_dmul>
 8004a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a70:	e7c3      	b.n	80049fa <_dtoa_r+0x52a>
 8004a72:	bf00      	nop
 8004a74:	08006630 	.word	0x08006630
 8004a78:	08006608 	.word	0x08006608
 8004a7c:	3ff00000 	.word	0x3ff00000
 8004a80:	40240000 	.word	0x40240000
 8004a84:	401c0000 	.word	0x401c0000
 8004a88:	40140000 	.word	0x40140000
 8004a8c:	3fe00000 	.word	0x3fe00000
 8004a90:	4630      	mov	r0, r6
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fb fd20 	bl	80004d8 <__aeabi_dmul>
 8004a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a9e:	9c03      	ldr	r4, [sp, #12]
 8004aa0:	9314      	str	r3, [sp, #80]	; 0x50
 8004aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aa6:	f7fb ffc7 	bl	8000a38 <__aeabi_d2iz>
 8004aaa:	9015      	str	r0, [sp, #84]	; 0x54
 8004aac:	f7fb fcaa 	bl	8000404 <__aeabi_i2d>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab8:	f7fb fb56 	bl	8000168 <__aeabi_dsub>
 8004abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004abe:	4606      	mov	r6, r0
 8004ac0:	3330      	adds	r3, #48	; 0x30
 8004ac2:	f804 3b01 	strb.w	r3, [r4], #1
 8004ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ac8:	460f      	mov	r7, r1
 8004aca:	429c      	cmp	r4, r3
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	d124      	bne.n	8004b1c <_dtoa_r+0x64c>
 8004ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ad6:	4bb0      	ldr	r3, [pc, #704]	; (8004d98 <_dtoa_r+0x8c8>)
 8004ad8:	f7fb fb48 	bl	800016c <__adddf3>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb ff88 	bl	80009f8 <__aeabi_dcmpgt>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d163      	bne.n	8004bb4 <_dtoa_r+0x6e4>
 8004aec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004af0:	2000      	movs	r0, #0
 8004af2:	49a9      	ldr	r1, [pc, #676]	; (8004d98 <_dtoa_r+0x8c8>)
 8004af4:	f7fb fb38 	bl	8000168 <__aeabi_dsub>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4630      	mov	r0, r6
 8004afe:	4639      	mov	r1, r7
 8004b00:	f7fb ff5c 	bl	80009bc <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f43f af1d 	beq.w	8004944 <_dtoa_r+0x474>
 8004b0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b0c:	1e7b      	subs	r3, r7, #1
 8004b0e:	9314      	str	r3, [sp, #80]	; 0x50
 8004b10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d0f8      	beq.n	8004b0a <_dtoa_r+0x63a>
 8004b18:	46c2      	mov	sl, r8
 8004b1a:	e03b      	b.n	8004b94 <_dtoa_r+0x6c4>
 8004b1c:	4b9f      	ldr	r3, [pc, #636]	; (8004d9c <_dtoa_r+0x8cc>)
 8004b1e:	f7fb fcdb 	bl	80004d8 <__aeabi_dmul>
 8004b22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b26:	e7bc      	b.n	8004aa2 <_dtoa_r+0x5d2>
 8004b28:	9f03      	ldr	r7, [sp, #12]
 8004b2a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004b2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fdf9 	bl	800072c <__aeabi_ddiv>
 8004b3a:	f7fb ff7d 	bl	8000a38 <__aeabi_d2iz>
 8004b3e:	4604      	mov	r4, r0
 8004b40:	f7fb fc60 	bl	8000404 <__aeabi_i2d>
 8004b44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b48:	f7fb fcc6 	bl	80004d8 <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4640      	mov	r0, r8
 8004b52:	4649      	mov	r1, r9
 8004b54:	f7fb fb08 	bl	8000168 <__aeabi_dsub>
 8004b58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004b5c:	f807 6b01 	strb.w	r6, [r7], #1
 8004b60:	9e03      	ldr	r6, [sp, #12]
 8004b62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004b66:	1bbe      	subs	r6, r7, r6
 8004b68:	45b4      	cmp	ip, r6
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	d136      	bne.n	8004bde <_dtoa_r+0x70e>
 8004b70:	f7fb fafc 	bl	800016c <__adddf3>
 8004b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b78:	4680      	mov	r8, r0
 8004b7a:	4689      	mov	r9, r1
 8004b7c:	f7fb ff3c 	bl	80009f8 <__aeabi_dcmpgt>
 8004b80:	bb58      	cbnz	r0, 8004bda <_dtoa_r+0x70a>
 8004b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b86:	4640      	mov	r0, r8
 8004b88:	4649      	mov	r1, r9
 8004b8a:	f7fb ff0d 	bl	80009a8 <__aeabi_dcmpeq>
 8004b8e:	b108      	cbz	r0, 8004b94 <_dtoa_r+0x6c4>
 8004b90:	07e1      	lsls	r1, r4, #31
 8004b92:	d422      	bmi.n	8004bda <_dtoa_r+0x70a>
 8004b94:	4628      	mov	r0, r5
 8004b96:	4659      	mov	r1, fp
 8004b98:	f000 fcfe 	bl	8005598 <_Bfree>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	703b      	strb	r3, [r7, #0]
 8004ba0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ba2:	f10a 0001 	add.w	r0, sl, #1
 8004ba6:	6018      	str	r0, [r3, #0]
 8004ba8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f43f acde 	beq.w	800456c <_dtoa_r+0x9c>
 8004bb0:	601f      	str	r7, [r3, #0]
 8004bb2:	e4db      	b.n	800456c <_dtoa_r+0x9c>
 8004bb4:	4627      	mov	r7, r4
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	461f      	mov	r7, r3
 8004bba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bbe:	2a39      	cmp	r2, #57	; 0x39
 8004bc0:	d107      	bne.n	8004bd2 <_dtoa_r+0x702>
 8004bc2:	9a03      	ldr	r2, [sp, #12]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1f7      	bne.n	8004bb8 <_dtoa_r+0x6e8>
 8004bc8:	2230      	movs	r2, #48	; 0x30
 8004bca:	9903      	ldr	r1, [sp, #12]
 8004bcc:	f108 0801 	add.w	r8, r8, #1
 8004bd0:	700a      	strb	r2, [r1, #0]
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	3201      	adds	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e79e      	b.n	8004b18 <_dtoa_r+0x648>
 8004bda:	46d0      	mov	r8, sl
 8004bdc:	e7eb      	b.n	8004bb6 <_dtoa_r+0x6e6>
 8004bde:	2200      	movs	r2, #0
 8004be0:	4b6e      	ldr	r3, [pc, #440]	; (8004d9c <_dtoa_r+0x8cc>)
 8004be2:	f7fb fc79 	bl	80004d8 <__aeabi_dmul>
 8004be6:	2200      	movs	r2, #0
 8004be8:	2300      	movs	r3, #0
 8004bea:	4680      	mov	r8, r0
 8004bec:	4689      	mov	r9, r1
 8004bee:	f7fb fedb 	bl	80009a8 <__aeabi_dcmpeq>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d09b      	beq.n	8004b2e <_dtoa_r+0x65e>
 8004bf6:	e7cd      	b.n	8004b94 <_dtoa_r+0x6c4>
 8004bf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	f000 80d0 	beq.w	8004da0 <_dtoa_r+0x8d0>
 8004c00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	f300 80ae 	bgt.w	8004d64 <_dtoa_r+0x894>
 8004c08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	f000 80a6 	beq.w	8004d5c <_dtoa_r+0x88c>
 8004c10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c16:	9f06      	ldr	r7, [sp, #24]
 8004c18:	9a06      	ldr	r2, [sp, #24]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	441a      	add	r2, r3
 8004c1e:	9206      	str	r2, [sp, #24]
 8004c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c22:	4628      	mov	r0, r5
 8004c24:	441a      	add	r2, r3
 8004c26:	9209      	str	r2, [sp, #36]	; 0x24
 8004c28:	f000 fd6c 	bl	8005704 <__i2b>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	2f00      	cmp	r7, #0
 8004c30:	dd0c      	ble.n	8004c4c <_dtoa_r+0x77c>
 8004c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dd09      	ble.n	8004c4c <_dtoa_r+0x77c>
 8004c38:	42bb      	cmp	r3, r7
 8004c3a:	bfa8      	it	ge
 8004c3c:	463b      	movge	r3, r7
 8004c3e:	9a06      	ldr	r2, [sp, #24]
 8004c40:	1aff      	subs	r7, r7, r3
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	9206      	str	r2, [sp, #24]
 8004c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c4e:	b1f3      	cbz	r3, 8004c8e <_dtoa_r+0x7be>
 8004c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a8 	beq.w	8004da8 <_dtoa_r+0x8d8>
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	dd10      	ble.n	8004c7e <_dtoa_r+0x7ae>
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4622      	mov	r2, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 fe0d 	bl	8005880 <__pow5mult>
 8004c66:	465a      	mov	r2, fp
 8004c68:	4601      	mov	r1, r0
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 fd5f 	bl	8005730 <__multiply>
 8004c72:	4680      	mov	r8, r0
 8004c74:	4659      	mov	r1, fp
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 fc8e 	bl	8005598 <_Bfree>
 8004c7c:	46c3      	mov	fp, r8
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	1b1a      	subs	r2, r3, r4
 8004c82:	d004      	beq.n	8004c8e <_dtoa_r+0x7be>
 8004c84:	4659      	mov	r1, fp
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 fdfa 	bl	8005880 <__pow5mult>
 8004c8c:	4683      	mov	fp, r0
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fd37 	bl	8005704 <__i2b>
 8004c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c98:	4604      	mov	r4, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f340 8086 	ble.w	8004dac <_dtoa_r+0x8dc>
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 fdeb 	bl	8005880 <__pow5mult>
 8004caa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cac:	4604      	mov	r4, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	dd7f      	ble.n	8004db2 <_dtoa_r+0x8e2>
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cbc:	6918      	ldr	r0, [r3, #16]
 8004cbe:	f000 fcd3 	bl	8005668 <__hi0bits>
 8004cc2:	f1c0 0020 	rsb	r0, r0, #32
 8004cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc8:	4418      	add	r0, r3
 8004cca:	f010 001f 	ands.w	r0, r0, #31
 8004cce:	f000 8092 	beq.w	8004df6 <_dtoa_r+0x926>
 8004cd2:	f1c0 0320 	rsb	r3, r0, #32
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	f340 808a 	ble.w	8004df0 <_dtoa_r+0x920>
 8004cdc:	f1c0 001c 	rsb	r0, r0, #28
 8004ce0:	9b06      	ldr	r3, [sp, #24]
 8004ce2:	4407      	add	r7, r0
 8004ce4:	4403      	add	r3, r0
 8004ce6:	9306      	str	r3, [sp, #24]
 8004ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cea:	4403      	add	r3, r0
 8004cec:	9309      	str	r3, [sp, #36]	; 0x24
 8004cee:	9b06      	ldr	r3, [sp, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dd05      	ble.n	8004d00 <_dtoa_r+0x830>
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f000 fe1b 	bl	8005934 <__lshift>
 8004cfe:	4683      	mov	fp, r0
 8004d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	dd05      	ble.n	8004d12 <_dtoa_r+0x842>
 8004d06:	4621      	mov	r1, r4
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fe12 	bl	8005934 <__lshift>
 8004d10:	4604      	mov	r4, r0
 8004d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d070      	beq.n	8004dfa <_dtoa_r+0x92a>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4658      	mov	r0, fp
 8004d1c:	f000 fe7a 	bl	8005a14 <__mcmp>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	da6a      	bge.n	8004dfa <_dtoa_r+0x92a>
 8004d24:	2300      	movs	r3, #0
 8004d26:	4659      	mov	r1, fp
 8004d28:	220a      	movs	r2, #10
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fc56 	bl	80055dc <__multadd>
 8004d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d32:	4683      	mov	fp, r0
 8004d34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8194 	beq.w	8005066 <_dtoa_r+0xb96>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	2300      	movs	r3, #0
 8004d42:	220a      	movs	r2, #10
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 fc49 	bl	80055dc <__multadd>
 8004d4a:	f1b9 0f00 	cmp.w	r9, #0
 8004d4e:	4606      	mov	r6, r0
 8004d50:	f300 8093 	bgt.w	8004e7a <_dtoa_r+0x9aa>
 8004d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	dc57      	bgt.n	8004e0a <_dtoa_r+0x93a>
 8004d5a:	e08e      	b.n	8004e7a <_dtoa_r+0x9aa>
 8004d5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d62:	e757      	b.n	8004c14 <_dtoa_r+0x744>
 8004d64:	9b08      	ldr	r3, [sp, #32]
 8004d66:	1e5c      	subs	r4, r3, #1
 8004d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	bfb7      	itett	lt
 8004d6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d70:	1b1c      	subge	r4, r3, r4
 8004d72:	1ae2      	sublt	r2, r4, r3
 8004d74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d76:	bfbe      	ittt	lt
 8004d78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004d7a:	189b      	addlt	r3, r3, r2
 8004d7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d7e:	9b08      	ldr	r3, [sp, #32]
 8004d80:	bfb8      	it	lt
 8004d82:	2400      	movlt	r4, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bfbb      	ittet	lt
 8004d88:	9b06      	ldrlt	r3, [sp, #24]
 8004d8a:	9a08      	ldrlt	r2, [sp, #32]
 8004d8c:	9f06      	ldrge	r7, [sp, #24]
 8004d8e:	1a9f      	sublt	r7, r3, r2
 8004d90:	bfac      	ite	ge
 8004d92:	9b08      	ldrge	r3, [sp, #32]
 8004d94:	2300      	movlt	r3, #0
 8004d96:	e73f      	b.n	8004c18 <_dtoa_r+0x748>
 8004d98:	3fe00000 	.word	0x3fe00000
 8004d9c:	40240000 	.word	0x40240000
 8004da0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004da2:	9f06      	ldr	r7, [sp, #24]
 8004da4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004da6:	e742      	b.n	8004c2e <_dtoa_r+0x75e>
 8004da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004daa:	e76b      	b.n	8004c84 <_dtoa_r+0x7b4>
 8004dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	dc19      	bgt.n	8004de6 <_dtoa_r+0x916>
 8004db2:	9b04      	ldr	r3, [sp, #16]
 8004db4:	b9bb      	cbnz	r3, 8004de6 <_dtoa_r+0x916>
 8004db6:	9b05      	ldr	r3, [sp, #20]
 8004db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dbc:	b99b      	cbnz	r3, 8004de6 <_dtoa_r+0x916>
 8004dbe:	9b05      	ldr	r3, [sp, #20]
 8004dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dc4:	0d1b      	lsrs	r3, r3, #20
 8004dc6:	051b      	lsls	r3, r3, #20
 8004dc8:	b183      	cbz	r3, 8004dec <_dtoa_r+0x91c>
 8004dca:	f04f 0801 	mov.w	r8, #1
 8004dce:	9b06      	ldr	r3, [sp, #24]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	9306      	str	r3, [sp, #24]
 8004dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f47f af6a 	bne.w	8004cb6 <_dtoa_r+0x7e6>
 8004de2:	2001      	movs	r0, #1
 8004de4:	e76f      	b.n	8004cc6 <_dtoa_r+0x7f6>
 8004de6:	f04f 0800 	mov.w	r8, #0
 8004dea:	e7f6      	b.n	8004dda <_dtoa_r+0x90a>
 8004dec:	4698      	mov	r8, r3
 8004dee:	e7f4      	b.n	8004dda <_dtoa_r+0x90a>
 8004df0:	f43f af7d 	beq.w	8004cee <_dtoa_r+0x81e>
 8004df4:	4618      	mov	r0, r3
 8004df6:	301c      	adds	r0, #28
 8004df8:	e772      	b.n	8004ce0 <_dtoa_r+0x810>
 8004dfa:	9b08      	ldr	r3, [sp, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dc36      	bgt.n	8004e6e <_dtoa_r+0x99e>
 8004e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	dd33      	ble.n	8004e6e <_dtoa_r+0x99e>
 8004e06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e0a:	f1b9 0f00 	cmp.w	r9, #0
 8004e0e:	d10d      	bne.n	8004e2c <_dtoa_r+0x95c>
 8004e10:	4621      	mov	r1, r4
 8004e12:	464b      	mov	r3, r9
 8004e14:	2205      	movs	r2, #5
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fbe0 	bl	80055dc <__multadd>
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4658      	mov	r0, fp
 8004e22:	f000 fdf7 	bl	8005a14 <__mcmp>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f73f adb8 	bgt.w	800499c <_dtoa_r+0x4cc>
 8004e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e2e:	9f03      	ldr	r7, [sp, #12]
 8004e30:	ea6f 0a03 	mvn.w	sl, r3
 8004e34:	f04f 0800 	mov.w	r8, #0
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fbac 	bl	8005598 <_Bfree>
 8004e40:	2e00      	cmp	r6, #0
 8004e42:	f43f aea7 	beq.w	8004b94 <_dtoa_r+0x6c4>
 8004e46:	f1b8 0f00 	cmp.w	r8, #0
 8004e4a:	d005      	beq.n	8004e58 <_dtoa_r+0x988>
 8004e4c:	45b0      	cmp	r8, r6
 8004e4e:	d003      	beq.n	8004e58 <_dtoa_r+0x988>
 8004e50:	4641      	mov	r1, r8
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 fba0 	bl	8005598 <_Bfree>
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 fb9c 	bl	8005598 <_Bfree>
 8004e60:	e698      	b.n	8004b94 <_dtoa_r+0x6c4>
 8004e62:	2400      	movs	r4, #0
 8004e64:	4626      	mov	r6, r4
 8004e66:	e7e1      	b.n	8004e2c <_dtoa_r+0x95c>
 8004e68:	46c2      	mov	sl, r8
 8004e6a:	4626      	mov	r6, r4
 8004e6c:	e596      	b.n	800499c <_dtoa_r+0x4cc>
 8004e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80fd 	beq.w	8005074 <_dtoa_r+0xba4>
 8004e7a:	2f00      	cmp	r7, #0
 8004e7c:	dd05      	ble.n	8004e8a <_dtoa_r+0x9ba>
 8004e7e:	4631      	mov	r1, r6
 8004e80:	463a      	mov	r2, r7
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 fd56 	bl	8005934 <__lshift>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	f1b8 0f00 	cmp.w	r8, #0
 8004e8e:	d05c      	beq.n	8004f4a <_dtoa_r+0xa7a>
 8004e90:	4628      	mov	r0, r5
 8004e92:	6871      	ldr	r1, [r6, #4]
 8004e94:	f000 fb40 	bl	8005518 <_Balloc>
 8004e98:	4607      	mov	r7, r0
 8004e9a:	b928      	cbnz	r0, 8004ea8 <_dtoa_r+0x9d8>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ea2:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <_dtoa_r+0xbd0>)
 8004ea4:	f7ff bb28 	b.w	80044f8 <_dtoa_r+0x28>
 8004ea8:	6932      	ldr	r2, [r6, #16]
 8004eaa:	f106 010c 	add.w	r1, r6, #12
 8004eae:	3202      	adds	r2, #2
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	300c      	adds	r0, #12
 8004eb4:	f7fe fcba 	bl	800382c <memcpy>
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4639      	mov	r1, r7
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 fd39 	bl	8005934 <__lshift>
 8004ec2:	46b0      	mov	r8, r6
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	9308      	str	r3, [sp, #32]
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	444b      	add	r3, r9
 8004ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed2:	9b04      	ldr	r3, [sp, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eda:	9b08      	ldr	r3, [sp, #32]
 8004edc:	4621      	mov	r1, r4
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4658      	mov	r0, fp
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	f7ff fa66 	bl	80043b4 <quorem>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4641      	mov	r1, r8
 8004eec:	3330      	adds	r3, #48	; 0x30
 8004eee:	9006      	str	r0, [sp, #24]
 8004ef0:	4658      	mov	r0, fp
 8004ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ef4:	f000 fd8e 	bl	8005a14 <__mcmp>
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4681      	mov	r9, r0
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fda4 	bl	8005a4c <__mdiff>
 8004f04:	68c2      	ldr	r2, [r0, #12]
 8004f06:	4607      	mov	r7, r0
 8004f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0a:	bb02      	cbnz	r2, 8004f4e <_dtoa_r+0xa7e>
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	4658      	mov	r0, fp
 8004f10:	f000 fd80 	bl	8005a14 <__mcmp>
 8004f14:	4602      	mov	r2, r0
 8004f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f18:	4639      	mov	r1, r7
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004f20:	f000 fb3a 	bl	8005598 <_Bfree>
 8004f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f28:	9f08      	ldr	r7, [sp, #32]
 8004f2a:	ea43 0102 	orr.w	r1, r3, r2
 8004f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f30:	430b      	orrs	r3, r1
 8004f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f34:	d10d      	bne.n	8004f52 <_dtoa_r+0xa82>
 8004f36:	2b39      	cmp	r3, #57	; 0x39
 8004f38:	d029      	beq.n	8004f8e <_dtoa_r+0xabe>
 8004f3a:	f1b9 0f00 	cmp.w	r9, #0
 8004f3e:	dd01      	ble.n	8004f44 <_dtoa_r+0xa74>
 8004f40:	9b06      	ldr	r3, [sp, #24]
 8004f42:	3331      	adds	r3, #49	; 0x31
 8004f44:	9a04      	ldr	r2, [sp, #16]
 8004f46:	7013      	strb	r3, [r2, #0]
 8004f48:	e776      	b.n	8004e38 <_dtoa_r+0x968>
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	e7b9      	b.n	8004ec2 <_dtoa_r+0x9f2>
 8004f4e:	2201      	movs	r2, #1
 8004f50:	e7e2      	b.n	8004f18 <_dtoa_r+0xa48>
 8004f52:	f1b9 0f00 	cmp.w	r9, #0
 8004f56:	db06      	blt.n	8004f66 <_dtoa_r+0xa96>
 8004f58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004f5a:	ea41 0909 	orr.w	r9, r1, r9
 8004f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f60:	ea59 0101 	orrs.w	r1, r9, r1
 8004f64:	d120      	bne.n	8004fa8 <_dtoa_r+0xad8>
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	ddec      	ble.n	8004f44 <_dtoa_r+0xa74>
 8004f6a:	4659      	mov	r1, fp
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4628      	mov	r0, r5
 8004f70:	9308      	str	r3, [sp, #32]
 8004f72:	f000 fcdf 	bl	8005934 <__lshift>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4683      	mov	fp, r0
 8004f7a:	f000 fd4b 	bl	8005a14 <__mcmp>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	9b08      	ldr	r3, [sp, #32]
 8004f82:	dc02      	bgt.n	8004f8a <_dtoa_r+0xaba>
 8004f84:	d1de      	bne.n	8004f44 <_dtoa_r+0xa74>
 8004f86:	07da      	lsls	r2, r3, #31
 8004f88:	d5dc      	bpl.n	8004f44 <_dtoa_r+0xa74>
 8004f8a:	2b39      	cmp	r3, #57	; 0x39
 8004f8c:	d1d8      	bne.n	8004f40 <_dtoa_r+0xa70>
 8004f8e:	2339      	movs	r3, #57	; 0x39
 8004f90:	9a04      	ldr	r2, [sp, #16]
 8004f92:	7013      	strb	r3, [r2, #0]
 8004f94:	463b      	mov	r3, r7
 8004f96:	461f      	mov	r7, r3
 8004f98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	2a39      	cmp	r2, #57	; 0x39
 8004fa0:	d050      	beq.n	8005044 <_dtoa_r+0xb74>
 8004fa2:	3201      	adds	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e747      	b.n	8004e38 <_dtoa_r+0x968>
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	dd03      	ble.n	8004fb4 <_dtoa_r+0xae4>
 8004fac:	2b39      	cmp	r3, #57	; 0x39
 8004fae:	d0ee      	beq.n	8004f8e <_dtoa_r+0xabe>
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	e7c7      	b.n	8004f44 <_dtoa_r+0xa74>
 8004fb4:	9a08      	ldr	r2, [sp, #32]
 8004fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fbc:	428a      	cmp	r2, r1
 8004fbe:	d02a      	beq.n	8005016 <_dtoa_r+0xb46>
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 fb08 	bl	80055dc <__multadd>
 8004fcc:	45b0      	cmp	r8, r6
 8004fce:	4683      	mov	fp, r0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f04f 020a 	mov.w	r2, #10
 8004fd8:	4641      	mov	r1, r8
 8004fda:	4628      	mov	r0, r5
 8004fdc:	d107      	bne.n	8004fee <_dtoa_r+0xb1e>
 8004fde:	f000 fafd 	bl	80055dc <__multadd>
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	9b08      	ldr	r3, [sp, #32]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	9308      	str	r3, [sp, #32]
 8004fec:	e775      	b.n	8004eda <_dtoa_r+0xa0a>
 8004fee:	f000 faf5 	bl	80055dc <__multadd>
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 faee 	bl	80055dc <__multadd>
 8005000:	4606      	mov	r6, r0
 8005002:	e7f0      	b.n	8004fe6 <_dtoa_r+0xb16>
 8005004:	f1b9 0f00 	cmp.w	r9, #0
 8005008:	bfcc      	ite	gt
 800500a:	464f      	movgt	r7, r9
 800500c:	2701      	movle	r7, #1
 800500e:	f04f 0800 	mov.w	r8, #0
 8005012:	9a03      	ldr	r2, [sp, #12]
 8005014:	4417      	add	r7, r2
 8005016:	4659      	mov	r1, fp
 8005018:	2201      	movs	r2, #1
 800501a:	4628      	mov	r0, r5
 800501c:	9308      	str	r3, [sp, #32]
 800501e:	f000 fc89 	bl	8005934 <__lshift>
 8005022:	4621      	mov	r1, r4
 8005024:	4683      	mov	fp, r0
 8005026:	f000 fcf5 	bl	8005a14 <__mcmp>
 800502a:	2800      	cmp	r0, #0
 800502c:	dcb2      	bgt.n	8004f94 <_dtoa_r+0xac4>
 800502e:	d102      	bne.n	8005036 <_dtoa_r+0xb66>
 8005030:	9b08      	ldr	r3, [sp, #32]
 8005032:	07db      	lsls	r3, r3, #31
 8005034:	d4ae      	bmi.n	8004f94 <_dtoa_r+0xac4>
 8005036:	463b      	mov	r3, r7
 8005038:	461f      	mov	r7, r3
 800503a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800503e:	2a30      	cmp	r2, #48	; 0x30
 8005040:	d0fa      	beq.n	8005038 <_dtoa_r+0xb68>
 8005042:	e6f9      	b.n	8004e38 <_dtoa_r+0x968>
 8005044:	9a03      	ldr	r2, [sp, #12]
 8005046:	429a      	cmp	r2, r3
 8005048:	d1a5      	bne.n	8004f96 <_dtoa_r+0xac6>
 800504a:	2331      	movs	r3, #49	; 0x31
 800504c:	f10a 0a01 	add.w	sl, sl, #1
 8005050:	e779      	b.n	8004f46 <_dtoa_r+0xa76>
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <_dtoa_r+0xbd4>)
 8005054:	f7ff baa8 	b.w	80045a8 <_dtoa_r+0xd8>
 8005058:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800505a:	2b00      	cmp	r3, #0
 800505c:	f47f aa81 	bne.w	8004562 <_dtoa_r+0x92>
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <_dtoa_r+0xbd8>)
 8005062:	f7ff baa1 	b.w	80045a8 <_dtoa_r+0xd8>
 8005066:	f1b9 0f00 	cmp.w	r9, #0
 800506a:	dc03      	bgt.n	8005074 <_dtoa_r+0xba4>
 800506c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800506e:	2b02      	cmp	r3, #2
 8005070:	f73f aecb 	bgt.w	8004e0a <_dtoa_r+0x93a>
 8005074:	9f03      	ldr	r7, [sp, #12]
 8005076:	4621      	mov	r1, r4
 8005078:	4658      	mov	r0, fp
 800507a:	f7ff f99b 	bl	80043b4 <quorem>
 800507e:	9a03      	ldr	r2, [sp, #12]
 8005080:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005084:	f807 3b01 	strb.w	r3, [r7], #1
 8005088:	1aba      	subs	r2, r7, r2
 800508a:	4591      	cmp	r9, r2
 800508c:	ddba      	ble.n	8005004 <_dtoa_r+0xb34>
 800508e:	4659      	mov	r1, fp
 8005090:	2300      	movs	r3, #0
 8005092:	220a      	movs	r2, #10
 8005094:	4628      	mov	r0, r5
 8005096:	f000 faa1 	bl	80055dc <__multadd>
 800509a:	4683      	mov	fp, r0
 800509c:	e7eb      	b.n	8005076 <_dtoa_r+0xba6>
 800509e:	bf00      	nop
 80050a0:	08006537 	.word	0x08006537
 80050a4:	08006494 	.word	0x08006494
 80050a8:	080064b8 	.word	0x080064b8

080050ac <__sflush_r>:
 80050ac:	898a      	ldrh	r2, [r1, #12]
 80050ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b0:	4605      	mov	r5, r0
 80050b2:	0710      	lsls	r0, r2, #28
 80050b4:	460c      	mov	r4, r1
 80050b6:	d457      	bmi.n	8005168 <__sflush_r+0xbc>
 80050b8:	684b      	ldr	r3, [r1, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dc04      	bgt.n	80050c8 <__sflush_r+0x1c>
 80050be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dc01      	bgt.n	80050c8 <__sflush_r+0x1c>
 80050c4:	2000      	movs	r0, #0
 80050c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	d0fa      	beq.n	80050c4 <__sflush_r+0x18>
 80050ce:	2300      	movs	r3, #0
 80050d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050d4:	682f      	ldr	r7, [r5, #0]
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	d032      	beq.n	8005140 <__sflush_r+0x94>
 80050da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	075a      	lsls	r2, r3, #29
 80050e0:	d505      	bpl.n	80050ee <__sflush_r+0x42>
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	1ac0      	subs	r0, r0, r3
 80050e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050e8:	b10b      	cbz	r3, 80050ee <__sflush_r+0x42>
 80050ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ec:	1ac0      	subs	r0, r0, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	4602      	mov	r2, r0
 80050f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050f4:	4628      	mov	r0, r5
 80050f6:	6a21      	ldr	r1, [r4, #32]
 80050f8:	47b0      	blx	r6
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	d106      	bne.n	800510e <__sflush_r+0x62>
 8005100:	6829      	ldr	r1, [r5, #0]
 8005102:	291d      	cmp	r1, #29
 8005104:	d82c      	bhi.n	8005160 <__sflush_r+0xb4>
 8005106:	4a29      	ldr	r2, [pc, #164]	; (80051ac <__sflush_r+0x100>)
 8005108:	40ca      	lsrs	r2, r1
 800510a:	07d6      	lsls	r6, r2, #31
 800510c:	d528      	bpl.n	8005160 <__sflush_r+0xb4>
 800510e:	2200      	movs	r2, #0
 8005110:	6062      	str	r2, [r4, #4]
 8005112:	6922      	ldr	r2, [r4, #16]
 8005114:	04d9      	lsls	r1, r3, #19
 8005116:	6022      	str	r2, [r4, #0]
 8005118:	d504      	bpl.n	8005124 <__sflush_r+0x78>
 800511a:	1c42      	adds	r2, r0, #1
 800511c:	d101      	bne.n	8005122 <__sflush_r+0x76>
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	b903      	cbnz	r3, 8005124 <__sflush_r+0x78>
 8005122:	6560      	str	r0, [r4, #84]	; 0x54
 8005124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005126:	602f      	str	r7, [r5, #0]
 8005128:	2900      	cmp	r1, #0
 800512a:	d0cb      	beq.n	80050c4 <__sflush_r+0x18>
 800512c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__sflush_r+0x8e>
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fd85 	bl	8005c44 <_free_r>
 800513a:	2000      	movs	r0, #0
 800513c:	6360      	str	r0, [r4, #52]	; 0x34
 800513e:	e7c2      	b.n	80050c6 <__sflush_r+0x1a>
 8005140:	6a21      	ldr	r1, [r4, #32]
 8005142:	2301      	movs	r3, #1
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	1c41      	adds	r1, r0, #1
 800514a:	d1c7      	bne.n	80050dc <__sflush_r+0x30>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0c4      	beq.n	80050dc <__sflush_r+0x30>
 8005152:	2b1d      	cmp	r3, #29
 8005154:	d001      	beq.n	800515a <__sflush_r+0xae>
 8005156:	2b16      	cmp	r3, #22
 8005158:	d101      	bne.n	800515e <__sflush_r+0xb2>
 800515a:	602f      	str	r7, [r5, #0]
 800515c:	e7b2      	b.n	80050c4 <__sflush_r+0x18>
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	e7ae      	b.n	80050c6 <__sflush_r+0x1a>
 8005168:	690f      	ldr	r7, [r1, #16]
 800516a:	2f00      	cmp	r7, #0
 800516c:	d0aa      	beq.n	80050c4 <__sflush_r+0x18>
 800516e:	0793      	lsls	r3, r2, #30
 8005170:	bf18      	it	ne
 8005172:	2300      	movne	r3, #0
 8005174:	680e      	ldr	r6, [r1, #0]
 8005176:	bf08      	it	eq
 8005178:	694b      	ldreq	r3, [r1, #20]
 800517a:	1bf6      	subs	r6, r6, r7
 800517c:	600f      	str	r7, [r1, #0]
 800517e:	608b      	str	r3, [r1, #8]
 8005180:	2e00      	cmp	r6, #0
 8005182:	dd9f      	ble.n	80050c4 <__sflush_r+0x18>
 8005184:	4633      	mov	r3, r6
 8005186:	463a      	mov	r2, r7
 8005188:	4628      	mov	r0, r5
 800518a:	6a21      	ldr	r1, [r4, #32]
 800518c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005190:	47e0      	blx	ip
 8005192:	2800      	cmp	r0, #0
 8005194:	dc06      	bgt.n	80051a4 <__sflush_r+0xf8>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	e790      	b.n	80050c6 <__sflush_r+0x1a>
 80051a4:	4407      	add	r7, r0
 80051a6:	1a36      	subs	r6, r6, r0
 80051a8:	e7ea      	b.n	8005180 <__sflush_r+0xd4>
 80051aa:	bf00      	nop
 80051ac:	20400001 	.word	0x20400001

080051b0 <_fflush_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	690b      	ldr	r3, [r1, #16]
 80051b4:	4605      	mov	r5, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	b913      	cbnz	r3, 80051c0 <_fflush_r+0x10>
 80051ba:	2500      	movs	r5, #0
 80051bc:	4628      	mov	r0, r5
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	b118      	cbz	r0, 80051ca <_fflush_r+0x1a>
 80051c2:	6983      	ldr	r3, [r0, #24]
 80051c4:	b90b      	cbnz	r3, 80051ca <_fflush_r+0x1a>
 80051c6:	f000 f887 	bl	80052d8 <__sinit>
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <_fflush_r+0x6c>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d11b      	bne.n	8005208 <_fflush_r+0x58>
 80051d0:	686c      	ldr	r4, [r5, #4]
 80051d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0ef      	beq.n	80051ba <_fflush_r+0xa>
 80051da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051dc:	07d0      	lsls	r0, r2, #31
 80051de:	d404      	bmi.n	80051ea <_fflush_r+0x3a>
 80051e0:	0599      	lsls	r1, r3, #22
 80051e2:	d402      	bmi.n	80051ea <_fflush_r+0x3a>
 80051e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051e6:	f000 f91a 	bl	800541e <__retarget_lock_acquire_recursive>
 80051ea:	4628      	mov	r0, r5
 80051ec:	4621      	mov	r1, r4
 80051ee:	f7ff ff5d 	bl	80050ac <__sflush_r>
 80051f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f4:	4605      	mov	r5, r0
 80051f6:	07da      	lsls	r2, r3, #31
 80051f8:	d4e0      	bmi.n	80051bc <_fflush_r+0xc>
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	059b      	lsls	r3, r3, #22
 80051fe:	d4dd      	bmi.n	80051bc <_fflush_r+0xc>
 8005200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005202:	f000 f90d 	bl	8005420 <__retarget_lock_release_recursive>
 8005206:	e7d9      	b.n	80051bc <_fflush_r+0xc>
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <_fflush_r+0x70>)
 800520a:	429c      	cmp	r4, r3
 800520c:	d101      	bne.n	8005212 <_fflush_r+0x62>
 800520e:	68ac      	ldr	r4, [r5, #8]
 8005210:	e7df      	b.n	80051d2 <_fflush_r+0x22>
 8005212:	4b04      	ldr	r3, [pc, #16]	; (8005224 <_fflush_r+0x74>)
 8005214:	429c      	cmp	r4, r3
 8005216:	bf08      	it	eq
 8005218:	68ec      	ldreq	r4, [r5, #12]
 800521a:	e7da      	b.n	80051d2 <_fflush_r+0x22>
 800521c:	08006568 	.word	0x08006568
 8005220:	08006588 	.word	0x08006588
 8005224:	08006548 	.word	0x08006548

08005228 <std>:
 8005228:	2300      	movs	r3, #0
 800522a:	b510      	push	{r4, lr}
 800522c:	4604      	mov	r4, r0
 800522e:	e9c0 3300 	strd	r3, r3, [r0]
 8005232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005236:	6083      	str	r3, [r0, #8]
 8005238:	8181      	strh	r1, [r0, #12]
 800523a:	6643      	str	r3, [r0, #100]	; 0x64
 800523c:	81c2      	strh	r2, [r0, #14]
 800523e:	6183      	str	r3, [r0, #24]
 8005240:	4619      	mov	r1, r3
 8005242:	2208      	movs	r2, #8
 8005244:	305c      	adds	r0, #92	; 0x5c
 8005246:	f7fe faff 	bl	8003848 <memset>
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <std+0x38>)
 800524c:	6224      	str	r4, [r4, #32]
 800524e:	6263      	str	r3, [r4, #36]	; 0x24
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <std+0x3c>)
 8005252:	62a3      	str	r3, [r4, #40]	; 0x28
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <std+0x40>)
 8005256:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <std+0x44>)
 800525a:	6323      	str	r3, [r4, #48]	; 0x30
 800525c:	bd10      	pop	{r4, pc}
 800525e:	bf00      	nop
 8005260:	080060cd 	.word	0x080060cd
 8005264:	080060ef 	.word	0x080060ef
 8005268:	08006127 	.word	0x08006127
 800526c:	0800614b 	.word	0x0800614b

08005270 <_cleanup_r>:
 8005270:	4901      	ldr	r1, [pc, #4]	; (8005278 <_cleanup_r+0x8>)
 8005272:	f000 b8af 	b.w	80053d4 <_fwalk_reent>
 8005276:	bf00      	nop
 8005278:	080051b1 	.word	0x080051b1

0800527c <__sfmoreglue>:
 800527c:	2268      	movs	r2, #104	; 0x68
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	1e4d      	subs	r5, r1, #1
 8005282:	4355      	muls	r5, r2
 8005284:	460e      	mov	r6, r1
 8005286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800528a:	f000 fd43 	bl	8005d14 <_malloc_r>
 800528e:	4604      	mov	r4, r0
 8005290:	b140      	cbz	r0, 80052a4 <__sfmoreglue+0x28>
 8005292:	2100      	movs	r1, #0
 8005294:	e9c0 1600 	strd	r1, r6, [r0]
 8005298:	300c      	adds	r0, #12
 800529a:	60a0      	str	r0, [r4, #8]
 800529c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052a0:	f7fe fad2 	bl	8003848 <memset>
 80052a4:	4620      	mov	r0, r4
 80052a6:	bd70      	pop	{r4, r5, r6, pc}

080052a8 <__sfp_lock_acquire>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__sfp_lock_acquire+0x8>)
 80052aa:	f000 b8b8 	b.w	800541e <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	200005dd 	.word	0x200005dd

080052b4 <__sfp_lock_release>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__sfp_lock_release+0x8>)
 80052b6:	f000 b8b3 	b.w	8005420 <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	200005dd 	.word	0x200005dd

080052c0 <__sinit_lock_acquire>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__sinit_lock_acquire+0x8>)
 80052c2:	f000 b8ac 	b.w	800541e <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	200005de 	.word	0x200005de

080052cc <__sinit_lock_release>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__sinit_lock_release+0x8>)
 80052ce:	f000 b8a7 	b.w	8005420 <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	200005de 	.word	0x200005de

080052d8 <__sinit>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4604      	mov	r4, r0
 80052dc:	f7ff fff0 	bl	80052c0 <__sinit_lock_acquire>
 80052e0:	69a3      	ldr	r3, [r4, #24]
 80052e2:	b11b      	cbz	r3, 80052ec <__sinit+0x14>
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	f7ff bff0 	b.w	80052cc <__sinit_lock_release>
 80052ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052f0:	6523      	str	r3, [r4, #80]	; 0x50
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <__sinit+0x68>)
 80052f4:	4a13      	ldr	r2, [pc, #76]	; (8005344 <__sinit+0x6c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052fa:	42a3      	cmp	r3, r4
 80052fc:	bf08      	it	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	4620      	mov	r0, r4
 8005302:	bf08      	it	eq
 8005304:	61a3      	streq	r3, [r4, #24]
 8005306:	f000 f81f 	bl	8005348 <__sfp>
 800530a:	6060      	str	r0, [r4, #4]
 800530c:	4620      	mov	r0, r4
 800530e:	f000 f81b 	bl	8005348 <__sfp>
 8005312:	60a0      	str	r0, [r4, #8]
 8005314:	4620      	mov	r0, r4
 8005316:	f000 f817 	bl	8005348 <__sfp>
 800531a:	2200      	movs	r2, #0
 800531c:	2104      	movs	r1, #4
 800531e:	60e0      	str	r0, [r4, #12]
 8005320:	6860      	ldr	r0, [r4, #4]
 8005322:	f7ff ff81 	bl	8005228 <std>
 8005326:	2201      	movs	r2, #1
 8005328:	2109      	movs	r1, #9
 800532a:	68a0      	ldr	r0, [r4, #8]
 800532c:	f7ff ff7c 	bl	8005228 <std>
 8005330:	2202      	movs	r2, #2
 8005332:	2112      	movs	r1, #18
 8005334:	68e0      	ldr	r0, [r4, #12]
 8005336:	f7ff ff77 	bl	8005228 <std>
 800533a:	2301      	movs	r3, #1
 800533c:	61a3      	str	r3, [r4, #24]
 800533e:	e7d1      	b.n	80052e4 <__sinit+0xc>
 8005340:	08006480 	.word	0x08006480
 8005344:	08005271 	.word	0x08005271

08005348 <__sfp>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	4607      	mov	r7, r0
 800534c:	f7ff ffac 	bl	80052a8 <__sfp_lock_acquire>
 8005350:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <__sfp+0x84>)
 8005352:	681e      	ldr	r6, [r3, #0]
 8005354:	69b3      	ldr	r3, [r6, #24]
 8005356:	b913      	cbnz	r3, 800535e <__sfp+0x16>
 8005358:	4630      	mov	r0, r6
 800535a:	f7ff ffbd 	bl	80052d8 <__sinit>
 800535e:	3648      	adds	r6, #72	; 0x48
 8005360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005364:	3b01      	subs	r3, #1
 8005366:	d503      	bpl.n	8005370 <__sfp+0x28>
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	b30b      	cbz	r3, 80053b0 <__sfp+0x68>
 800536c:	6836      	ldr	r6, [r6, #0]
 800536e:	e7f7      	b.n	8005360 <__sfp+0x18>
 8005370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005374:	b9d5      	cbnz	r5, 80053ac <__sfp+0x64>
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <__sfp+0x88>)
 8005378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800537c:	60e3      	str	r3, [r4, #12]
 800537e:	6665      	str	r5, [r4, #100]	; 0x64
 8005380:	f000 f84c 	bl	800541c <__retarget_lock_init_recursive>
 8005384:	f7ff ff96 	bl	80052b4 <__sfp_lock_release>
 8005388:	2208      	movs	r2, #8
 800538a:	4629      	mov	r1, r5
 800538c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005394:	6025      	str	r5, [r4, #0]
 8005396:	61a5      	str	r5, [r4, #24]
 8005398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800539c:	f7fe fa54 	bl	8003848 <memset>
 80053a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053a8:	4620      	mov	r0, r4
 80053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ac:	3468      	adds	r4, #104	; 0x68
 80053ae:	e7d9      	b.n	8005364 <__sfp+0x1c>
 80053b0:	2104      	movs	r1, #4
 80053b2:	4638      	mov	r0, r7
 80053b4:	f7ff ff62 	bl	800527c <__sfmoreglue>
 80053b8:	4604      	mov	r4, r0
 80053ba:	6030      	str	r0, [r6, #0]
 80053bc:	2800      	cmp	r0, #0
 80053be:	d1d5      	bne.n	800536c <__sfp+0x24>
 80053c0:	f7ff ff78 	bl	80052b4 <__sfp_lock_release>
 80053c4:	230c      	movs	r3, #12
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	e7ee      	b.n	80053a8 <__sfp+0x60>
 80053ca:	bf00      	nop
 80053cc:	08006480 	.word	0x08006480
 80053d0:	ffff0001 	.word	0xffff0001

080053d4 <_fwalk_reent>:
 80053d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d8:	4606      	mov	r6, r0
 80053da:	4688      	mov	r8, r1
 80053dc:	2700      	movs	r7, #0
 80053de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053e6:	f1b9 0901 	subs.w	r9, r9, #1
 80053ea:	d505      	bpl.n	80053f8 <_fwalk_reent+0x24>
 80053ec:	6824      	ldr	r4, [r4, #0]
 80053ee:	2c00      	cmp	r4, #0
 80053f0:	d1f7      	bne.n	80053e2 <_fwalk_reent+0xe>
 80053f2:	4638      	mov	r0, r7
 80053f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f8:	89ab      	ldrh	r3, [r5, #12]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d907      	bls.n	800540e <_fwalk_reent+0x3a>
 80053fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005402:	3301      	adds	r3, #1
 8005404:	d003      	beq.n	800540e <_fwalk_reent+0x3a>
 8005406:	4629      	mov	r1, r5
 8005408:	4630      	mov	r0, r6
 800540a:	47c0      	blx	r8
 800540c:	4307      	orrs	r7, r0
 800540e:	3568      	adds	r5, #104	; 0x68
 8005410:	e7e9      	b.n	80053e6 <_fwalk_reent+0x12>
	...

08005414 <_localeconv_r>:
 8005414:	4800      	ldr	r0, [pc, #0]	; (8005418 <_localeconv_r+0x4>)
 8005416:	4770      	bx	lr
 8005418:	20000160 	.word	0x20000160

0800541c <__retarget_lock_init_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_acquire_recursive>:
 800541e:	4770      	bx	lr

08005420 <__retarget_lock_release_recursive>:
 8005420:	4770      	bx	lr

08005422 <__swhatbuf_r>:
 8005422:	b570      	push	{r4, r5, r6, lr}
 8005424:	460e      	mov	r6, r1
 8005426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542a:	4614      	mov	r4, r2
 800542c:	2900      	cmp	r1, #0
 800542e:	461d      	mov	r5, r3
 8005430:	b096      	sub	sp, #88	; 0x58
 8005432:	da08      	bge.n	8005446 <__swhatbuf_r+0x24>
 8005434:	2200      	movs	r2, #0
 8005436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800543a:	602a      	str	r2, [r5, #0]
 800543c:	061a      	lsls	r2, r3, #24
 800543e:	d410      	bmi.n	8005462 <__swhatbuf_r+0x40>
 8005440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005444:	e00e      	b.n	8005464 <__swhatbuf_r+0x42>
 8005446:	466a      	mov	r2, sp
 8005448:	f000 fed6 	bl	80061f8 <_fstat_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	dbf1      	blt.n	8005434 <__swhatbuf_r+0x12>
 8005450:	9a01      	ldr	r2, [sp, #4]
 8005452:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005456:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800545a:	425a      	negs	r2, r3
 800545c:	415a      	adcs	r2, r3
 800545e:	602a      	str	r2, [r5, #0]
 8005460:	e7ee      	b.n	8005440 <__swhatbuf_r+0x1e>
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	2000      	movs	r0, #0
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	b016      	add	sp, #88	; 0x58
 800546a:	bd70      	pop	{r4, r5, r6, pc}

0800546c <__smakebuf_r>:
 800546c:	898b      	ldrh	r3, [r1, #12]
 800546e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005470:	079d      	lsls	r5, r3, #30
 8005472:	4606      	mov	r6, r0
 8005474:	460c      	mov	r4, r1
 8005476:	d507      	bpl.n	8005488 <__smakebuf_r+0x1c>
 8005478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	2301      	movs	r3, #1
 8005482:	6163      	str	r3, [r4, #20]
 8005484:	b002      	add	sp, #8
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	466a      	mov	r2, sp
 800548a:	ab01      	add	r3, sp, #4
 800548c:	f7ff ffc9 	bl	8005422 <__swhatbuf_r>
 8005490:	9900      	ldr	r1, [sp, #0]
 8005492:	4605      	mov	r5, r0
 8005494:	4630      	mov	r0, r6
 8005496:	f000 fc3d 	bl	8005d14 <_malloc_r>
 800549a:	b948      	cbnz	r0, 80054b0 <__smakebuf_r+0x44>
 800549c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a0:	059a      	lsls	r2, r3, #22
 80054a2:	d4ef      	bmi.n	8005484 <__smakebuf_r+0x18>
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	81a3      	strh	r3, [r4, #12]
 80054ae:	e7e3      	b.n	8005478 <__smakebuf_r+0xc>
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <__smakebuf_r+0x7c>)
 80054b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	6020      	str	r0, [r4, #0]
 80054b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054bc:	81a3      	strh	r3, [r4, #12]
 80054be:	9b00      	ldr	r3, [sp, #0]
 80054c0:	6120      	str	r0, [r4, #16]
 80054c2:	6163      	str	r3, [r4, #20]
 80054c4:	9b01      	ldr	r3, [sp, #4]
 80054c6:	b15b      	cbz	r3, 80054e0 <__smakebuf_r+0x74>
 80054c8:	4630      	mov	r0, r6
 80054ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ce:	f000 fea5 	bl	800621c <_isatty_r>
 80054d2:	b128      	cbz	r0, 80054e0 <__smakebuf_r+0x74>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	89a0      	ldrh	r0, [r4, #12]
 80054e2:	4305      	orrs	r5, r0
 80054e4:	81a5      	strh	r5, [r4, #12]
 80054e6:	e7cd      	b.n	8005484 <__smakebuf_r+0x18>
 80054e8:	08005271 	.word	0x08005271

080054ec <malloc>:
 80054ec:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <malloc+0xc>)
 80054ee:	4601      	mov	r1, r0
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	f000 bc0f 	b.w	8005d14 <_malloc_r>
 80054f6:	bf00      	nop
 80054f8:	2000000c 	.word	0x2000000c

080054fc <memchr>:
 80054fc:	4603      	mov	r3, r0
 80054fe:	b510      	push	{r4, lr}
 8005500:	b2c9      	uxtb	r1, r1
 8005502:	4402      	add	r2, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	4618      	mov	r0, r3
 8005508:	d101      	bne.n	800550e <memchr+0x12>
 800550a:	2000      	movs	r0, #0
 800550c:	e003      	b.n	8005516 <memchr+0x1a>
 800550e:	7804      	ldrb	r4, [r0, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	428c      	cmp	r4, r1
 8005514:	d1f6      	bne.n	8005504 <memchr+0x8>
 8005516:	bd10      	pop	{r4, pc}

08005518 <_Balloc>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800551c:	4604      	mov	r4, r0
 800551e:	460d      	mov	r5, r1
 8005520:	b976      	cbnz	r6, 8005540 <_Balloc+0x28>
 8005522:	2010      	movs	r0, #16
 8005524:	f7ff ffe2 	bl	80054ec <malloc>
 8005528:	4602      	mov	r2, r0
 800552a:	6260      	str	r0, [r4, #36]	; 0x24
 800552c:	b920      	cbnz	r0, 8005538 <_Balloc+0x20>
 800552e:	2166      	movs	r1, #102	; 0x66
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <_Balloc+0x78>)
 8005532:	4818      	ldr	r0, [pc, #96]	; (8005594 <_Balloc+0x7c>)
 8005534:	f000 fe20 	bl	8006178 <__assert_func>
 8005538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800553c:	6006      	str	r6, [r0, #0]
 800553e:	60c6      	str	r6, [r0, #12]
 8005540:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005542:	68f3      	ldr	r3, [r6, #12]
 8005544:	b183      	cbz	r3, 8005568 <_Balloc+0x50>
 8005546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800554e:	b9b8      	cbnz	r0, 8005580 <_Balloc+0x68>
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f605 	lsl.w	r6, r1, r5
 8005556:	1d72      	adds	r2, r6, #5
 8005558:	4620      	mov	r0, r4
 800555a:	0092      	lsls	r2, r2, #2
 800555c:	f000 fb5e 	bl	8005c1c <_calloc_r>
 8005560:	b160      	cbz	r0, 800557c <_Balloc+0x64>
 8005562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005566:	e00e      	b.n	8005586 <_Balloc+0x6e>
 8005568:	2221      	movs	r2, #33	; 0x21
 800556a:	2104      	movs	r1, #4
 800556c:	4620      	mov	r0, r4
 800556e:	f000 fb55 	bl	8005c1c <_calloc_r>
 8005572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005574:	60f0      	str	r0, [r6, #12]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e4      	bne.n	8005546 <_Balloc+0x2e>
 800557c:	2000      	movs	r0, #0
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	6802      	ldr	r2, [r0, #0]
 8005582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005586:	2300      	movs	r3, #0
 8005588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800558c:	e7f7      	b.n	800557e <_Balloc+0x66>
 800558e:	bf00      	nop
 8005590:	080064c5 	.word	0x080064c5
 8005594:	080065a8 	.word	0x080065a8

08005598 <_Bfree>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800559c:	4605      	mov	r5, r0
 800559e:	460c      	mov	r4, r1
 80055a0:	b976      	cbnz	r6, 80055c0 <_Bfree+0x28>
 80055a2:	2010      	movs	r0, #16
 80055a4:	f7ff ffa2 	bl	80054ec <malloc>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6268      	str	r0, [r5, #36]	; 0x24
 80055ac:	b920      	cbnz	r0, 80055b8 <_Bfree+0x20>
 80055ae:	218a      	movs	r1, #138	; 0x8a
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <_Bfree+0x3c>)
 80055b2:	4809      	ldr	r0, [pc, #36]	; (80055d8 <_Bfree+0x40>)
 80055b4:	f000 fde0 	bl	8006178 <__assert_func>
 80055b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055bc:	6006      	str	r6, [r0, #0]
 80055be:	60c6      	str	r6, [r0, #12]
 80055c0:	b13c      	cbz	r4, 80055d2 <_Bfree+0x3a>
 80055c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055c4:	6862      	ldr	r2, [r4, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055cc:	6021      	str	r1, [r4, #0]
 80055ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	080064c5 	.word	0x080064c5
 80055d8:	080065a8 	.word	0x080065a8

080055dc <__multadd>:
 80055dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	461e      	mov	r6, r3
 80055e6:	2000      	movs	r0, #0
 80055e8:	690d      	ldr	r5, [r1, #16]
 80055ea:	f101 0c14 	add.w	ip, r1, #20
 80055ee:	f8dc 3000 	ldr.w	r3, [ip]
 80055f2:	3001      	adds	r0, #1
 80055f4:	b299      	uxth	r1, r3
 80055f6:	fb02 6101 	mla	r1, r2, r1, r6
 80055fa:	0c1e      	lsrs	r6, r3, #16
 80055fc:	0c0b      	lsrs	r3, r1, #16
 80055fe:	fb02 3306 	mla	r3, r2, r6, r3
 8005602:	b289      	uxth	r1, r1
 8005604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005608:	4285      	cmp	r5, r0
 800560a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800560e:	f84c 1b04 	str.w	r1, [ip], #4
 8005612:	dcec      	bgt.n	80055ee <__multadd+0x12>
 8005614:	b30e      	cbz	r6, 800565a <__multadd+0x7e>
 8005616:	68a3      	ldr	r3, [r4, #8]
 8005618:	42ab      	cmp	r3, r5
 800561a:	dc19      	bgt.n	8005650 <__multadd+0x74>
 800561c:	6861      	ldr	r1, [r4, #4]
 800561e:	4638      	mov	r0, r7
 8005620:	3101      	adds	r1, #1
 8005622:	f7ff ff79 	bl	8005518 <_Balloc>
 8005626:	4680      	mov	r8, r0
 8005628:	b928      	cbnz	r0, 8005636 <__multadd+0x5a>
 800562a:	4602      	mov	r2, r0
 800562c:	21b5      	movs	r1, #181	; 0xb5
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <__multadd+0x84>)
 8005630:	480c      	ldr	r0, [pc, #48]	; (8005664 <__multadd+0x88>)
 8005632:	f000 fda1 	bl	8006178 <__assert_func>
 8005636:	6922      	ldr	r2, [r4, #16]
 8005638:	f104 010c 	add.w	r1, r4, #12
 800563c:	3202      	adds	r2, #2
 800563e:	0092      	lsls	r2, r2, #2
 8005640:	300c      	adds	r0, #12
 8005642:	f7fe f8f3 	bl	800382c <memcpy>
 8005646:	4621      	mov	r1, r4
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ffa5 	bl	8005598 <_Bfree>
 800564e:	4644      	mov	r4, r8
 8005650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005654:	3501      	adds	r5, #1
 8005656:	615e      	str	r6, [r3, #20]
 8005658:	6125      	str	r5, [r4, #16]
 800565a:	4620      	mov	r0, r4
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005660:	08006537 	.word	0x08006537
 8005664:	080065a8 	.word	0x080065a8

08005668 <__hi0bits>:
 8005668:	0c02      	lsrs	r2, r0, #16
 800566a:	0412      	lsls	r2, r2, #16
 800566c:	4603      	mov	r3, r0
 800566e:	b9ca      	cbnz	r2, 80056a4 <__hi0bits+0x3c>
 8005670:	0403      	lsls	r3, r0, #16
 8005672:	2010      	movs	r0, #16
 8005674:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005678:	bf04      	itt	eq
 800567a:	021b      	lsleq	r3, r3, #8
 800567c:	3008      	addeq	r0, #8
 800567e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005682:	bf04      	itt	eq
 8005684:	011b      	lsleq	r3, r3, #4
 8005686:	3004      	addeq	r0, #4
 8005688:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800568c:	bf04      	itt	eq
 800568e:	009b      	lsleq	r3, r3, #2
 8005690:	3002      	addeq	r0, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	db05      	blt.n	80056a2 <__hi0bits+0x3a>
 8005696:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800569a:	f100 0001 	add.w	r0, r0, #1
 800569e:	bf08      	it	eq
 80056a0:	2020      	moveq	r0, #32
 80056a2:	4770      	bx	lr
 80056a4:	2000      	movs	r0, #0
 80056a6:	e7e5      	b.n	8005674 <__hi0bits+0xc>

080056a8 <__lo0bits>:
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	4602      	mov	r2, r0
 80056ac:	f013 0007 	ands.w	r0, r3, #7
 80056b0:	d00b      	beq.n	80056ca <__lo0bits+0x22>
 80056b2:	07d9      	lsls	r1, r3, #31
 80056b4:	d421      	bmi.n	80056fa <__lo0bits+0x52>
 80056b6:	0798      	lsls	r0, r3, #30
 80056b8:	bf49      	itett	mi
 80056ba:	085b      	lsrmi	r3, r3, #1
 80056bc:	089b      	lsrpl	r3, r3, #2
 80056be:	2001      	movmi	r0, #1
 80056c0:	6013      	strmi	r3, [r2, #0]
 80056c2:	bf5c      	itt	pl
 80056c4:	2002      	movpl	r0, #2
 80056c6:	6013      	strpl	r3, [r2, #0]
 80056c8:	4770      	bx	lr
 80056ca:	b299      	uxth	r1, r3
 80056cc:	b909      	cbnz	r1, 80056d2 <__lo0bits+0x2a>
 80056ce:	2010      	movs	r0, #16
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	b2d9      	uxtb	r1, r3
 80056d4:	b909      	cbnz	r1, 80056da <__lo0bits+0x32>
 80056d6:	3008      	adds	r0, #8
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	0719      	lsls	r1, r3, #28
 80056dc:	bf04      	itt	eq
 80056de:	091b      	lsreq	r3, r3, #4
 80056e0:	3004      	addeq	r0, #4
 80056e2:	0799      	lsls	r1, r3, #30
 80056e4:	bf04      	itt	eq
 80056e6:	089b      	lsreq	r3, r3, #2
 80056e8:	3002      	addeq	r0, #2
 80056ea:	07d9      	lsls	r1, r3, #31
 80056ec:	d403      	bmi.n	80056f6 <__lo0bits+0x4e>
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	f100 0001 	add.w	r0, r0, #1
 80056f4:	d003      	beq.n	80056fe <__lo0bits+0x56>
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4770      	bx	lr
 80056fa:	2000      	movs	r0, #0
 80056fc:	4770      	bx	lr
 80056fe:	2020      	movs	r0, #32
 8005700:	4770      	bx	lr
	...

08005704 <__i2b>:
 8005704:	b510      	push	{r4, lr}
 8005706:	460c      	mov	r4, r1
 8005708:	2101      	movs	r1, #1
 800570a:	f7ff ff05 	bl	8005518 <_Balloc>
 800570e:	4602      	mov	r2, r0
 8005710:	b928      	cbnz	r0, 800571e <__i2b+0x1a>
 8005712:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005716:	4b04      	ldr	r3, [pc, #16]	; (8005728 <__i2b+0x24>)
 8005718:	4804      	ldr	r0, [pc, #16]	; (800572c <__i2b+0x28>)
 800571a:	f000 fd2d 	bl	8006178 <__assert_func>
 800571e:	2301      	movs	r3, #1
 8005720:	6144      	str	r4, [r0, #20]
 8005722:	6103      	str	r3, [r0, #16]
 8005724:	bd10      	pop	{r4, pc}
 8005726:	bf00      	nop
 8005728:	08006537 	.word	0x08006537
 800572c:	080065a8 	.word	0x080065a8

08005730 <__multiply>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	4691      	mov	r9, r2
 8005736:	690a      	ldr	r2, [r1, #16]
 8005738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800573c:	460c      	mov	r4, r1
 800573e:	429a      	cmp	r2, r3
 8005740:	bfbe      	ittt	lt
 8005742:	460b      	movlt	r3, r1
 8005744:	464c      	movlt	r4, r9
 8005746:	4699      	movlt	r9, r3
 8005748:	6927      	ldr	r7, [r4, #16]
 800574a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	6861      	ldr	r1, [r4, #4]
 8005752:	eb07 060a 	add.w	r6, r7, sl
 8005756:	42b3      	cmp	r3, r6
 8005758:	b085      	sub	sp, #20
 800575a:	bfb8      	it	lt
 800575c:	3101      	addlt	r1, #1
 800575e:	f7ff fedb 	bl	8005518 <_Balloc>
 8005762:	b930      	cbnz	r0, 8005772 <__multiply+0x42>
 8005764:	4602      	mov	r2, r0
 8005766:	f240 115d 	movw	r1, #349	; 0x15d
 800576a:	4b43      	ldr	r3, [pc, #268]	; (8005878 <__multiply+0x148>)
 800576c:	4843      	ldr	r0, [pc, #268]	; (800587c <__multiply+0x14c>)
 800576e:	f000 fd03 	bl	8006178 <__assert_func>
 8005772:	f100 0514 	add.w	r5, r0, #20
 8005776:	462b      	mov	r3, r5
 8005778:	2200      	movs	r2, #0
 800577a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800577e:	4543      	cmp	r3, r8
 8005780:	d321      	bcc.n	80057c6 <__multiply+0x96>
 8005782:	f104 0314 	add.w	r3, r4, #20
 8005786:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800578a:	f109 0314 	add.w	r3, r9, #20
 800578e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005792:	9202      	str	r2, [sp, #8]
 8005794:	1b3a      	subs	r2, r7, r4
 8005796:	3a15      	subs	r2, #21
 8005798:	f022 0203 	bic.w	r2, r2, #3
 800579c:	3204      	adds	r2, #4
 800579e:	f104 0115 	add.w	r1, r4, #21
 80057a2:	428f      	cmp	r7, r1
 80057a4:	bf38      	it	cc
 80057a6:	2204      	movcc	r2, #4
 80057a8:	9201      	str	r2, [sp, #4]
 80057aa:	9a02      	ldr	r2, [sp, #8]
 80057ac:	9303      	str	r3, [sp, #12]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d80c      	bhi.n	80057cc <__multiply+0x9c>
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	dd03      	ble.n	80057be <__multiply+0x8e>
 80057b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d059      	beq.n	8005872 <__multiply+0x142>
 80057be:	6106      	str	r6, [r0, #16]
 80057c0:	b005      	add	sp, #20
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	f843 2b04 	str.w	r2, [r3], #4
 80057ca:	e7d8      	b.n	800577e <__multiply+0x4e>
 80057cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80057d0:	f1ba 0f00 	cmp.w	sl, #0
 80057d4:	d023      	beq.n	800581e <__multiply+0xee>
 80057d6:	46a9      	mov	r9, r5
 80057d8:	f04f 0c00 	mov.w	ip, #0
 80057dc:	f104 0e14 	add.w	lr, r4, #20
 80057e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80057e4:	f8d9 1000 	ldr.w	r1, [r9]
 80057e8:	fa1f fb82 	uxth.w	fp, r2
 80057ec:	b289      	uxth	r1, r1
 80057ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80057f2:	4461      	add	r1, ip
 80057f4:	f8d9 c000 	ldr.w	ip, [r9]
 80057f8:	0c12      	lsrs	r2, r2, #16
 80057fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80057fe:	fb0a c202 	mla	r2, sl, r2, ip
 8005802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005806:	b289      	uxth	r1, r1
 8005808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800580c:	4577      	cmp	r7, lr
 800580e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005812:	f849 1b04 	str.w	r1, [r9], #4
 8005816:	d8e3      	bhi.n	80057e0 <__multiply+0xb0>
 8005818:	9a01      	ldr	r2, [sp, #4]
 800581a:	f845 c002 	str.w	ip, [r5, r2]
 800581e:	9a03      	ldr	r2, [sp, #12]
 8005820:	3304      	adds	r3, #4
 8005822:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005826:	f1b9 0f00 	cmp.w	r9, #0
 800582a:	d020      	beq.n	800586e <__multiply+0x13e>
 800582c:	46ae      	mov	lr, r5
 800582e:	f04f 0a00 	mov.w	sl, #0
 8005832:	6829      	ldr	r1, [r5, #0]
 8005834:	f104 0c14 	add.w	ip, r4, #20
 8005838:	f8bc b000 	ldrh.w	fp, [ip]
 800583c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005840:	b289      	uxth	r1, r1
 8005842:	fb09 220b 	mla	r2, r9, fp, r2
 8005846:	4492      	add	sl, r2
 8005848:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800584c:	f84e 1b04 	str.w	r1, [lr], #4
 8005850:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005854:	f8be 1000 	ldrh.w	r1, [lr]
 8005858:	0c12      	lsrs	r2, r2, #16
 800585a:	fb09 1102 	mla	r1, r9, r2, r1
 800585e:	4567      	cmp	r7, ip
 8005860:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005868:	d8e6      	bhi.n	8005838 <__multiply+0x108>
 800586a:	9a01      	ldr	r2, [sp, #4]
 800586c:	50a9      	str	r1, [r5, r2]
 800586e:	3504      	adds	r5, #4
 8005870:	e79b      	b.n	80057aa <__multiply+0x7a>
 8005872:	3e01      	subs	r6, #1
 8005874:	e79d      	b.n	80057b2 <__multiply+0x82>
 8005876:	bf00      	nop
 8005878:	08006537 	.word	0x08006537
 800587c:	080065a8 	.word	0x080065a8

08005880 <__pow5mult>:
 8005880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	4615      	mov	r5, r2
 8005886:	f012 0203 	ands.w	r2, r2, #3
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	d007      	beq.n	80058a0 <__pow5mult+0x20>
 8005890:	4c25      	ldr	r4, [pc, #148]	; (8005928 <__pow5mult+0xa8>)
 8005892:	3a01      	subs	r2, #1
 8005894:	2300      	movs	r3, #0
 8005896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800589a:	f7ff fe9f 	bl	80055dc <__multadd>
 800589e:	4607      	mov	r7, r0
 80058a0:	10ad      	asrs	r5, r5, #2
 80058a2:	d03d      	beq.n	8005920 <__pow5mult+0xa0>
 80058a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058a6:	b97c      	cbnz	r4, 80058c8 <__pow5mult+0x48>
 80058a8:	2010      	movs	r0, #16
 80058aa:	f7ff fe1f 	bl	80054ec <malloc>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6270      	str	r0, [r6, #36]	; 0x24
 80058b2:	b928      	cbnz	r0, 80058c0 <__pow5mult+0x40>
 80058b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <__pow5mult+0xac>)
 80058ba:	481d      	ldr	r0, [pc, #116]	; (8005930 <__pow5mult+0xb0>)
 80058bc:	f000 fc5c 	bl	8006178 <__assert_func>
 80058c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058c4:	6004      	str	r4, [r0, #0]
 80058c6:	60c4      	str	r4, [r0, #12]
 80058c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80058cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058d0:	b94c      	cbnz	r4, 80058e6 <__pow5mult+0x66>
 80058d2:	f240 2171 	movw	r1, #625	; 0x271
 80058d6:	4630      	mov	r0, r6
 80058d8:	f7ff ff14 	bl	8005704 <__i2b>
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	f04f 0900 	mov.w	r9, #0
 80058ea:	07eb      	lsls	r3, r5, #31
 80058ec:	d50a      	bpl.n	8005904 <__pow5mult+0x84>
 80058ee:	4639      	mov	r1, r7
 80058f0:	4622      	mov	r2, r4
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff ff1c 	bl	8005730 <__multiply>
 80058f8:	4680      	mov	r8, r0
 80058fa:	4639      	mov	r1, r7
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff fe4b 	bl	8005598 <_Bfree>
 8005902:	4647      	mov	r7, r8
 8005904:	106d      	asrs	r5, r5, #1
 8005906:	d00b      	beq.n	8005920 <__pow5mult+0xa0>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	b938      	cbnz	r0, 800591c <__pow5mult+0x9c>
 800590c:	4622      	mov	r2, r4
 800590e:	4621      	mov	r1, r4
 8005910:	4630      	mov	r0, r6
 8005912:	f7ff ff0d 	bl	8005730 <__multiply>
 8005916:	6020      	str	r0, [r4, #0]
 8005918:	f8c0 9000 	str.w	r9, [r0]
 800591c:	4604      	mov	r4, r0
 800591e:	e7e4      	b.n	80058ea <__pow5mult+0x6a>
 8005920:	4638      	mov	r0, r7
 8005922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005926:	bf00      	nop
 8005928:	080066f8 	.word	0x080066f8
 800592c:	080064c5 	.word	0x080064c5
 8005930:	080065a8 	.word	0x080065a8

08005934 <__lshift>:
 8005934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	460c      	mov	r4, r1
 800593a:	4607      	mov	r7, r0
 800593c:	4691      	mov	r9, r2
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	6849      	ldr	r1, [r1, #4]
 8005942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800594c:	f108 0601 	add.w	r6, r8, #1
 8005950:	42b3      	cmp	r3, r6
 8005952:	db0b      	blt.n	800596c <__lshift+0x38>
 8005954:	4638      	mov	r0, r7
 8005956:	f7ff fddf 	bl	8005518 <_Balloc>
 800595a:	4605      	mov	r5, r0
 800595c:	b948      	cbnz	r0, 8005972 <__lshift+0x3e>
 800595e:	4602      	mov	r2, r0
 8005960:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005964:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <__lshift+0xd8>)
 8005966:	482a      	ldr	r0, [pc, #168]	; (8005a10 <__lshift+0xdc>)
 8005968:	f000 fc06 	bl	8006178 <__assert_func>
 800596c:	3101      	adds	r1, #1
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	e7ee      	b.n	8005950 <__lshift+0x1c>
 8005972:	2300      	movs	r3, #0
 8005974:	f100 0114 	add.w	r1, r0, #20
 8005978:	f100 0210 	add.w	r2, r0, #16
 800597c:	4618      	mov	r0, r3
 800597e:	4553      	cmp	r3, sl
 8005980:	db37      	blt.n	80059f2 <__lshift+0xbe>
 8005982:	6920      	ldr	r0, [r4, #16]
 8005984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005988:	f104 0314 	add.w	r3, r4, #20
 800598c:	f019 091f 	ands.w	r9, r9, #31
 8005990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005998:	d02f      	beq.n	80059fa <__lshift+0xc6>
 800599a:	468a      	mov	sl, r1
 800599c:	f04f 0c00 	mov.w	ip, #0
 80059a0:	f1c9 0e20 	rsb	lr, r9, #32
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	fa02 f209 	lsl.w	r2, r2, r9
 80059aa:	ea42 020c 	orr.w	r2, r2, ip
 80059ae:	f84a 2b04 	str.w	r2, [sl], #4
 80059b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b6:	4298      	cmp	r0, r3
 80059b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80059bc:	d8f2      	bhi.n	80059a4 <__lshift+0x70>
 80059be:	1b03      	subs	r3, r0, r4
 80059c0:	3b15      	subs	r3, #21
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	3304      	adds	r3, #4
 80059c8:	f104 0215 	add.w	r2, r4, #21
 80059cc:	4290      	cmp	r0, r2
 80059ce:	bf38      	it	cc
 80059d0:	2304      	movcc	r3, #4
 80059d2:	f841 c003 	str.w	ip, [r1, r3]
 80059d6:	f1bc 0f00 	cmp.w	ip, #0
 80059da:	d001      	beq.n	80059e0 <__lshift+0xac>
 80059dc:	f108 0602 	add.w	r6, r8, #2
 80059e0:	3e01      	subs	r6, #1
 80059e2:	4638      	mov	r0, r7
 80059e4:	4621      	mov	r1, r4
 80059e6:	612e      	str	r6, [r5, #16]
 80059e8:	f7ff fdd6 	bl	8005598 <_Bfree>
 80059ec:	4628      	mov	r0, r5
 80059ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80059f6:	3301      	adds	r3, #1
 80059f8:	e7c1      	b.n	800597e <__lshift+0x4a>
 80059fa:	3904      	subs	r1, #4
 80059fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a00:	4298      	cmp	r0, r3
 8005a02:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a06:	d8f9      	bhi.n	80059fc <__lshift+0xc8>
 8005a08:	e7ea      	b.n	80059e0 <__lshift+0xac>
 8005a0a:	bf00      	nop
 8005a0c:	08006537 	.word	0x08006537
 8005a10:	080065a8 	.word	0x080065a8

08005a14 <__mcmp>:
 8005a14:	4603      	mov	r3, r0
 8005a16:	690a      	ldr	r2, [r1, #16]
 8005a18:	6900      	ldr	r0, [r0, #16]
 8005a1a:	b530      	push	{r4, r5, lr}
 8005a1c:	1a80      	subs	r0, r0, r2
 8005a1e:	d10d      	bne.n	8005a3c <__mcmp+0x28>
 8005a20:	3314      	adds	r3, #20
 8005a22:	3114      	adds	r1, #20
 8005a24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a34:	4295      	cmp	r5, r2
 8005a36:	d002      	beq.n	8005a3e <__mcmp+0x2a>
 8005a38:	d304      	bcc.n	8005a44 <__mcmp+0x30>
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	bd30      	pop	{r4, r5, pc}
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	d3f4      	bcc.n	8005a2c <__mcmp+0x18>
 8005a42:	e7fb      	b.n	8005a3c <__mcmp+0x28>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	e7f8      	b.n	8005a3c <__mcmp+0x28>
	...

08005a4c <__mdiff>:
 8005a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	460d      	mov	r5, r1
 8005a52:	4607      	mov	r7, r0
 8005a54:	4611      	mov	r1, r2
 8005a56:	4628      	mov	r0, r5
 8005a58:	4614      	mov	r4, r2
 8005a5a:	f7ff ffdb 	bl	8005a14 <__mcmp>
 8005a5e:	1e06      	subs	r6, r0, #0
 8005a60:	d111      	bne.n	8005a86 <__mdiff+0x3a>
 8005a62:	4631      	mov	r1, r6
 8005a64:	4638      	mov	r0, r7
 8005a66:	f7ff fd57 	bl	8005518 <_Balloc>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	b928      	cbnz	r0, 8005a7a <__mdiff+0x2e>
 8005a6e:	f240 2132 	movw	r1, #562	; 0x232
 8005a72:	4b3a      	ldr	r3, [pc, #232]	; (8005b5c <__mdiff+0x110>)
 8005a74:	483a      	ldr	r0, [pc, #232]	; (8005b60 <__mdiff+0x114>)
 8005a76:	f000 fb7f 	bl	8006178 <__assert_func>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005a80:	4610      	mov	r0, r2
 8005a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	bfa4      	itt	ge
 8005a88:	4623      	movge	r3, r4
 8005a8a:	462c      	movge	r4, r5
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	6861      	ldr	r1, [r4, #4]
 8005a90:	bfa6      	itte	ge
 8005a92:	461d      	movge	r5, r3
 8005a94:	2600      	movge	r6, #0
 8005a96:	2601      	movlt	r6, #1
 8005a98:	f7ff fd3e 	bl	8005518 <_Balloc>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	b918      	cbnz	r0, 8005aa8 <__mdiff+0x5c>
 8005aa0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <__mdiff+0x110>)
 8005aa6:	e7e5      	b.n	8005a74 <__mdiff+0x28>
 8005aa8:	f102 0814 	add.w	r8, r2, #20
 8005aac:	46c2      	mov	sl, r8
 8005aae:	f04f 0c00 	mov.w	ip, #0
 8005ab2:	6927      	ldr	r7, [r4, #16]
 8005ab4:	60c6      	str	r6, [r0, #12]
 8005ab6:	692e      	ldr	r6, [r5, #16]
 8005ab8:	f104 0014 	add.w	r0, r4, #20
 8005abc:	f105 0914 	add.w	r9, r5, #20
 8005ac0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005ac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ac8:	3410      	adds	r4, #16
 8005aca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005ace:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ad2:	fa1f f18b 	uxth.w	r1, fp
 8005ad6:	448c      	add	ip, r1
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	ebac 0101 	sub.w	r1, ip, r1
 8005ae0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ae4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ae8:	b289      	uxth	r1, r1
 8005aea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005aee:	454e      	cmp	r6, r9
 8005af0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005af4:	f84a 3b04 	str.w	r3, [sl], #4
 8005af8:	d8e7      	bhi.n	8005aca <__mdiff+0x7e>
 8005afa:	1b73      	subs	r3, r6, r5
 8005afc:	3b15      	subs	r3, #21
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	3515      	adds	r5, #21
 8005b04:	3304      	adds	r3, #4
 8005b06:	42ae      	cmp	r6, r5
 8005b08:	bf38      	it	cc
 8005b0a:	2304      	movcc	r3, #4
 8005b0c:	4418      	add	r0, r3
 8005b0e:	4443      	add	r3, r8
 8005b10:	461e      	mov	r6, r3
 8005b12:	4605      	mov	r5, r0
 8005b14:	4575      	cmp	r5, lr
 8005b16:	d30e      	bcc.n	8005b36 <__mdiff+0xea>
 8005b18:	f10e 0103 	add.w	r1, lr, #3
 8005b1c:	1a09      	subs	r1, r1, r0
 8005b1e:	f021 0103 	bic.w	r1, r1, #3
 8005b22:	3803      	subs	r0, #3
 8005b24:	4586      	cmp	lr, r0
 8005b26:	bf38      	it	cc
 8005b28:	2100      	movcc	r1, #0
 8005b2a:	4419      	add	r1, r3
 8005b2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b30:	b18b      	cbz	r3, 8005b56 <__mdiff+0x10a>
 8005b32:	6117      	str	r7, [r2, #16]
 8005b34:	e7a4      	b.n	8005a80 <__mdiff+0x34>
 8005b36:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b3a:	fa1f f188 	uxth.w	r1, r8
 8005b3e:	4461      	add	r1, ip
 8005b40:	140c      	asrs	r4, r1, #16
 8005b42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b46:	b289      	uxth	r1, r1
 8005b48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b4c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005b50:	f846 1b04 	str.w	r1, [r6], #4
 8005b54:	e7de      	b.n	8005b14 <__mdiff+0xc8>
 8005b56:	3f01      	subs	r7, #1
 8005b58:	e7e8      	b.n	8005b2c <__mdiff+0xe0>
 8005b5a:	bf00      	nop
 8005b5c:	08006537 	.word	0x08006537
 8005b60:	080065a8 	.word	0x080065a8

08005b64 <__d2b>:
 8005b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005b68:	2101      	movs	r1, #1
 8005b6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005b6e:	4690      	mov	r8, r2
 8005b70:	461d      	mov	r5, r3
 8005b72:	f7ff fcd1 	bl	8005518 <_Balloc>
 8005b76:	4604      	mov	r4, r0
 8005b78:	b930      	cbnz	r0, 8005b88 <__d2b+0x24>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	f240 310a 	movw	r1, #778	; 0x30a
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <__d2b+0xb0>)
 8005b82:	4825      	ldr	r0, [pc, #148]	; (8005c18 <__d2b+0xb4>)
 8005b84:	f000 faf8 	bl	8006178 <__assert_func>
 8005b88:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005b8c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005b90:	bb2d      	cbnz	r5, 8005bde <__d2b+0x7a>
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f1b8 0300 	subs.w	r3, r8, #0
 8005b98:	d026      	beq.n	8005be8 <__d2b+0x84>
 8005b9a:	4668      	mov	r0, sp
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	f7ff fd83 	bl	80056a8 <__lo0bits>
 8005ba2:	9900      	ldr	r1, [sp, #0]
 8005ba4:	b1f0      	cbz	r0, 8005be4 <__d2b+0x80>
 8005ba6:	9a01      	ldr	r2, [sp, #4]
 8005ba8:	f1c0 0320 	rsb	r3, r0, #32
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	40c2      	lsrs	r2, r0
 8005bb4:	6163      	str	r3, [r4, #20]
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2102      	movne	r1, #2
 8005bc0:	2101      	moveq	r1, #1
 8005bc2:	61a3      	str	r3, [r4, #24]
 8005bc4:	6121      	str	r1, [r4, #16]
 8005bc6:	b1c5      	cbz	r5, 8005bfa <__d2b+0x96>
 8005bc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005bcc:	4405      	add	r5, r0
 8005bce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bd2:	603d      	str	r5, [r7, #0]
 8005bd4:	6030      	str	r0, [r6, #0]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	b002      	add	sp, #8
 8005bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be2:	e7d6      	b.n	8005b92 <__d2b+0x2e>
 8005be4:	6161      	str	r1, [r4, #20]
 8005be6:	e7e7      	b.n	8005bb8 <__d2b+0x54>
 8005be8:	a801      	add	r0, sp, #4
 8005bea:	f7ff fd5d 	bl	80056a8 <__lo0bits>
 8005bee:	2101      	movs	r1, #1
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	6121      	str	r1, [r4, #16]
 8005bf4:	6163      	str	r3, [r4, #20]
 8005bf6:	3020      	adds	r0, #32
 8005bf8:	e7e5      	b.n	8005bc6 <__d2b+0x62>
 8005bfa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005bfe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c02:	6038      	str	r0, [r7, #0]
 8005c04:	6918      	ldr	r0, [r3, #16]
 8005c06:	f7ff fd2f 	bl	8005668 <__hi0bits>
 8005c0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005c0e:	6031      	str	r1, [r6, #0]
 8005c10:	e7e1      	b.n	8005bd6 <__d2b+0x72>
 8005c12:	bf00      	nop
 8005c14:	08006537 	.word	0x08006537
 8005c18:	080065a8 	.word	0x080065a8

08005c1c <_calloc_r>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	fba1 5402 	umull	r5, r4, r1, r2
 8005c22:	b934      	cbnz	r4, 8005c32 <_calloc_r+0x16>
 8005c24:	4629      	mov	r1, r5
 8005c26:	f000 f875 	bl	8005d14 <_malloc_r>
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	b928      	cbnz	r0, 8005c3a <_calloc_r+0x1e>
 8005c2e:	4630      	mov	r0, r6
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	220c      	movs	r2, #12
 8005c34:	2600      	movs	r6, #0
 8005c36:	6002      	str	r2, [r0, #0]
 8005c38:	e7f9      	b.n	8005c2e <_calloc_r+0x12>
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f7fd fe03 	bl	8003848 <memset>
 8005c42:	e7f4      	b.n	8005c2e <_calloc_r+0x12>

08005c44 <_free_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4605      	mov	r5, r0
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	d040      	beq.n	8005cce <_free_r+0x8a>
 8005c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c50:	1f0c      	subs	r4, r1, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bfb8      	it	lt
 8005c56:	18e4      	addlt	r4, r4, r3
 8005c58:	f000 fb14 	bl	8006284 <__malloc_lock>
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <_free_r+0x8c>)
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	b933      	cbnz	r3, 8005c70 <_free_r+0x2c>
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	6014      	str	r4, [r2, #0]
 8005c66:	4628      	mov	r0, r5
 8005c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c6c:	f000 bb10 	b.w	8006290 <__malloc_unlock>
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d908      	bls.n	8005c86 <_free_r+0x42>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	1821      	adds	r1, r4, r0
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	bf01      	itttt	eq
 8005c7c:	6819      	ldreq	r1, [r3, #0]
 8005c7e:	685b      	ldreq	r3, [r3, #4]
 8005c80:	1809      	addeq	r1, r1, r0
 8005c82:	6021      	streq	r1, [r4, #0]
 8005c84:	e7ed      	b.n	8005c62 <_free_r+0x1e>
 8005c86:	461a      	mov	r2, r3
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b10b      	cbz	r3, 8005c90 <_free_r+0x4c>
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	d9fa      	bls.n	8005c86 <_free_r+0x42>
 8005c90:	6811      	ldr	r1, [r2, #0]
 8005c92:	1850      	adds	r0, r2, r1
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	d10b      	bne.n	8005cb0 <_free_r+0x6c>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	4401      	add	r1, r0
 8005c9c:	1850      	adds	r0, r2, r1
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	d1e0      	bne.n	8005c66 <_free_r+0x22>
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4401      	add	r1, r0
 8005caa:	6011      	str	r1, [r2, #0]
 8005cac:	6053      	str	r3, [r2, #4]
 8005cae:	e7da      	b.n	8005c66 <_free_r+0x22>
 8005cb0:	d902      	bls.n	8005cb8 <_free_r+0x74>
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	e7d6      	b.n	8005c66 <_free_r+0x22>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	1821      	adds	r1, r4, r0
 8005cbc:	428b      	cmp	r3, r1
 8005cbe:	bf01      	itttt	eq
 8005cc0:	6819      	ldreq	r1, [r3, #0]
 8005cc2:	685b      	ldreq	r3, [r3, #4]
 8005cc4:	1809      	addeq	r1, r1, r0
 8005cc6:	6021      	streq	r1, [r4, #0]
 8005cc8:	6063      	str	r3, [r4, #4]
 8005cca:	6054      	str	r4, [r2, #4]
 8005ccc:	e7cb      	b.n	8005c66 <_free_r+0x22>
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	200005e0 	.word	0x200005e0

08005cd4 <sbrk_aligned>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4e0e      	ldr	r6, [pc, #56]	; (8005d10 <sbrk_aligned+0x3c>)
 8005cd8:	460c      	mov	r4, r1
 8005cda:	6831      	ldr	r1, [r6, #0]
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b911      	cbnz	r1, 8005ce6 <sbrk_aligned+0x12>
 8005ce0:	f000 f9e4 	bl	80060ac <_sbrk_r>
 8005ce4:	6030      	str	r0, [r6, #0]
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 f9df 	bl	80060ac <_sbrk_r>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	d00a      	beq.n	8005d08 <sbrk_aligned+0x34>
 8005cf2:	1cc4      	adds	r4, r0, #3
 8005cf4:	f024 0403 	bic.w	r4, r4, #3
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d007      	beq.n	8005d0c <sbrk_aligned+0x38>
 8005cfc:	1a21      	subs	r1, r4, r0
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f000 f9d4 	bl	80060ac <_sbrk_r>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d101      	bne.n	8005d0c <sbrk_aligned+0x38>
 8005d08:	f04f 34ff 	mov.w	r4, #4294967295
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	200005e4 	.word	0x200005e4

08005d14 <_malloc_r>:
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d18:	1ccd      	adds	r5, r1, #3
 8005d1a:	f025 0503 	bic.w	r5, r5, #3
 8005d1e:	3508      	adds	r5, #8
 8005d20:	2d0c      	cmp	r5, #12
 8005d22:	bf38      	it	cc
 8005d24:	250c      	movcc	r5, #12
 8005d26:	2d00      	cmp	r5, #0
 8005d28:	4607      	mov	r7, r0
 8005d2a:	db01      	blt.n	8005d30 <_malloc_r+0x1c>
 8005d2c:	42a9      	cmp	r1, r5
 8005d2e:	d905      	bls.n	8005d3c <_malloc_r+0x28>
 8005d30:	230c      	movs	r3, #12
 8005d32:	2600      	movs	r6, #0
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4630      	mov	r0, r6
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	4e2e      	ldr	r6, [pc, #184]	; (8005df8 <_malloc_r+0xe4>)
 8005d3e:	f000 faa1 	bl	8006284 <__malloc_lock>
 8005d42:	6833      	ldr	r3, [r6, #0]
 8005d44:	461c      	mov	r4, r3
 8005d46:	bb34      	cbnz	r4, 8005d96 <_malloc_r+0x82>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	f7ff ffc2 	bl	8005cd4 <sbrk_aligned>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	4604      	mov	r4, r0
 8005d54:	d14d      	bne.n	8005df2 <_malloc_r+0xde>
 8005d56:	6834      	ldr	r4, [r6, #0]
 8005d58:	4626      	mov	r6, r4
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	d140      	bne.n	8005de0 <_malloc_r+0xcc>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	4631      	mov	r1, r6
 8005d62:	4638      	mov	r0, r7
 8005d64:	eb04 0803 	add.w	r8, r4, r3
 8005d68:	f000 f9a0 	bl	80060ac <_sbrk_r>
 8005d6c:	4580      	cmp	r8, r0
 8005d6e:	d13a      	bne.n	8005de6 <_malloc_r+0xd2>
 8005d70:	6821      	ldr	r1, [r4, #0]
 8005d72:	3503      	adds	r5, #3
 8005d74:	1a6d      	subs	r5, r5, r1
 8005d76:	f025 0503 	bic.w	r5, r5, #3
 8005d7a:	3508      	adds	r5, #8
 8005d7c:	2d0c      	cmp	r5, #12
 8005d7e:	bf38      	it	cc
 8005d80:	250c      	movcc	r5, #12
 8005d82:	4638      	mov	r0, r7
 8005d84:	4629      	mov	r1, r5
 8005d86:	f7ff ffa5 	bl	8005cd4 <sbrk_aligned>
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d02b      	beq.n	8005de6 <_malloc_r+0xd2>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	442b      	add	r3, r5
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	e00e      	b.n	8005db4 <_malloc_r+0xa0>
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	1b52      	subs	r2, r2, r5
 8005d9a:	d41e      	bmi.n	8005dda <_malloc_r+0xc6>
 8005d9c:	2a0b      	cmp	r2, #11
 8005d9e:	d916      	bls.n	8005dce <_malloc_r+0xba>
 8005da0:	1961      	adds	r1, r4, r5
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	6025      	str	r5, [r4, #0]
 8005da6:	bf18      	it	ne
 8005da8:	6059      	strne	r1, [r3, #4]
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	bf08      	it	eq
 8005dae:	6031      	streq	r1, [r6, #0]
 8005db0:	5162      	str	r2, [r4, r5]
 8005db2:	604b      	str	r3, [r1, #4]
 8005db4:	4638      	mov	r0, r7
 8005db6:	f104 060b 	add.w	r6, r4, #11
 8005dba:	f000 fa69 	bl	8006290 <__malloc_unlock>
 8005dbe:	f026 0607 	bic.w	r6, r6, #7
 8005dc2:	1d23      	adds	r3, r4, #4
 8005dc4:	1af2      	subs	r2, r6, r3
 8005dc6:	d0b6      	beq.n	8005d36 <_malloc_r+0x22>
 8005dc8:	1b9b      	subs	r3, r3, r6
 8005dca:	50a3      	str	r3, [r4, r2]
 8005dcc:	e7b3      	b.n	8005d36 <_malloc_r+0x22>
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	bf0c      	ite	eq
 8005dd4:	6032      	streq	r2, [r6, #0]
 8005dd6:	605a      	strne	r2, [r3, #4]
 8005dd8:	e7ec      	b.n	8005db4 <_malloc_r+0xa0>
 8005dda:	4623      	mov	r3, r4
 8005ddc:	6864      	ldr	r4, [r4, #4]
 8005dde:	e7b2      	b.n	8005d46 <_malloc_r+0x32>
 8005de0:	4634      	mov	r4, r6
 8005de2:	6876      	ldr	r6, [r6, #4]
 8005de4:	e7b9      	b.n	8005d5a <_malloc_r+0x46>
 8005de6:	230c      	movs	r3, #12
 8005de8:	4638      	mov	r0, r7
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	f000 fa50 	bl	8006290 <__malloc_unlock>
 8005df0:	e7a1      	b.n	8005d36 <_malloc_r+0x22>
 8005df2:	6025      	str	r5, [r4, #0]
 8005df4:	e7de      	b.n	8005db4 <_malloc_r+0xa0>
 8005df6:	bf00      	nop
 8005df8:	200005e0 	.word	0x200005e0

08005dfc <__sfputc_r>:
 8005dfc:	6893      	ldr	r3, [r2, #8]
 8005dfe:	b410      	push	{r4}
 8005e00:	3b01      	subs	r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	6093      	str	r3, [r2, #8]
 8005e06:	da07      	bge.n	8005e18 <__sfputc_r+0x1c>
 8005e08:	6994      	ldr	r4, [r2, #24]
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	db01      	blt.n	8005e12 <__sfputc_r+0x16>
 8005e0e:	290a      	cmp	r1, #10
 8005e10:	d102      	bne.n	8005e18 <__sfputc_r+0x1c>
 8005e12:	bc10      	pop	{r4}
 8005e14:	f7fe ba0e 	b.w	8004234 <__swbuf_r>
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	1c58      	adds	r0, r3, #1
 8005e1c:	6010      	str	r0, [r2, #0]
 8005e1e:	7019      	strb	r1, [r3, #0]
 8005e20:	4608      	mov	r0, r1
 8005e22:	bc10      	pop	{r4}
 8005e24:	4770      	bx	lr

08005e26 <__sfputs_r>:
 8005e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e28:	4606      	mov	r6, r0
 8005e2a:	460f      	mov	r7, r1
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	18d5      	adds	r5, r2, r3
 8005e30:	42ac      	cmp	r4, r5
 8005e32:	d101      	bne.n	8005e38 <__sfputs_r+0x12>
 8005e34:	2000      	movs	r0, #0
 8005e36:	e007      	b.n	8005e48 <__sfputs_r+0x22>
 8005e38:	463a      	mov	r2, r7
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e40:	f7ff ffdc 	bl	8005dfc <__sfputc_r>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d1f3      	bne.n	8005e30 <__sfputs_r+0xa>
 8005e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e4c <_vfiprintf_r>:
 8005e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	460d      	mov	r5, r1
 8005e52:	4614      	mov	r4, r2
 8005e54:	4698      	mov	r8, r3
 8005e56:	4606      	mov	r6, r0
 8005e58:	b09d      	sub	sp, #116	; 0x74
 8005e5a:	b118      	cbz	r0, 8005e64 <_vfiprintf_r+0x18>
 8005e5c:	6983      	ldr	r3, [r0, #24]
 8005e5e:	b90b      	cbnz	r3, 8005e64 <_vfiprintf_r+0x18>
 8005e60:	f7ff fa3a 	bl	80052d8 <__sinit>
 8005e64:	4b89      	ldr	r3, [pc, #548]	; (800608c <_vfiprintf_r+0x240>)
 8005e66:	429d      	cmp	r5, r3
 8005e68:	d11b      	bne.n	8005ea2 <_vfiprintf_r+0x56>
 8005e6a:	6875      	ldr	r5, [r6, #4]
 8005e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e6e:	07d9      	lsls	r1, r3, #31
 8005e70:	d405      	bmi.n	8005e7e <_vfiprintf_r+0x32>
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	059a      	lsls	r2, r3, #22
 8005e76:	d402      	bmi.n	8005e7e <_vfiprintf_r+0x32>
 8005e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e7a:	f7ff fad0 	bl	800541e <__retarget_lock_acquire_recursive>
 8005e7e:	89ab      	ldrh	r3, [r5, #12]
 8005e80:	071b      	lsls	r3, r3, #28
 8005e82:	d501      	bpl.n	8005e88 <_vfiprintf_r+0x3c>
 8005e84:	692b      	ldr	r3, [r5, #16]
 8005e86:	b9eb      	cbnz	r3, 8005ec4 <_vfiprintf_r+0x78>
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7fe fa24 	bl	80042d8 <__swsetup_r>
 8005e90:	b1c0      	cbz	r0, 8005ec4 <_vfiprintf_r+0x78>
 8005e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e94:	07dc      	lsls	r4, r3, #31
 8005e96:	d50e      	bpl.n	8005eb6 <_vfiprintf_r+0x6a>
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	b01d      	add	sp, #116	; 0x74
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	4b7b      	ldr	r3, [pc, #492]	; (8006090 <_vfiprintf_r+0x244>)
 8005ea4:	429d      	cmp	r5, r3
 8005ea6:	d101      	bne.n	8005eac <_vfiprintf_r+0x60>
 8005ea8:	68b5      	ldr	r5, [r6, #8]
 8005eaa:	e7df      	b.n	8005e6c <_vfiprintf_r+0x20>
 8005eac:	4b79      	ldr	r3, [pc, #484]	; (8006094 <_vfiprintf_r+0x248>)
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	bf08      	it	eq
 8005eb2:	68f5      	ldreq	r5, [r6, #12]
 8005eb4:	e7da      	b.n	8005e6c <_vfiprintf_r+0x20>
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	0598      	lsls	r0, r3, #22
 8005eba:	d4ed      	bmi.n	8005e98 <_vfiprintf_r+0x4c>
 8005ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ebe:	f7ff faaf 	bl	8005420 <__retarget_lock_release_recursive>
 8005ec2:	e7e9      	b.n	8005e98 <_vfiprintf_r+0x4c>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec8:	2320      	movs	r3, #32
 8005eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ece:	2330      	movs	r3, #48	; 0x30
 8005ed0:	f04f 0901 	mov.w	r9, #1
 8005ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ed8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006098 <_vfiprintf_r+0x24c>
 8005edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	469a      	mov	sl, r3
 8005ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee8:	b10a      	cbz	r2, 8005eee <_vfiprintf_r+0xa2>
 8005eea:	2a25      	cmp	r2, #37	; 0x25
 8005eec:	d1f9      	bne.n	8005ee2 <_vfiprintf_r+0x96>
 8005eee:	ebba 0b04 	subs.w	fp, sl, r4
 8005ef2:	d00b      	beq.n	8005f0c <_vfiprintf_r+0xc0>
 8005ef4:	465b      	mov	r3, fp
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7ff ff93 	bl	8005e26 <__sfputs_r>
 8005f00:	3001      	adds	r0, #1
 8005f02:	f000 80aa 	beq.w	800605a <_vfiprintf_r+0x20e>
 8005f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f08:	445a      	add	r2, fp
 8005f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80a2 	beq.w	800605a <_vfiprintf_r+0x20e>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f20:	f10a 0a01 	add.w	sl, sl, #1
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	9307      	str	r3, [sp, #28]
 8005f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f2e:	4654      	mov	r4, sl
 8005f30:	2205      	movs	r2, #5
 8005f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f36:	4858      	ldr	r0, [pc, #352]	; (8006098 <_vfiprintf_r+0x24c>)
 8005f38:	f7ff fae0 	bl	80054fc <memchr>
 8005f3c:	9a04      	ldr	r2, [sp, #16]
 8005f3e:	b9d8      	cbnz	r0, 8005f78 <_vfiprintf_r+0x12c>
 8005f40:	06d1      	lsls	r1, r2, #27
 8005f42:	bf44      	itt	mi
 8005f44:	2320      	movmi	r3, #32
 8005f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f4a:	0713      	lsls	r3, r2, #28
 8005f4c:	bf44      	itt	mi
 8005f4e:	232b      	movmi	r3, #43	; 0x2b
 8005f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f54:	f89a 3000 	ldrb.w	r3, [sl]
 8005f58:	2b2a      	cmp	r3, #42	; 0x2a
 8005f5a:	d015      	beq.n	8005f88 <_vfiprintf_r+0x13c>
 8005f5c:	4654      	mov	r4, sl
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f04f 0c0a 	mov.w	ip, #10
 8005f64:	9a07      	ldr	r2, [sp, #28]
 8005f66:	4621      	mov	r1, r4
 8005f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f6c:	3b30      	subs	r3, #48	; 0x30
 8005f6e:	2b09      	cmp	r3, #9
 8005f70:	d94e      	bls.n	8006010 <_vfiprintf_r+0x1c4>
 8005f72:	b1b0      	cbz	r0, 8005fa2 <_vfiprintf_r+0x156>
 8005f74:	9207      	str	r2, [sp, #28]
 8005f76:	e014      	b.n	8005fa2 <_vfiprintf_r+0x156>
 8005f78:	eba0 0308 	sub.w	r3, r0, r8
 8005f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f80:	4313      	orrs	r3, r2
 8005f82:	46a2      	mov	sl, r4
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	e7d2      	b.n	8005f2e <_vfiprintf_r+0xe2>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	1d19      	adds	r1, r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	9103      	str	r1, [sp, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	bfbb      	ittet	lt
 8005f94:	425b      	neglt	r3, r3
 8005f96:	f042 0202 	orrlt.w	r2, r2, #2
 8005f9a:	9307      	strge	r3, [sp, #28]
 8005f9c:	9307      	strlt	r3, [sp, #28]
 8005f9e:	bfb8      	it	lt
 8005fa0:	9204      	strlt	r2, [sp, #16]
 8005fa2:	7823      	ldrb	r3, [r4, #0]
 8005fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa6:	d10c      	bne.n	8005fc2 <_vfiprintf_r+0x176>
 8005fa8:	7863      	ldrb	r3, [r4, #1]
 8005faa:	2b2a      	cmp	r3, #42	; 0x2a
 8005fac:	d135      	bne.n	800601a <_vfiprintf_r+0x1ce>
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	3402      	adds	r4, #2
 8005fb2:	1d1a      	adds	r2, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	9203      	str	r2, [sp, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bfb8      	it	lt
 8005fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fc0:	9305      	str	r3, [sp, #20]
 8005fc2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800609c <_vfiprintf_r+0x250>
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	4650      	mov	r0, sl
 8005fca:	7821      	ldrb	r1, [r4, #0]
 8005fcc:	f7ff fa96 	bl	80054fc <memchr>
 8005fd0:	b140      	cbz	r0, 8005fe4 <_vfiprintf_r+0x198>
 8005fd2:	2340      	movs	r3, #64	; 0x40
 8005fd4:	eba0 000a 	sub.w	r0, r0, sl
 8005fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8005fdc:	9b04      	ldr	r3, [sp, #16]
 8005fde:	3401      	adds	r4, #1
 8005fe0:	4303      	orrs	r3, r0
 8005fe2:	9304      	str	r3, [sp, #16]
 8005fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe8:	2206      	movs	r2, #6
 8005fea:	482d      	ldr	r0, [pc, #180]	; (80060a0 <_vfiprintf_r+0x254>)
 8005fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ff0:	f7ff fa84 	bl	80054fc <memchr>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d03f      	beq.n	8006078 <_vfiprintf_r+0x22c>
 8005ff8:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <_vfiprintf_r+0x258>)
 8005ffa:	bb1b      	cbnz	r3, 8006044 <_vfiprintf_r+0x1f8>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	3307      	adds	r3, #7
 8006000:	f023 0307 	bic.w	r3, r3, #7
 8006004:	3308      	adds	r3, #8
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600a:	443b      	add	r3, r7
 800600c:	9309      	str	r3, [sp, #36]	; 0x24
 800600e:	e767      	b.n	8005ee0 <_vfiprintf_r+0x94>
 8006010:	460c      	mov	r4, r1
 8006012:	2001      	movs	r0, #1
 8006014:	fb0c 3202 	mla	r2, ip, r2, r3
 8006018:	e7a5      	b.n	8005f66 <_vfiprintf_r+0x11a>
 800601a:	2300      	movs	r3, #0
 800601c:	f04f 0c0a 	mov.w	ip, #10
 8006020:	4619      	mov	r1, r3
 8006022:	3401      	adds	r4, #1
 8006024:	9305      	str	r3, [sp, #20]
 8006026:	4620      	mov	r0, r4
 8006028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800602c:	3a30      	subs	r2, #48	; 0x30
 800602e:	2a09      	cmp	r2, #9
 8006030:	d903      	bls.n	800603a <_vfiprintf_r+0x1ee>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0c5      	beq.n	8005fc2 <_vfiprintf_r+0x176>
 8006036:	9105      	str	r1, [sp, #20]
 8006038:	e7c3      	b.n	8005fc2 <_vfiprintf_r+0x176>
 800603a:	4604      	mov	r4, r0
 800603c:	2301      	movs	r3, #1
 800603e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006042:	e7f0      	b.n	8006026 <_vfiprintf_r+0x1da>
 8006044:	ab03      	add	r3, sp, #12
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	462a      	mov	r2, r5
 800604a:	4630      	mov	r0, r6
 800604c:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <_vfiprintf_r+0x25c>)
 800604e:	a904      	add	r1, sp, #16
 8006050:	f7fd fca0 	bl	8003994 <_printf_float>
 8006054:	4607      	mov	r7, r0
 8006056:	1c78      	adds	r0, r7, #1
 8006058:	d1d6      	bne.n	8006008 <_vfiprintf_r+0x1bc>
 800605a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800605c:	07d9      	lsls	r1, r3, #31
 800605e:	d405      	bmi.n	800606c <_vfiprintf_r+0x220>
 8006060:	89ab      	ldrh	r3, [r5, #12]
 8006062:	059a      	lsls	r2, r3, #22
 8006064:	d402      	bmi.n	800606c <_vfiprintf_r+0x220>
 8006066:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006068:	f7ff f9da 	bl	8005420 <__retarget_lock_release_recursive>
 800606c:	89ab      	ldrh	r3, [r5, #12]
 800606e:	065b      	lsls	r3, r3, #25
 8006070:	f53f af12 	bmi.w	8005e98 <_vfiprintf_r+0x4c>
 8006074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006076:	e711      	b.n	8005e9c <_vfiprintf_r+0x50>
 8006078:	ab03      	add	r3, sp, #12
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	462a      	mov	r2, r5
 800607e:	4630      	mov	r0, r6
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <_vfiprintf_r+0x25c>)
 8006082:	a904      	add	r1, sp, #16
 8006084:	f7fd ff22 	bl	8003ecc <_printf_i>
 8006088:	e7e4      	b.n	8006054 <_vfiprintf_r+0x208>
 800608a:	bf00      	nop
 800608c:	08006568 	.word	0x08006568
 8006090:	08006588 	.word	0x08006588
 8006094:	08006548 	.word	0x08006548
 8006098:	08006704 	.word	0x08006704
 800609c:	0800670a 	.word	0x0800670a
 80060a0:	0800670e 	.word	0x0800670e
 80060a4:	08003995 	.word	0x08003995
 80060a8:	08005e27 	.word	0x08005e27

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	2300      	movs	r3, #0
 80060b0:	4d05      	ldr	r5, [pc, #20]	; (80060c8 <_sbrk_r+0x1c>)
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fb f9f4 	bl	80014a4 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	200005e8 	.word	0x200005e8

080060cc <__sread>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	460c      	mov	r4, r1
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	f000 f8e2 	bl	800629c <_read_r>
 80060d8:	2800      	cmp	r0, #0
 80060da:	bfab      	itete	ge
 80060dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060de:	89a3      	ldrhlt	r3, [r4, #12]
 80060e0:	181b      	addge	r3, r3, r0
 80060e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060e6:	bfac      	ite	ge
 80060e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ea:	81a3      	strhlt	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__swrite>:
 80060ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f2:	461f      	mov	r7, r3
 80060f4:	898b      	ldrh	r3, [r1, #12]
 80060f6:	4605      	mov	r5, r0
 80060f8:	05db      	lsls	r3, r3, #23
 80060fa:	460c      	mov	r4, r1
 80060fc:	4616      	mov	r6, r2
 80060fe:	d505      	bpl.n	800610c <__swrite+0x1e>
 8006100:	2302      	movs	r3, #2
 8006102:	2200      	movs	r2, #0
 8006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006108:	f000 f898 	bl	800623c <_lseek_r>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	4632      	mov	r2, r6
 8006110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	4628      	mov	r0, r5
 8006118:	463b      	mov	r3, r7
 800611a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800611e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	f000 b817 	b.w	8006154 <_write_r>

08006126 <__sseek>:
 8006126:	b510      	push	{r4, lr}
 8006128:	460c      	mov	r4, r1
 800612a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612e:	f000 f885 	bl	800623c <_lseek_r>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	bf15      	itete	ne
 8006138:	6560      	strne	r0, [r4, #84]	; 0x54
 800613a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800613e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006142:	81a3      	strheq	r3, [r4, #12]
 8006144:	bf18      	it	ne
 8006146:	81a3      	strhne	r3, [r4, #12]
 8006148:	bd10      	pop	{r4, pc}

0800614a <__sclose>:
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 b831 	b.w	80061b4 <_close_r>
	...

08006154 <_write_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	4611      	mov	r1, r2
 800615c:	2200      	movs	r2, #0
 800615e:	4d05      	ldr	r5, [pc, #20]	; (8006174 <_write_r+0x20>)
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7fb f951 	bl	800140a <_write>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_write_r+0x1e>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_write_r+0x1e>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	200005e8 	.word	0x200005e8

08006178 <__assert_func>:
 8006178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800617a:	4614      	mov	r4, r2
 800617c:	461a      	mov	r2, r3
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <__assert_func+0x2c>)
 8006180:	4605      	mov	r5, r0
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68d8      	ldr	r0, [r3, #12]
 8006186:	b14c      	cbz	r4, 800619c <__assert_func+0x24>
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <__assert_func+0x30>)
 800618a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800618e:	9100      	str	r1, [sp, #0]
 8006190:	462b      	mov	r3, r5
 8006192:	4906      	ldr	r1, [pc, #24]	; (80061ac <__assert_func+0x34>)
 8006194:	f000 f81e 	bl	80061d4 <fiprintf>
 8006198:	f000 f89f 	bl	80062da <abort>
 800619c:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <__assert_func+0x38>)
 800619e:	461c      	mov	r4, r3
 80061a0:	e7f3      	b.n	800618a <__assert_func+0x12>
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c
 80061a8:	08006715 	.word	0x08006715
 80061ac:	08006722 	.word	0x08006722
 80061b0:	08006750 	.word	0x08006750

080061b4 <_close_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	2300      	movs	r3, #0
 80061b8:	4d05      	ldr	r5, [pc, #20]	; (80061d0 <_close_r+0x1c>)
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fb f93f 	bl	8001442 <_close>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_close_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_close_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	200005e8 	.word	0x200005e8

080061d4 <fiprintf>:
 80061d4:	b40e      	push	{r1, r2, r3}
 80061d6:	b503      	push	{r0, r1, lr}
 80061d8:	4601      	mov	r1, r0
 80061da:	ab03      	add	r3, sp, #12
 80061dc:	4805      	ldr	r0, [pc, #20]	; (80061f4 <fiprintf+0x20>)
 80061de:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e2:	6800      	ldr	r0, [r0, #0]
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	f7ff fe31 	bl	8005e4c <_vfiprintf_r>
 80061ea:	b002      	add	sp, #8
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	2000000c 	.word	0x2000000c

080061f8 <_fstat_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	2300      	movs	r3, #0
 80061fc:	4d06      	ldr	r5, [pc, #24]	; (8006218 <_fstat_r+0x20>)
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	f7fb f927 	bl	8001458 <_fstat>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d102      	bne.n	8006214 <_fstat_r+0x1c>
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	b103      	cbz	r3, 8006214 <_fstat_r+0x1c>
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	bd38      	pop	{r3, r4, r5, pc}
 8006216:	bf00      	nop
 8006218:	200005e8 	.word	0x200005e8

0800621c <_isatty_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	2300      	movs	r3, #0
 8006220:	4d05      	ldr	r5, [pc, #20]	; (8006238 <_isatty_r+0x1c>)
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	f7fb f925 	bl	8001476 <_isatty>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_isatty_r+0x1a>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_isatty_r+0x1a>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	200005e8 	.word	0x200005e8

0800623c <_lseek_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	4611      	mov	r1, r2
 8006244:	2200      	movs	r2, #0
 8006246:	4d05      	ldr	r5, [pc, #20]	; (800625c <_lseek_r+0x20>)
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fb f91d 	bl	800148a <_lseek>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_lseek_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_lseek_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200005e8 	.word	0x200005e8

08006260 <__ascii_mbtowc>:
 8006260:	b082      	sub	sp, #8
 8006262:	b901      	cbnz	r1, 8006266 <__ascii_mbtowc+0x6>
 8006264:	a901      	add	r1, sp, #4
 8006266:	b142      	cbz	r2, 800627a <__ascii_mbtowc+0x1a>
 8006268:	b14b      	cbz	r3, 800627e <__ascii_mbtowc+0x1e>
 800626a:	7813      	ldrb	r3, [r2, #0]
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	1e10      	subs	r0, r2, #0
 8006272:	bf18      	it	ne
 8006274:	2001      	movne	r0, #1
 8006276:	b002      	add	sp, #8
 8006278:	4770      	bx	lr
 800627a:	4610      	mov	r0, r2
 800627c:	e7fb      	b.n	8006276 <__ascii_mbtowc+0x16>
 800627e:	f06f 0001 	mvn.w	r0, #1
 8006282:	e7f8      	b.n	8006276 <__ascii_mbtowc+0x16>

08006284 <__malloc_lock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_lock+0x8>)
 8006286:	f7ff b8ca 	b.w	800541e <__retarget_lock_acquire_recursive>
 800628a:	bf00      	nop
 800628c:	200005dc 	.word	0x200005dc

08006290 <__malloc_unlock>:
 8006290:	4801      	ldr	r0, [pc, #4]	; (8006298 <__malloc_unlock+0x8>)
 8006292:	f7ff b8c5 	b.w	8005420 <__retarget_lock_release_recursive>
 8006296:	bf00      	nop
 8006298:	200005dc 	.word	0x200005dc

0800629c <_read_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	2200      	movs	r2, #0
 80062a6:	4d05      	ldr	r5, [pc, #20]	; (80062bc <_read_r+0x20>)
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fb f890 	bl	80013d0 <_read>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_read_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_read_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200005e8 	.word	0x200005e8

080062c0 <__ascii_wctomb>:
 80062c0:	4603      	mov	r3, r0
 80062c2:	4608      	mov	r0, r1
 80062c4:	b141      	cbz	r1, 80062d8 <__ascii_wctomb+0x18>
 80062c6:	2aff      	cmp	r2, #255	; 0xff
 80062c8:	d904      	bls.n	80062d4 <__ascii_wctomb+0x14>
 80062ca:	228a      	movs	r2, #138	; 0x8a
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	4770      	bx	lr
 80062d4:	2001      	movs	r0, #1
 80062d6:	700a      	strb	r2, [r1, #0]
 80062d8:	4770      	bx	lr

080062da <abort>:
 80062da:	2006      	movs	r0, #6
 80062dc:	b508      	push	{r3, lr}
 80062de:	f000 f82b 	bl	8006338 <raise>
 80062e2:	2001      	movs	r0, #1
 80062e4:	f7fb f86a 	bl	80013bc <_exit>

080062e8 <_raise_r>:
 80062e8:	291f      	cmp	r1, #31
 80062ea:	b538      	push	{r3, r4, r5, lr}
 80062ec:	4604      	mov	r4, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	d904      	bls.n	80062fc <_raise_r+0x14>
 80062f2:	2316      	movs	r3, #22
 80062f4:	6003      	str	r3, [r0, #0]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062fe:	b112      	cbz	r2, 8006306 <_raise_r+0x1e>
 8006300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006304:	b94b      	cbnz	r3, 800631a <_raise_r+0x32>
 8006306:	4620      	mov	r0, r4
 8006308:	f000 f830 	bl	800636c <_getpid_r>
 800630c:	462a      	mov	r2, r5
 800630e:	4601      	mov	r1, r0
 8006310:	4620      	mov	r0, r4
 8006312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006316:	f000 b817 	b.w	8006348 <_kill_r>
 800631a:	2b01      	cmp	r3, #1
 800631c:	d00a      	beq.n	8006334 <_raise_r+0x4c>
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	d103      	bne.n	800632a <_raise_r+0x42>
 8006322:	2316      	movs	r3, #22
 8006324:	6003      	str	r3, [r0, #0]
 8006326:	2001      	movs	r0, #1
 8006328:	e7e7      	b.n	80062fa <_raise_r+0x12>
 800632a:	2400      	movs	r4, #0
 800632c:	4628      	mov	r0, r5
 800632e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006332:	4798      	blx	r3
 8006334:	2000      	movs	r0, #0
 8006336:	e7e0      	b.n	80062fa <_raise_r+0x12>

08006338 <raise>:
 8006338:	4b02      	ldr	r3, [pc, #8]	; (8006344 <raise+0xc>)
 800633a:	4601      	mov	r1, r0
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	f7ff bfd3 	b.w	80062e8 <_raise_r>
 8006342:	bf00      	nop
 8006344:	2000000c 	.word	0x2000000c

08006348 <_kill_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	2300      	movs	r3, #0
 800634c:	4d06      	ldr	r5, [pc, #24]	; (8006368 <_kill_r+0x20>)
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	f7fb f821 	bl	800139c <_kill>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d102      	bne.n	8006364 <_kill_r+0x1c>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	b103      	cbz	r3, 8006364 <_kill_r+0x1c>
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	bd38      	pop	{r3, r4, r5, pc}
 8006366:	bf00      	nop
 8006368:	200005e8 	.word	0x200005e8

0800636c <_getpid_r>:
 800636c:	f7fb b80f 	b.w	800138e <_getpid>

08006370 <_init>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr

0800637c <_fini>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr
